{
  "address": "0x394f43f8a55F4caDE6A4A2aBfc20aE617b944182",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_version",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "errorData",
          "type": "bytes"
        }
      ],
      "name": "FeeRecipientReceiveError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "errorData",
          "type": "bytes"
        }
      ],
      "name": "TreasuryReceiveError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "errorData",
          "type": "bytes"
        }
      ],
      "name": "WithdrawerReceiveError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroBalanceWithdrawal",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "feeRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewards",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nodeOperatorFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "treasuryFee",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_publicKeyRoot",
          "type": "bytes32"
        }
      ],
      "name": "dispatch",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakingContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_publicKeyRoot",
          "type": "bytes32"
        }
      ],
      "name": "getWithdrawer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        }
      ],
      "name": "initELD",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe12680c2218cfc390e5f6b2fba9767e634155ca6b30a3137d0d0a10162be95cd",
  "receipt": {
    "to": null,
    "from": "0x92D7d6DADe15fcF369534cEb8CD1A27f97185ab3",
    "contractAddress": "0x394f43f8a55F4caDE6A4A2aBfc20aE617b944182",
    "transactionIndex": 2,
    "gasUsed": "544344",
    "logsBloom": "0x
    "blockHash": "0x9db88e8b1bac9a488f23fdc10c77f6547fe95cf63512adec494a51ebebcfb963",
    "transactionHash": "0xe12680c2218cfc390e5f6b2fba9767e634155ca6b30a3137d0d0a10162be95cd",
    "logs": [],
    "blockNumber": 12552038,
    "cumulativeGasUsed": "2714021",
    "status": 1,
    "byzantium": true
  },
  "args": [
    1
  ],
  "numDeployments": 1,
  "solcInputHash": "03dbe6c7a4c2aaee615ddc5e783fbf2e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"errorData\",\"type\":\"bytes\"}],\"name\":\"FeeRecipientReceiveError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"errorData\",\"type\":\"bytes\"}],\"name\":\"TreasuryReceiveError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"errorData\",\"type\":\"bytes\"}],\"name\":\"WithdrawerReceiveError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroBalanceWithdrawal\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nodeOperatorFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treasuryFee\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_publicKeyRoot\",\"type\":\"bytes32\"}],\"name\":\"dispatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_publicKeyRoot\",\"type\":\"bytes32\"}],\"name\":\"getWithdrawer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"}],\"name\":\"initELD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Kiln\",\"kind\":\"dev\",\"methods\":{\"getWithdrawer(bytes32)\":{\"params\":{\"_publicKeyRoot\":\"Public key root to get the owner\"}},\"initELD(address)\":{\"params\":{\"_stakingContract\":\"Address of the Staking Contract\"}}},\"title\":\"Execution Layer Fee Recipient\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor method allowing us to prevent calls to initCLFR by setting the appropriate version\"},\"dispatch(bytes32)\":{\"notice\":\"Performs a withdrawal on this contract's balance\"},\"getStakingContract()\":{\"notice\":\"Retrieve the staking contract address\"},\"getWithdrawer(bytes32)\":{\"notice\":\"Retrieve the assigned withdrawer for the given public key root\"},\"initELD(address)\":{\"notice\":\"Initialize the contract by storing the staking contract and the public key in storage\"}},\"notice\":\"This contract can be used to receive fees from a validator and split them with a node operator\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/ExecutionLayerFeeDispatcher.sol\":\"ExecutionLayerFeeDispatcher\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/contracts/ExecutionLayerFeeDispatcher.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.10;\\n\\nimport \\\"./libs/FeeRecipientStorageLib.sol\\\";\\nimport \\\"./interfaces/IStakingContractFeeDetails.sol\\\";\\nimport \\\"./interfaces/IFeeDispatcher.sol\\\";\\n\\n/// @title Execution Layer Fee Recipient\\n/// @author Kiln\\n/// @notice This contract can be used to receive fees from a validator and split them with a node operator\\ncontract ExecutionLayerFeeDispatcher is IFeeDispatcher {\\n    using FeeRecipientStorageLib for bytes32;\\n\\n    event Withdrawal(\\n        address indexed withdrawer,\\n        address indexed feeRecipient,\\n        uint256 rewards,\\n        uint256 nodeOperatorFee,\\n        uint256 treasuryFee\\n    );\\n\\n    error TreasuryReceiveError(bytes errorData);\\n    error FeeRecipientReceiveError(bytes errorData);\\n    error WithdrawerReceiveError(bytes errorData);\\n    error ZeroBalanceWithdrawal();\\n    error AlreadyInitialized();\\n    error InvalidCall();\\n\\n    bytes32 internal constant STAKING_CONTRACT_ADDRESS_SLOT =\\n        keccak256(\\\"ExecutionLayerFeeRecipient.stakingContractAddress\\\");\\n    uint256 internal constant BASIS_POINTS = 10_000;\\n    bytes32 internal constant VERSION_SLOT = keccak256(\\\"ExecutionLayerFeeRecipient.version\\\");\\n\\n    /// @notice Ensures an initialisation call has been called only once per _version value\\n    /// @param _version The current initialisation value\\n    modifier init(uint256 _version) {\\n        if (_version != VERSION_SLOT.getUint256() + 1) {\\n            revert AlreadyInitialized();\\n        }\\n\\n        VERSION_SLOT.setUint256(_version);\\n\\n        _;\\n    }\\n\\n    /// @notice Constructor method allowing us to prevent calls to initCLFR by setting the appropriate version\\n    constructor(uint256 _version) {\\n        VERSION_SLOT.setUint256(_version);\\n    }\\n\\n    /// @notice Initialize the contract by storing the staking contract and the public key in storage\\n    /// @param _stakingContract Address of the Staking Contract\\n    function initELD(address _stakingContract) external init(1) {\\n        STAKING_CONTRACT_ADDRESS_SLOT.setAddress(_stakingContract);\\n    }\\n\\n    /// @notice Performs a withdrawal on this contract's balance\\n    function dispatch(bytes32 _publicKeyRoot) external payable {\\n        uint256 balance = address(this).balance;\\n        if (balance == 0) {\\n            revert ZeroBalanceWithdrawal();\\n        }\\n        IStakingContractFeeDetails stakingContract = IStakingContractFeeDetails(\\n            STAKING_CONTRACT_ADDRESS_SLOT.getAddress()\\n        );\\n        address withdrawer = stakingContract.getWithdrawerFromPublicKeyRoot(_publicKeyRoot);\\n        address operator = stakingContract.getOperatorFeeRecipient(_publicKeyRoot);\\n        address treasury = stakingContract.getTreasury();\\n        uint256 globalFee = (balance * stakingContract.getGlobalFee()) / BASIS_POINTS;\\n        uint256 operatorFee = (globalFee * stakingContract.getOperatorFee()) / BASIS_POINTS;\\n\\n        (bool status, bytes memory data) = withdrawer.call{value: balance - globalFee}(\\\"\\\");\\n        if (status == false) {\\n            revert WithdrawerReceiveError(data);\\n        }\\n        if (globalFee > 0) {\\n            (status, data) = treasury.call{value: globalFee - operatorFee}(\\\"\\\");\\n            if (status == false) {\\n                revert FeeRecipientReceiveError(data);\\n            }\\n        }\\n        if (operatorFee > 0) {\\n            (status, data) = operator.call{value: operatorFee}(\\\"\\\");\\n            if (status == false) {\\n                revert TreasuryReceiveError(data);\\n            }\\n        }\\n        emit Withdrawal(withdrawer, operator, balance - globalFee, operatorFee, globalFee - operatorFee);\\n    }\\n\\n    /// @notice Retrieve the staking contract address\\n    function getStakingContract() external view returns (address) {\\n        return STAKING_CONTRACT_ADDRESS_SLOT.getAddress();\\n    }\\n\\n    /// @notice Retrieve the assigned withdrawer for the given public key root\\n    /// @param _publicKeyRoot Public key root to get the owner\\n    function getWithdrawer(bytes32 _publicKeyRoot) external view returns (address) {\\n        IStakingContractFeeDetails stakingContract = IStakingContractFeeDetails(\\n            STAKING_CONTRACT_ADDRESS_SLOT.getAddress()\\n        );\\n        return stakingContract.getWithdrawerFromPublicKeyRoot(_publicKeyRoot);\\n    }\\n\\n    receive() external payable {\\n        revert InvalidCall();\\n    }\\n\\n    fallback() external payable {\\n        revert InvalidCall();\\n    }\\n}\\n\",\"keccak256\":\"0xcdb758b643cdd73421a114395ba203b21177b5960bb6e96bedc4f1943122048b\",\"license\":\"BUSL-1.1\"},\"src/contracts/interfaces/IFeeDispatcher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10;\\n\\ninterface IFeeDispatcher {\\n    function dispatch(bytes32 _publicKeyRoot) external payable;\\n\\n    function getWithdrawer(bytes32 _publicKeyRoot) external view returns (address);\\n}\\n\",\"keccak256\":\"0x75efa5a697b32235188a62f730b7ab2a2fc5c422a93010aa0b18e93ea1bade45\",\"license\":\"MIT\"},\"src/contracts/interfaces/IStakingContractFeeDetails.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10;\\n\\ninterface IStakingContractFeeDetails {\\n    function getWithdrawerFromPublicKeyRoot(bytes32 _publicKeyRoot) external view returns (address);\\n\\n    function getTreasury() external view returns (address);\\n\\n    function getOperatorFeeRecipient(bytes32 pubKeyRoot) external view returns (address);\\n\\n    function getGlobalFee() external view returns (uint256);\\n\\n    function getOperatorFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa3f0dccf7edeb80f5d9078fe2a62118a2b222f136b786aebd3cc6fa5499276a8\",\"license\":\"MIT\"},\"src/contracts/libs/FeeRecipientStorageLib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10;\\n\\nlibrary FeeRecipientStorageLib {\\n    function getUint256(bytes32 position) internal view returns (uint256 data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function setUint256(bytes32 position, uint256 data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function getAddress(bytes32 position) internal view returns (address data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function setAddress(bytes32 position, address data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function getBytes32(bytes32 position) internal view returns (bytes32 data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function setBytes32(bytes32 position, bytes32 data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3cd599adbee155c1fd5b397eb5d6f57add731d867474ef634799efa2ec5bb58e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161090b38038061090b83398101604081905261002f91610070565b610066817f2a83e6f793b1db0be720b1fadaabc888b1b7e5af00b045d6d837e073182510b161006c60201b6106ba1790919060201c565b50610089565b9055565b60006020828403121561008257600080fd5b5051919050565b610873806100986000396000f3fe6080604052600436106100435760003560e01c8063068a8c8d1461007a57806327de90161461009c5780638e68dce4146100d8578063ce120650146100ed57610061565b366100615760405163574b16a760e11b815260040160405180910390fd5b60405163574b16a760e11b815260040160405180910390fd5b34801561008657600080fd5b5061009a6100953660046106d6565b610100565b005b3480156100a857600080fd5b506100bc6100b73660046106f3565b610197565b6040516001600160a01b03909116815260200160405180910390f35b3480156100e457600080fd5b506100bc610223565b61009a6100fb3660046106f3565b610240565b600161012a7f2a83e6f793b1db0be720b1fadaabc888b1b7e5af00b045d6d837e073182510b15490565b610135906001610722565b81146101535760405162dc149f60e41b815260040160405180910390fd5b61017c7f2a83e6f793b1db0be720b1fadaabc888b1b7e5af00b045d6d837e073182510b1829055565b61019360008051602061081e833981519152839055565b5050565b6000806101b060008051602061081e8339815191525490565b60405163a740080160e01b8152600481018590529091506001600160a01b0382169063a740080190602401602060405180830381865afa1580156101f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021c919061073a565b9392505050565b600061023b60008051602061081e8339815191525490565b905090565b47600081900361026357604051635b2b158560e11b815260040160405180910390fd5b600061027b60008051602061081e8339815191525490565b60405163a740080160e01b8152600481018590529091506000906001600160a01b0383169063a740080190602401602060405180830381865afa1580156102c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ea919061073a565b604051634d6fc8f760e11b8152600481018690529091506000906001600160a01b03841690639adf91ee90602401602060405180830381865afa158015610335573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610359919061073a565b90506000836001600160a01b0316633b19e84a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561039b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103bf919061073a565b90506000612710856001600160a01b0316631bcbfaba6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610404573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104289190610757565b6104329088610770565b61043c919061078f565b90506000612710866001600160a01b031663286966086040518163ffffffff1660e01b8152600401602060405180830381865afa158015610481573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a59190610757565b6104af9084610770565b6104b9919061078f565b90506000806001600160a01b0387166104d2858b6107b1565b604051600081818185875af1925050503d806000811461050e576040519150601f19603f3d011682016040523d82523d6000602084013e610513565b606091505b509092509050811515600003610547578060405163ce13343d60e01b815260040161053e91906107c8565b60405180910390fd5b83156105cd576001600160a01b03851661056184866107b1565b604051600081818185875af1925050503d806000811461059d576040519150601f19603f3d011682016040523d82523d6000602084013e6105a2565b606091505b5090925090508115156000036105cd578060405163e5ea83e760e01b815260040161053e91906107c8565b821561064c576040516001600160a01b038716908490600081818185875af1925050503d806000811461061c576040519150601f19603f3d011682016040523d82523d6000602084013e610621565b606091505b50909250905081151560000361064c578060405163bc98622d60e01b815260040161053e91906107c8565b6001600160a01b038087169088167f0373e649c2cd6407bd569d5c66304cce4b4977c361734b811045f83c7bfe8c8b610685878d6107b1565b86610690818a6107b1565b6040805193845260208401929092529082015260600160405180910390a350505050505050505050565b9055565b6001600160a01b03811681146106d357600080fd5b50565b6000602082840312156106e857600080fd5b813561021c816106be565b60006020828403121561070557600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156107355761073561070c565b500190565b60006020828403121561074c57600080fd5b815161021c816106be565b60006020828403121561076957600080fd5b5051919050565b600081600019048311821515161561078a5761078a61070c565b500290565b6000826107ac57634e487b7160e01b600052601260045260246000fd5b500490565b6000828210156107c3576107c361070c565b500390565b600060208083528351808285015260005b818110156107f5578581018301518582016040015282016107d9565b81811115610807576000604083870101525b50601f01601f191692909201604001939250505056feda87ab80a3be8afba92a2e1fa9eebe6df07c3e4f871642fcbd8b843ff0112511a2646970667358221220fbfdb83f55e551cc5f116dd3979ee37f1b0aaff2b29db027fcd54c209431fc9c64736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106100435760003560e01c8063068a8c8d1461007a57806327de90161461009c5780638e68dce4146100d8578063ce120650146100ed57610061565b366100615760405163574b16a760e11b815260040160405180910390fd5b60405163574b16a760e11b815260040160405180910390fd5b34801561008657600080fd5b5061009a6100953660046106d6565b610100565b005b3480156100a857600080fd5b506100bc6100b73660046106f3565b610197565b6040516001600160a01b03909116815260200160405180910390f35b3480156100e457600080fd5b506100bc610223565b61009a6100fb3660046106f3565b610240565b600161012a7f2a83e6f793b1db0be720b1fadaabc888b1b7e5af00b045d6d837e073182510b15490565b610135906001610722565b81146101535760405162dc149f60e41b815260040160405180910390fd5b61017c7f2a83e6f793b1db0be720b1fadaabc888b1b7e5af00b045d6d837e073182510b1829055565b61019360008051602061081e833981519152839055565b5050565b6000806101b060008051602061081e8339815191525490565b60405163a740080160e01b8152600481018590529091506001600160a01b0382169063a740080190602401602060405180830381865afa1580156101f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021c919061073a565b9392505050565b600061023b60008051602061081e8339815191525490565b905090565b47600081900361026357604051635b2b158560e11b815260040160405180910390fd5b600061027b60008051602061081e8339815191525490565b60405163a740080160e01b8152600481018590529091506000906001600160a01b0383169063a740080190602401602060405180830381865afa1580156102c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ea919061073a565b604051634d6fc8f760e11b8152600481018690529091506000906001600160a01b03841690639adf91ee90602401602060405180830381865afa158015610335573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610359919061073a565b90506000836001600160a01b0316633b19e84a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561039b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103bf919061073a565b90506000612710856001600160a01b0316631bcbfaba6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610404573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104289190610757565b6104329088610770565b61043c919061078f565b90506000612710866001600160a01b031663286966086040518163ffffffff1660e01b8152600401602060405180830381865afa158015610481573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a59190610757565b6104af9084610770565b6104b9919061078f565b90506000806001600160a01b0387166104d2858b6107b1565b604051600081818185875af1925050503d806000811461050e576040519150601f19603f3d011682016040523d82523d6000602084013e610513565b606091505b509092509050811515600003610547578060405163ce13343d60e01b815260040161053e91906107c8565b60405180910390fd5b83156105cd576001600160a01b03851661056184866107b1565b604051600081818185875af1925050503d806000811461059d576040519150601f19603f3d011682016040523d82523d6000602084013e6105a2565b606091505b5090925090508115156000036105cd578060405163e5ea83e760e01b815260040161053e91906107c8565b821561064c576040516001600160a01b038716908490600081818185875af1925050503d806000811461061c576040519150601f19603f3d011682016040523d82523d6000602084013e610621565b606091505b50909250905081151560000361064c578060405163bc98622d60e01b815260040161053e91906107c8565b6001600160a01b038087169088167f0373e649c2cd6407bd569d5c66304cce4b4977c361734b811045f83c7bfe8c8b610685878d6107b1565b86610690818a6107b1565b6040805193845260208401929092529082015260600160405180910390a350505050505050505050565b9055565b6001600160a01b03811681146106d357600080fd5b50565b6000602082840312156106e857600080fd5b813561021c816106be565b60006020828403121561070557600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156107355761073561070c565b500190565b60006020828403121561074c57600080fd5b815161021c816106be565b60006020828403121561076957600080fd5b5051919050565b600081600019048311821515161561078a5761078a61070c565b500290565b6000826107ac57634e487b7160e01b600052601260045260246000fd5b500490565b6000828210156107c3576107c361070c565b500390565b600060208083528351808285015260005b818110156107f5578581018301518582016040015282016107d9565b81811115610807576000604083870101525b50601f01601f191692909201604001939250505056feda87ab80a3be8afba92a2e1fa9eebe6df07c3e4f871642fcbd8b843ff0112511a2646970667358221220fbfdb83f55e551cc5f116dd3979ee37f1b0aaff2b29db027fcd54c209431fc9c64736f6c634300080d0033",
  "devdoc": {
    "author": "Kiln",
    "kind": "dev",
    "methods": {
      "getWithdrawer(bytes32)": {
        "params": {
          "_publicKeyRoot": "Public key root to get the owner"
        }
      },
      "initELD(address)": {
        "params": {
          "_stakingContract": "Address of the Staking Contract"
        }
      }
    },
    "title": "Execution Layer Fee Recipient",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor method allowing us to prevent calls to initCLFR by setting the appropriate version"
      },
      "dispatch(bytes32)": {
        "notice": "Performs a withdrawal on this contract's balance"
      },
      "getStakingContract()": {
        "notice": "Retrieve the staking contract address"
      },
      "getWithdrawer(bytes32)": {
        "notice": "Retrieve the assigned withdrawer for the given public key root"
      },
      "initELD(address)": {
        "notice": "Initialize the contract by storing the staking contract and the public key in storage"
      }
    },
    "notice": "This contract can be used to receive fees from a validator and split them with a node operator",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}