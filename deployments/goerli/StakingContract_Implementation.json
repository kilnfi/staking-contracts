{
  "address": "0xa6b3A6BCf3AdF943103f1c8Bc95A8Cea6Ec2c620",
  "abi": [
    {
      "inputs": [],
      "name": "AlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DepositFailure",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FundedValidatorDeletionAttempt",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidArgument",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidMessageValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPublicKeys",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSignatures",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidValidatorCount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoOperators",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughKeys",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughValidators",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnsortedIndexes",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "publicKeyRoot",
          "type": "bytes32"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "DEPOSIT_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PUBLIC_KEY_LENGTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SIGNATURE_LENGTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operatorAddress",
          "type": "address"
        }
      ],
      "name": "addOperator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_operatorIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_keyCount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_publicKeys",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_signatures",
          "type": "bytes"
        }
      ],
      "name": "addValidators",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_withdrawer",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAvailableValidatorCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCLFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_publicKey",
          "type": "bytes"
        }
      ],
      "name": "getCLFeeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getELFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_publicKey",
          "type": "bytes"
        }
      ],
      "name": "getELFeeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "pubKeyRoot",
          "type": "bytes32"
        }
      ],
      "name": "getFeeTreasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_operatorIndex",
          "type": "uint256"
        }
      ],
      "name": "getOperator",
      "outputs": [
        {
          "internalType": "address",
          "name": "operatorAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "keys",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "funded",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "available",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_operatorIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_validatorIndex",
          "type": "uint256"
        }
      ],
      "name": "getValidator",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "funded",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_publicKey",
          "type": "bytes"
        }
      ],
      "name": "getWithdrawer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_publicKeyRoot",
          "type": "bytes32"
        }
      ],
      "name": "getWithdrawerFromPublicKeyRoot",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_depositContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_elFeeRecipientImplementation",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_clFeeRecipientImplementation",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_elFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_clFee",
          "type": "uint256"
        }
      ],
      "name": "initialize_1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_operatorIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_indexes",
          "type": "uint256[]"
        }
      ],
      "name": "removeValidators",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setCLFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setELFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_operatorIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "setOperatorLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_publicKey",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_newWithdrawer",
          "type": "address"
        }
      ],
      "name": "setWithdrawer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_publicKey",
          "type": "bytes"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_publicKey",
          "type": "bytes"
        }
      ],
      "name": "withdrawCLFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_publicKey",
          "type": "bytes"
        }
      ],
      "name": "withdrawELFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xad60669ea207928deaa2bd4c26f29e62d5f347753da612600716ac7683f670b7",
  "receipt": {
    "to": null,
    "from": "0x92D7d6DADe15fcF369534cEb8CD1A27f97185ab3",
    "contractAddress": "0xa6b3A6BCf3AdF943103f1c8Bc95A8Cea6Ec2c620",
    "transactionIndex": 41,
    "gasUsed": "4549229",
    "logsBloom": "0x
    "blockHash": "0xe1250c2dde1d99c56ba8396527ea309e673d400eca702c41df5f4f6e3e4372f4",
    "transactionHash": "0xad60669ea207928deaa2bd4c26f29e62d5f347753da612600716ac7683f670b7",
    "logs": [],
    "blockNumber": 7090398,
    "cumulativeGasUsed": "13804403",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d33ed5f2bfc2ca0e54a64bc5ccb49ce5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositFailure\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundedValidatorDeletionAttempt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArgument\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMessageValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPublicKeys\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignatures\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidValidatorCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoOperators\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughKeys\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughValidators\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsortedIndexes\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"publicKeyRoot\",\"type\":\"bytes32\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DEPOSIT_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_KEY_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIGNATURE_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operatorIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_keyCount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_publicKeys\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signatures\",\"type\":\"bytes\"}],\"name\":\"addValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_withdrawer\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvailableValidatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCLFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"getCLFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getELFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"getELFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"pubKeyRoot\",\"type\":\"bytes32\"}],\"name\":\"getFeeTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operatorIndex\",\"type\":\"uint256\"}],\"name\":\"getOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operatorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keys\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"funded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operatorIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validatorIndex\",\"type\":\"uint256\"}],\"name\":\"getValidator\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"funded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"getWithdrawer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_publicKeyRoot\",\"type\":\"bytes32\"}],\"name\":\"getWithdrawerFromPublicKeyRoot\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_depositContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_elFeeRecipientImplementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_clFeeRecipientImplementation\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_elFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_clFee\",\"type\":\"uint256\"}],\"name\":\"initialize_1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operatorIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_indexes\",\"type\":\"uint256[]\"}],\"name\":\"removeValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setCLFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setELFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operatorIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setOperatorLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_newWithdrawer\",\"type\":\"address\"}],\"name\":\"setWithdrawer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"withdrawCLFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"withdrawELFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Kiln\",\"kind\":\"dev\",\"methods\":{\"addOperator(address)\":{\"details\":\"Only callable by admin\",\"params\":{\"_operatorAddress\":\"Operator address allowed to add / remove validators\"}},\"addValidators(uint256,uint256,bytes,bytes)\":{\"details\":\"Only callable by operator\",\"params\":{\"_keyCount\":\"Number of keys added\",\"_operatorIndex\":\"Operator Index\",\"_publicKeys\":\"Concatenated _keyCount public keys\",\"_signatures\":\"Concatenated _keyCount signatures\"}},\"deposit(address)\":{\"details\":\"A multiple of 32 ETH should be sent\",\"params\":{\"_withdrawer\":\"The withdrawer address\"}},\"getCLFeeRecipient(bytes)\":{\"params\":{\"_publicKey\":\"Validator to get the recipient\"}},\"getELFeeRecipient(bytes)\":{\"params\":{\"_publicKey\":\"Validator to get the recipient\"}},\"getOperator(uint256)\":{\"params\":{\"_operatorIndex\":\"Operator index\"}},\"getValidator(uint256,uint256)\":{\"params\":{\"_operatorIndex\":\"Index of the operator running the validator\",\"_validatorIndex\":\"Index of the validator\"}},\"getWithdrawer(bytes)\":{\"params\":{\"_publicKey\":\"Public Key to check\"}},\"getWithdrawerFromPublicKeyRoot(bytes32)\":{\"params\":{\"_publicKeyRoot\":\"Hash of the public key\"}},\"initialize_1(address,address,address,address,uint256,uint256)\":{\"params\":{\"_admin\":\"Address of the admin allowed to change the operator and admin\",\"_clFee\":\"Fee in bps to take on any Consensus Layer fee withdrawal\",\"_clFeeRecipientImplementation\":\"Address of the Consensus Layer fee recipient implementation\",\"_depositContract\":\"Address of the Deposit Contract\",\"_elFee\":\"Fee in bps to take on any Execution Layer fee withdrawal\",\"_elFeeRecipientImplementation\":\"Address of the Execution Layer fee recipient implementation\"}},\"removeValidators(uint256,uint256[])\":{\"details\":\"Only callable by operatorIndexes should be provided in decreasing order\",\"params\":{\"_indexes\":\"List of indexes to delete, in decreasing order\",\"_operatorIndex\":\"Operator Index\"}},\"setAdmin(address)\":{\"details\":\"Only callable by admin\",\"params\":{\"_newAdmin\":\"New Administrator address\"}},\"setCLFee(uint256)\":{\"params\":{\"_fee\":\"Fee in Basis Point\"}},\"setELFee(uint256)\":{\"params\":{\"_fee\":\"Fee in Basis Point\"}},\"setOperatorLimit(uint256,uint256)\":{\"details\":\"Only callable by admin\",\"params\":{\"_limit\":\"New staking limit\",\"_operatorIndex\":\"Operator Index\"}},\"setWithdrawer(bytes,address)\":{\"details\":\"Only callable by current public key withdrawer\",\"params\":{\"_newWithdrawer\":\"New withdrawer address\",\"_publicKey\":\"Public key to change withdrawer\"}},\"withdraw(bytes)\":{\"details\":\"Reverts if any is null\",\"params\":{\"_publicKey\":\"Validator to withdraw Execution and Consensus Layer Fees from\"}},\"withdrawCLFee(bytes)\":{\"details\":\"Funds are sent to the withdrawer accountThis method is public on purpose\",\"params\":{\"_publicKey\":\"Validator to withdraw Consensus Layer Fees from\"}},\"withdrawELFee(bytes)\":{\"details\":\"Funds are sent to the withdrawer accountThis method is public on purpose\",\"params\":{\"_publicKey\":\"Validator to withdraw Execution Layer Fees from\"}}},\"title\":\"Ethereum Staking Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addOperator(address)\":{\"notice\":\"Add new operator\"},\"addValidators(uint256,uint256,bytes,bytes)\":{\"notice\":\"Add new validator public keys and signatures\"},\"deposit(address)\":{\"notice\":\"Explicit deposit method\"},\"getAdmin()\":{\"notice\":\"Retrieve system admin\"},\"getAvailableValidatorCount()\":{\"notice\":\"Get the total available keys that are redy to be used for deposits\"},\"getCLFee()\":{\"notice\":\"Retrieve the Consensus Layer Fee taken by the node operator\"},\"getCLFeeRecipient(bytes)\":{\"notice\":\"Compute the Consensus Layer Fee recipient address for a given validator public key\"},\"getELFee()\":{\"notice\":\"Retrieve the Execution Layer Fee taken by the node operator\"},\"getELFeeRecipient(bytes)\":{\"notice\":\"Compute the Execution Layer Fee recipient address for a given validator public key\"},\"getFeeTreasury(bytes32)\":{\"notice\":\"Retrieve the Execution & Consensus Layer Fee operator recipient for a given public key\"},\"getOperator(uint256)\":{\"notice\":\"Retrieve operator details\"},\"getValidator(uint256,uint256)\":{\"notice\":\"Get details about a validator\"},\"getWithdrawer(bytes)\":{\"notice\":\"Retrieve withdrawer of public key\"},\"getWithdrawerFromPublicKeyRoot(bytes32)\":{\"notice\":\"Retrieve withdrawer of public key root\"},\"initialize_1(address,address,address,address,uint256,uint256)\":{\"notice\":\"Initializes version 1 of Staking Contract\"},\"removeValidators(uint256,uint256[])\":{\"notice\":\"Remove unfunded validators\"},\"setAdmin(address)\":{\"notice\":\"Set new admin\"},\"setCLFee(uint256)\":{\"notice\":\"Change the Consensus Layer Fee taken by the node operator\"},\"setELFee(uint256)\":{\"notice\":\"Change the Execution Layer Fee taken by the node operator\"},\"setOperatorLimit(uint256,uint256)\":{\"notice\":\"Set operator staking limits\"},\"setWithdrawer(bytes,address)\":{\"notice\":\"Set withdrawer for public key\"},\"withdraw(bytes)\":{\"notice\":\"Withdraw both Consensus and Execution Layer Fee for a given validator public key\"},\"withdrawCLFee(bytes)\":{\"notice\":\"Withdraw the Consensus Layer Fee for a given validator public key\"},\"withdrawELFee(bytes)\":{\"notice\":\"Withdraw the Execution Layer Fee for a given validator public key\"}},\"notice\":\"You can use this contract to store validator keys and have users fund them and trigger deposits.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/StakingContract.sol\":\"StakingContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x1cc0efb01cbf008b768fd7b334786a6e358809198bb7e67f1c530af4957c6a21\",\"license\":\"MIT\"},\"src/contracts/StakingContract.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.10;\\n\\nimport \\\"./libs/StakingContractStorageLib.sol\\\";\\nimport \\\"./libs/UintLib.sol\\\";\\nimport \\\"./libs/BytesLib.sol\\\";\\n\\nimport \\\"./interfaces/IDepositContract.sol\\\";\\nimport \\\"./interfaces/IFeeRecipient.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\n/// @title Ethereum Staking Contract\\n/// @author Kiln\\n/// @notice You can use this contract to store validator keys and have users fund them and trigger deposits.\\ncontract StakingContract {\\n    using StakingContractStorageLib for bytes32;\\n\\n    uint256 internal constant EXECUTION_LAYER_SALT_PREFIX = 0;\\n    uint256 internal constant CONSENSUS_LAYER_SALT_PREFIX = 1;\\n    uint256 public constant SIGNATURE_LENGTH = 96;\\n    uint256 public constant PUBLIC_KEY_LENGTH = 48;\\n    uint256 public constant DEPOSIT_SIZE = 32 ether;\\n    uint256 internal constant BASIS_POINTS = 10_000;\\n\\n    error NoOperators();\\n    error InvalidCall();\\n    error Unauthorized();\\n    error InvalidFee();\\n    error NotEnoughKeys();\\n    error DepositFailure();\\n    error InvalidArgument();\\n    error UnsortedIndexes();\\n    error InvalidPublicKeys();\\n    error InvalidSignatures();\\n    error AlreadyInitialized();\\n    error InvalidMessageValue();\\n    error NotEnoughValidators();\\n    error InvalidValidatorCount();\\n    error FundedValidatorDeletionAttempt();\\n\\n    struct ValidatorAllocationCache {\\n        bool used;\\n        uint8 operatorIndex;\\n        uint32 funded;\\n        uint32 toDeposit;\\n        uint32 available;\\n    }\\n\\n    event Deposit(address indexed caller, address indexed withdrawer, bytes publicKey, bytes32 publicKeyRoot);\\n\\n    /// @notice Ensures an initialisation call has been called only once per _version value\\n    /// @param _version The current initialisation value\\n    modifier init(uint256 _version) {\\n        if (_version != StakingContractStorageLib.getVersion() + 1) {\\n            revert AlreadyInitialized();\\n        }\\n\\n        StakingContractStorageLib.setVersion(_version);\\n        _;\\n    }\\n\\n    /// @notice Ensures that the caller is the admin\\n    modifier onlyAdmin() {\\n        if (msg.sender != StakingContractStorageLib.getAdmin()) {\\n            revert Unauthorized();\\n        }\\n\\n        _;\\n    }\\n\\n    /// @notice Ensures that the caller is the admin\\n    modifier onlyOperator(uint256 _operatorIndex) {\\n        if (msg.sender != StakingContractStorageLib.getOperators().value[_operatorIndex].operator) {\\n            revert Unauthorized();\\n        }\\n\\n        _;\\n    }\\n\\n    /// @notice Explicit deposit method\\n    /// @dev A multiple of 32 ETH should be sent\\n    /// @param _withdrawer The withdrawer address\\n    function deposit(address _withdrawer) external payable {\\n        _deposit(_withdrawer);\\n    }\\n\\n    /// @notice Implicit deposit method\\n    /// @dev A multiple of 32 ETH should be sent\\n    /// @dev The withdrawer is set to the message sender address\\n    receive() external payable {\\n        _deposit(msg.sender);\\n    }\\n\\n    /// @notice Fallback detection\\n    /// @dev Fails on any call that fallbacks\\n    fallback() external payable {\\n        revert InvalidCall();\\n    }\\n\\n    /// @notice Initializes version 1 of Staking Contract\\n    /// @param _admin Address of the admin allowed to change the operator and admin\\n    /// @param _depositContract Address of the Deposit Contract\\n    /// @param _elFeeRecipientImplementation Address of the Execution Layer fee recipient implementation\\n    /// @param _clFeeRecipientImplementation Address of the Consensus Layer fee recipient implementation\\n    /// @param _elFee Fee in bps to take on any Execution Layer fee withdrawal\\n    /// @param _clFee Fee in bps to take on any Consensus Layer fee withdrawal\\n    function initialize_1(\\n        address _admin,\\n        address _depositContract,\\n        address _elFeeRecipientImplementation,\\n        address _clFeeRecipientImplementation,\\n        uint256 _elFee,\\n        uint256 _clFee\\n    ) external init(1) {\\n        StakingContractStorageLib.setAdmin(_admin);\\n        StakingContractStorageLib.setDepositContract(_depositContract);\\n\\n        StakingContractStorageLib.setELFeeRecipientImplementation(_elFeeRecipientImplementation);\\n        StakingContractStorageLib.setELFee(_elFee);\\n\\n        StakingContractStorageLib.setCLFeeRecipientImplementation(_clFeeRecipientImplementation);\\n        StakingContractStorageLib.setCLFee(_clFee);\\n    }\\n\\n    /// @notice Retrieve system admin\\n    function getAdmin() external view returns (address) {\\n        return StakingContractStorageLib.getAdmin();\\n    }\\n\\n    /// @notice Retrieve the Execution Layer Fee taken by the node operator\\n    function getELFee() external view returns (uint256) {\\n        return StakingContractStorageLib.getELFee();\\n    }\\n\\n    /// @notice Retrieve the Consensus Layer Fee taken by the node operator\\n    function getCLFee() external view returns (uint256) {\\n        return StakingContractStorageLib.getCLFee();\\n    }\\n\\n    /// @notice Compute the Execution Layer Fee recipient address for a given validator public key\\n    /// @param _publicKey Validator to get the recipient\\n    function getELFeeRecipient(bytes calldata _publicKey) external view returns (address) {\\n        return _getDeterministicELFeeRecipientAddress(_publicKey);\\n    }\\n\\n    /// @notice Compute the Consensus Layer Fee recipient address for a given validator public key\\n    /// @param _publicKey Validator to get the recipient\\n    function getCLFeeRecipient(bytes calldata _publicKey) external view returns (address) {\\n        return _getDeterministicCLFeeRecipientAddress(_publicKey);\\n    }\\n\\n    /// @notice Retrieve the Execution & Consensus Layer Fee operator recipient for a given public key\\n    function getFeeTreasury(bytes32 pubKeyRoot) external view returns (address) {\\n        return\\n            StakingContractStorageLib\\n                .getOperators()\\n                .value[StakingContractStorageLib.getOperatorIndexPerValidator().value[pubKeyRoot]]\\n                .operator;\\n    }\\n\\n    /// @notice Retrieve withdrawer of public key\\n    /// @param _publicKey Public Key to check\\n    function getWithdrawer(bytes calldata _publicKey) external view returns (address) {\\n        return _getWithdrawer(_getPubKeyRoot(_publicKey));\\n    }\\n\\n    /// @notice Retrieve withdrawer of public key root\\n    /// @param _publicKeyRoot Hash of the public key\\n    function getWithdrawerFromPublicKeyRoot(bytes32 _publicKeyRoot) external view returns (address) {\\n        return _getWithdrawer(_publicKeyRoot);\\n    }\\n\\n    /// @notice Retrieve operator details\\n    /// @param _operatorIndex Operator index\\n    function getOperator(uint256 _operatorIndex)\\n        external\\n        view\\n        returns (\\n            address operatorAddress,\\n            uint256 limit,\\n            uint256 keys,\\n            uint256 funded,\\n            uint256 available\\n        )\\n    {\\n        StakingContractStorageLib.OperatorsSlot storage operators = StakingContractStorageLib.getOperators();\\n        if (_operatorIndex < operators.value.length) {\\n            StakingContractStorageLib.ValidatorsFundingInfo memory operatorInfo = StakingContractStorageLib\\n                .getValidatorsFundingInfo(_operatorIndex);\\n\\n            (operatorAddress, limit, keys) = (\\n                operators.value[_operatorIndex].operator,\\n                operators.value[_operatorIndex].limit,\\n                operators.value[_operatorIndex].publicKeys.length\\n            );\\n            (funded, available) = (operatorInfo.funded, operatorInfo.availableKeys);\\n        }\\n    }\\n\\n    /// @notice Get details about a validator\\n    /// @param _operatorIndex Index of the operator running the validator\\n    /// @param _validatorIndex Index of the validator\\n    function getValidator(uint256 _operatorIndex, uint256 _validatorIndex)\\n        external\\n        view\\n        returns (\\n            bytes memory publicKey,\\n            bytes memory signature,\\n            address withdrawer,\\n            bool funded\\n        )\\n    {\\n        StakingContractStorageLib.OperatorsSlot storage operators = StakingContractStorageLib.getOperators();\\n        publicKey = operators.value[_operatorIndex].publicKeys[_validatorIndex];\\n        signature = operators.value[_operatorIndex].signatures[_validatorIndex];\\n        withdrawer = _getWithdrawer(_getPubKeyRoot(publicKey));\\n        funded = _validatorIndex < StakingContractStorageLib.getValidatorsFundingInfo(_operatorIndex).funded;\\n    }\\n\\n    /// @notice Get the total available keys that are redy to be used for deposits\\n    function getAvailableValidatorCount() external view returns (uint256) {\\n        return StakingContractStorageLib.getTotalAvailableValidators();\\n    }\\n\\n    /// @notice Set new admin\\n    /// @dev Only callable by admin\\n    /// @param _newAdmin New Administrator address\\n    function setAdmin(address _newAdmin) external onlyAdmin {\\n        StakingContractStorageLib.setAdmin(_newAdmin);\\n    }\\n\\n    /// @notice Add new operator\\n    /// @dev Only callable by admin\\n    /// @param _operatorAddress Operator address allowed to add / remove validators\\n    function addOperator(address _operatorAddress) external onlyAdmin returns (uint256) {\\n        StakingContractStorageLib.OperatorsSlot storage operators = StakingContractStorageLib.getOperators();\\n        StakingContractStorageLib.OperatorInfo memory newOperator;\\n        newOperator.operator = _operatorAddress;\\n        operators.value.push(newOperator);\\n        return operators.value.length - 1;\\n    }\\n\\n    /// @notice Set withdrawer for public key\\n    /// @dev Only callable by current public key withdrawer\\n    /// @param _publicKey Public key to change withdrawer\\n    /// @param _newWithdrawer New withdrawer address\\n    function setWithdrawer(bytes calldata _publicKey, address _newWithdrawer) external {\\n        bytes32 pubkeyRoot = sha256(BytesLib.pad64(_publicKey));\\n        StakingContractStorageLib.WithdrawersSlot storage withdrawers = StakingContractStorageLib.getWithdrawers();\\n\\n        if (withdrawers.value[pubkeyRoot] != msg.sender) {\\n            revert Unauthorized();\\n        }\\n\\n        withdrawers.value[pubkeyRoot] = _newWithdrawer;\\n    }\\n\\n    /// @notice Set operator staking limits\\n    /// @dev Only callable by admin\\n    /// @param _operatorIndex Operator Index\\n    /// @param _limit New staking limit\\n    function setOperatorLimit(uint256 _operatorIndex, uint256 _limit) external onlyAdmin {\\n        StakingContractStorageLib.OperatorsSlot storage operators = StakingContractStorageLib.getOperators();\\n        operators.value[_operatorIndex].limit = _limit;\\n        _updateAvailableValidatorCount(_operatorIndex);\\n    }\\n\\n    /// @notice Change the Execution Layer Fee taken by the node operator\\n    /// @param _fee Fee in Basis Point\\n    function setELFee(uint256 _fee) external onlyAdmin {\\n        if (_fee > BASIS_POINTS) {\\n            revert InvalidFee();\\n        }\\n        StakingContractStorageLib.setELFee(_fee);\\n    }\\n\\n    /// @notice Change the Consensus Layer Fee taken by the node operator\\n    /// @param _fee Fee in Basis Point\\n    function setCLFee(uint256 _fee) external onlyAdmin {\\n        if (_fee > BASIS_POINTS) {\\n            revert InvalidFee();\\n        }\\n        StakingContractStorageLib.setCLFee(_fee);\\n    }\\n\\n    /// @notice Add new validator public keys and signatures\\n    /// @dev Only callable by operator\\n    /// @param _operatorIndex Operator Index\\n    /// @param _keyCount Number of keys added\\n    /// @param _publicKeys Concatenated _keyCount public keys\\n    /// @param _signatures Concatenated _keyCount signatures\\n    function addValidators(\\n        uint256 _operatorIndex,\\n        uint256 _keyCount,\\n        bytes calldata _publicKeys,\\n        bytes calldata _signatures\\n    ) external onlyOperator(_operatorIndex) {\\n        if (_keyCount == 0) {\\n            revert InvalidArgument();\\n        }\\n\\n        if (_publicKeys.length % PUBLIC_KEY_LENGTH != 0 || _publicKeys.length / PUBLIC_KEY_LENGTH != _keyCount) {\\n            revert InvalidPublicKeys();\\n        }\\n\\n        if (_signatures.length % SIGNATURE_LENGTH != 0 || _signatures.length / SIGNATURE_LENGTH != _keyCount) {\\n            revert InvalidSignatures();\\n        }\\n\\n        StakingContractStorageLib.OperatorsSlot storage operators = StakingContractStorageLib.getOperators();\\n        StakingContractStorageLib.OperatorIndexPerValidatorSlot\\n            storage operatorIndexPerValidator = StakingContractStorageLib.getOperatorIndexPerValidator();\\n\\n        for (uint256 i; i < _keyCount; ) {\\n            bytes memory publicKey = BytesLib.slice(_publicKeys, i * PUBLIC_KEY_LENGTH, PUBLIC_KEY_LENGTH);\\n            bytes memory signature = BytesLib.slice(_signatures, i * SIGNATURE_LENGTH, SIGNATURE_LENGTH);\\n\\n            operators.value[_operatorIndex].publicKeys.push(publicKey);\\n            operators.value[_operatorIndex].signatures.push(signature);\\n\\n            operatorIndexPerValidator.value[_getPubKeyRoot(publicKey)] = _operatorIndex;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        _updateAvailableValidatorCount(_operatorIndex);\\n    }\\n\\n    /// @notice Remove unfunded validators\\n    /// @dev Only callable by operator\\n    /// @dev Indexes should be provided in decreasing order\\n    /// @param _operatorIndex Operator Index\\n    /// @param _indexes List of indexes to delete, in decreasing order\\n    function removeValidators(uint256 _operatorIndex, uint256[] calldata _indexes)\\n        external\\n        onlyOperator(_operatorIndex)\\n    {\\n        if (_indexes.length == 0) {\\n            revert InvalidArgument();\\n        }\\n\\n        StakingContractStorageLib.ValidatorsFundingInfo memory operatorInfo = StakingContractStorageLib\\n            .getValidatorsFundingInfo(_operatorIndex);\\n        StakingContractStorageLib.OperatorsSlot storage operators = StakingContractStorageLib.getOperators();\\n\\n        for (uint256 i; i < _indexes.length; ) {\\n            if (i > 0 && _indexes[i] >= _indexes[i - 1]) {\\n                revert UnsortedIndexes();\\n            }\\n\\n            if (_indexes[i] < operatorInfo.funded) {\\n                revert FundedValidatorDeletionAttempt();\\n            }\\n\\n            if (_indexes[i] == operators.value[_operatorIndex].publicKeys.length - 1) {\\n                operators.value[_operatorIndex].publicKeys.pop();\\n                operators.value[_operatorIndex].signatures.pop();\\n            } else {\\n                operators.value[_operatorIndex].publicKeys[_indexes[i]] = operators.value[_operatorIndex].publicKeys[\\n                    operators.value[_operatorIndex].publicKeys.length - 1\\n                ];\\n                operators.value[_operatorIndex].publicKeys.pop();\\n                operators.value[_operatorIndex].signatures[_indexes[i]] = operators.value[_operatorIndex].signatures[\\n                    operators.value[_operatorIndex].signatures.length - 1\\n                ];\\n                operators.value[_operatorIndex].signatures.pop();\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        _updateAvailableValidatorCount(_operatorIndex);\\n    }\\n\\n    /// @notice Withdraw the Execution Layer Fee for a given validator public key\\n    /// @dev Funds are sent to the withdrawer account\\n    /// @dev This method is public on purpose\\n    /// @param _publicKey Validator to withdraw Execution Layer Fees from\\n    function withdrawELFee(bytes calldata _publicKey) external {\\n        _deployAndWithdrawELFee(_publicKey);\\n    }\\n\\n    /// @notice Withdraw the Consensus Layer Fee for a given validator public key\\n    /// @dev Funds are sent to the withdrawer account\\n    /// @dev This method is public on purpose\\n    /// @param _publicKey Validator to withdraw Consensus Layer Fees from\\n    function withdrawCLFee(bytes calldata _publicKey) external {\\n        _deployAndWithdrawCLFee(_publicKey);\\n    }\\n\\n    /// @notice Withdraw both Consensus and Execution Layer Fee for a given validator public key\\n    /// @dev Reverts if any is null\\n    /// @param _publicKey Validator to withdraw Execution and Consensus Layer Fees from\\n    function withdraw(bytes calldata _publicKey) external {\\n        _deployAndWithdrawELFee(_publicKey);\\n        _deployAndWithdrawCLFee(_publicKey);\\n    }\\n\\n    /// \\u2588\\u2588 \\u2588\\u2588\\u2588    \\u2588\\u2588 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588  \\u2588\\u2588\\u2588    \\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588  \\u2588\\u2588\\n    /// \\u2588\\u2588 \\u2588\\u2588\\u2588\\u2588   \\u2588\\u2588    \\u2588\\u2588    \\u2588\\u2588      \\u2588\\u2588   \\u2588\\u2588 \\u2588\\u2588\\u2588\\u2588   \\u2588\\u2588 \\u2588\\u2588   \\u2588\\u2588 \\u2588\\u2588\\n    /// \\u2588\\u2588 \\u2588\\u2588 \\u2588\\u2588  \\u2588\\u2588    \\u2588\\u2588    \\u2588\\u2588\\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588  \\u2588\\u2588 \\u2588\\u2588  \\u2588\\u2588 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588 \\u2588\\u2588\\n    /// \\u2588\\u2588 \\u2588\\u2588  \\u2588\\u2588 \\u2588\\u2588    \\u2588\\u2588    \\u2588\\u2588      \\u2588\\u2588   \\u2588\\u2588 \\u2588\\u2588  \\u2588\\u2588 \\u2588\\u2588 \\u2588\\u2588   \\u2588\\u2588 \\u2588\\u2588\\n    /// \\u2588\\u2588 \\u2588\\u2588   \\u2588\\u2588\\u2588\\u2588    \\u2588\\u2588    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588 \\u2588\\u2588   \\u2588\\u2588 \\u2588\\u2588   \\u2588\\u2588\\u2588\\u2588 \\u2588\\u2588   \\u2588\\u2588 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n\\n    function _getPubKeyRoot(bytes memory _publicKey) internal pure returns (bytes32) {\\n        return sha256(BytesLib.pad64(_publicKey));\\n    }\\n\\n    function _getWithdrawer(bytes32 _publicKeyRoot) internal view returns (address) {\\n        return StakingContractStorageLib.getWithdrawers().value[_publicKeyRoot];\\n    }\\n\\n    function _updateAvailableValidatorCount(uint256 _operatorIndex) internal {\\n        StakingContractStorageLib.ValidatorsFundingInfo memory operatorInfo = StakingContractStorageLib\\n            .getValidatorsFundingInfo(_operatorIndex);\\n        StakingContractStorageLib.OperatorsSlot storage operators = StakingContractStorageLib.getOperators();\\n\\n        uint32 oldAvailableCount = operatorInfo.availableKeys;\\n        uint32 newAvailableCount = 0;\\n        uint256 cap = _min(operators.value[_operatorIndex].limit, operators.value[_operatorIndex].publicKeys.length);\\n\\n        if (cap <= operatorInfo.funded) {\\n            StakingContractStorageLib.setOperatorInfo(_operatorIndex, 0, operatorInfo.funded);\\n        } else {\\n            newAvailableCount = uint32(cap - operatorInfo.funded);\\n            StakingContractStorageLib.setOperatorInfo(\\n                _operatorIndex,\\n                uint32(cap - operatorInfo.funded),\\n                operatorInfo.funded\\n            );\\n        }\\n\\n        if (oldAvailableCount != newAvailableCount) {\\n            if (oldAvailableCount > newAvailableCount) {\\n                StakingContractStorageLib.setTotalAvailableValidators(\\n                    StakingContractStorageLib.getTotalAvailableValidators() - (oldAvailableCount - newAvailableCount)\\n                );\\n            } else {\\n                StakingContractStorageLib.setTotalAvailableValidators(\\n                    StakingContractStorageLib.getTotalAvailableValidators() + (newAvailableCount - oldAvailableCount)\\n                );\\n            }\\n        }\\n    }\\n\\n    function _addressToWithdrawalCredentials(address _recipient) internal pure returns (bytes32) {\\n        return\\n            bytes32(uint256(uint160(_recipient)) + 0x0100000000000000000000000000000000000000000000000000000000000000);\\n    }\\n\\n    function _depositValidatorsOfOperator(\\n        uint256 _operatorIndex,\\n        uint256 _validatorCount,\\n        address _withdrawer\\n    ) internal {\\n        StakingContractStorageLib.OperatorsSlot storage operators = StakingContractStorageLib.getOperators();\\n        StakingContractStorageLib.OperatorInfo storage operator = operators.value[_operatorIndex];\\n        StakingContractStorageLib.ValidatorsFundingInfo memory osi = StakingContractStorageLib.getValidatorsFundingInfo(\\n            _operatorIndex\\n        );\\n\\n        for (uint256 i = osi.funded; i < osi.funded + _validatorCount; ) {\\n            bytes memory publicKey = operator.publicKeys[i];\\n            bytes memory signature = operator.signatures[i];\\n            address consensusLayerRecipient = _getDeterministicCLFeeRecipientAddress(publicKey);\\n            bytes32 withdrawalCredentials = _addressToWithdrawalCredentials(consensusLayerRecipient);\\n            _depositValidator(publicKey, signature, withdrawalCredentials);\\n            bytes32 pubkeyRoot = _getPubKeyRoot(publicKey);\\n            StakingContractStorageLib.getWithdrawers().value[pubkeyRoot] = _withdrawer;\\n            emit Deposit(msg.sender, _withdrawer, publicKey, pubkeyRoot);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        StakingContractStorageLib.setOperatorInfo(\\n            _operatorIndex,\\n            uint32(osi.availableKeys - _validatorCount),\\n            uint32(osi.funded + _validatorCount)\\n        );\\n    }\\n\\n    /// @notice Internal utility to deposit a public key, its signature and 32 ETH to the consensus layer\\n    /// @param _publicKey The Public Key to deposit\\n    /// @param _signature The Signature to deposit\\n    /// @param _withdrawalCredentials The Withdrawal Credentials to deposit\\n    function _depositValidator(\\n        bytes memory _publicKey,\\n        bytes memory _signature,\\n        bytes32 _withdrawalCredentials\\n    ) internal {\\n        bytes32 pubkeyRoot = _getPubKeyRoot(_publicKey);\\n        bytes32 signatureRoot = sha256(\\n            abi.encodePacked(\\n                sha256(BytesLib.slice(_signature, 0, 64)),\\n                sha256(BytesLib.pad64(BytesLib.slice(_signature, 64, SIGNATURE_LENGTH - 64)))\\n            )\\n        );\\n\\n        uint256 depositAmount = DEPOSIT_SIZE / 1000000000 wei;\\n        assert(depositAmount * 1000000000 wei == DEPOSIT_SIZE);\\n\\n        bytes32 depositDataRoot = sha256(\\n            abi.encodePacked(\\n                sha256(abi.encodePacked(pubkeyRoot, _withdrawalCredentials)),\\n                sha256(abi.encodePacked(Uint256Lib.toLittleEndian64(depositAmount), signatureRoot))\\n            )\\n        );\\n\\n        uint256 targetBalance = address(this).balance - DEPOSIT_SIZE;\\n\\n        IDepositContract(StakingContractStorageLib.getDepositContract()).deposit{value: DEPOSIT_SIZE}(\\n            _publicKey,\\n            abi.encodePacked(_withdrawalCredentials),\\n            _signature,\\n            depositDataRoot\\n        );\\n\\n        if (address(this).balance != targetBalance) {\\n            revert DepositFailure();\\n        }\\n    }\\n\\n    function _depositOnOneOperator(\\n        address _withdrawer,\\n        uint256 _depositCount,\\n        uint256 _totalAvailableValidators\\n    ) internal {\\n        _depositValidatorsOfOperator(0, _depositCount, _withdrawer);\\n        StakingContractStorageLib.setTotalAvailableValidators(_totalAvailableValidators - _depositCount);\\n    }\\n\\n    function _depositOnTwoOperators(\\n        address _withdrawer,\\n        uint256 _depositCount,\\n        uint256 _totalAvailableValidators\\n    ) internal {\\n        StakingContractStorageLib.ValidatorsFundingInfo memory oneOsi = StakingContractStorageLib\\n            .getValidatorsFundingInfo(0);\\n        StakingContractStorageLib.ValidatorsFundingInfo memory twoOsi = StakingContractStorageLib\\n            .getValidatorsFundingInfo(1);\\n\\n        uint256 oneDepositCount;\\n        uint256 twoDepositCount;\\n\\n        // using this tactic to prevent deposits of 1 validator to always go to operator 2\\n        if (block.number % 2 == 0) {\\n            oneDepositCount = _depositCount / 2;\\n            twoDepositCount = _depositCount - oneDepositCount;\\n        } else {\\n            twoDepositCount = _depositCount / 2;\\n            oneDepositCount = _depositCount - twoDepositCount;\\n        }\\n\\n        if (oneDepositCount > oneOsi.availableKeys) {\\n            twoDepositCount = _depositCount - oneOsi.availableKeys;\\n            oneDepositCount = oneOsi.availableKeys;\\n        } else if (twoDepositCount > twoOsi.availableKeys) {\\n            oneDepositCount = _depositCount - twoOsi.availableKeys;\\n            twoDepositCount = twoOsi.availableKeys;\\n        }\\n\\n        if (oneDepositCount > 0) {\\n            _depositValidatorsOfOperator(0, oneDepositCount, _withdrawer);\\n        }\\n        if (twoDepositCount > 0) {\\n            _depositValidatorsOfOperator(1, twoDepositCount, _withdrawer);\\n        }\\n        StakingContractStorageLib.setTotalAvailableValidators(\\n            _totalAvailableValidators - (oneDepositCount + twoDepositCount)\\n        );\\n    }\\n\\n    function _getBaseSkip(\\n        bytes32 blockHash,\\n        uint256 index,\\n        uint8 prime\\n    ) internal pure returns (uint8 base, uint8 skip) {\\n        base = uint8(blockHash[(index * 2) % 32]) % prime;\\n        skip = (uint8(blockHash[((index * 2) + 1) % 32]) % (prime - 1)) + 1;\\n    }\\n\\n    function _getOperatorFundedCount(uint8 operatorIndex, ValidatorAllocationCache[] memory vd)\\n        internal\\n        view\\n        returns (uint32)\\n    {\\n        if (operatorIndex >= vd.length) {\\n            return 0;\\n        }\\n        if (vd[operatorIndex].used == false) {\\n            StakingContractStorageLib.ValidatorsFundingInfo memory osi = StakingContractStorageLib\\n                .getValidatorsFundingInfo(operatorIndex);\\n            vd[operatorIndex].used = true;\\n            vd[operatorIndex].funded = osi.funded;\\n            vd[operatorIndex].available = osi.availableKeys;\\n        }\\n        return vd[operatorIndex].funded + vd[operatorIndex].toDeposit;\\n    }\\n\\n    function _getOperatorAvailableCount(uint8 operatorIndex, ValidatorAllocationCache[] memory vd)\\n        internal\\n        view\\n        returns (uint32)\\n    {\\n        if (operatorIndex >= vd.length) {\\n            return 0;\\n        }\\n        if (vd[operatorIndex].used == false) {\\n            StakingContractStorageLib.ValidatorsFundingInfo memory osi = StakingContractStorageLib\\n                .getValidatorsFundingInfo(operatorIndex);\\n            vd[operatorIndex].used = true;\\n            vd[operatorIndex].funded = osi.funded;\\n            vd[operatorIndex].available = osi.availableKeys;\\n        }\\n        return vd[operatorIndex].available - vd[operatorIndex].toDeposit;\\n    }\\n\\n    function _assignTemporaryDeposit(uint8 operatorIndex, ValidatorAllocationCache[] memory vd) internal pure {\\n        vd[operatorIndex].toDeposit += 1;\\n    }\\n\\n    function _getBestOperator(\\n        uint8 alphaIndex,\\n        uint8 betaIndex,\\n        bytes32 blockHash,\\n        ValidatorAllocationCache[] memory vd\\n    ) internal view returns (uint8) {\\n        uint256 alphaFundedCount = _getOperatorFundedCount(alphaIndex, vd);\\n        uint256 betaFundedCount = _getOperatorFundedCount(betaIndex, vd);\\n        if (alphaFundedCount < betaFundedCount) {\\n            return alphaIndex;\\n        } else if (alphaFundedCount > betaFundedCount) {\\n            return betaIndex;\\n        } else {\\n            bool coinToss = (uint8(blockHash[(alphaIndex + betaIndex) % 32]) % 2) == 1;\\n            if (coinToss == false) {\\n                return betaIndex;\\n            } else {\\n                return alphaIndex;\\n            }\\n        }\\n    }\\n\\n    function _getElligibleOperators(\\n        uint8 base,\\n        uint8 skip,\\n        uint8 prime,\\n        ValidatorAllocationCache[] memory vd\\n    ) internal view returns (uint8, uint8) {\\n        int16 alphaIndex = -1;\\n        int16 betaIndex = -1;\\n        uint8 index = base;\\n        while (alphaIndex == -1 || betaIndex == -1) {\\n            if (_getOperatorAvailableCount(index, vd) > 0) {\\n                if (alphaIndex == -1) {\\n                    alphaIndex = int8(index);\\n                } else {\\n                    betaIndex = int8(index);\\n                }\\n            }\\n            index = (index + skip) % prime;\\n            if (index == base && betaIndex == -1) {\\n                betaIndex = alphaIndex;\\n            }\\n        }\\n        return (uint8(int8(alphaIndex)), uint8(int8(betaIndex)));\\n    }\\n\\n    function _depositOnThreeOrMoreOperators(\\n        address _withdrawer,\\n        uint256 _depositCount,\\n        uint256 _totalAvailableValidators,\\n        StakingContractStorageLib.OperatorsSlot storage _operators\\n    ) internal {\\n        uint256 operatorCount = _operators.value.length;\\n        uint8 optimusPrime = _getClosestPrimeAbove(uint8(operatorCount));\\n        bytes32 blockHash = blockhash(block.number); // weak random number as it's not a security issue\\n\\n        ValidatorAllocationCache[] memory vd = new ValidatorAllocationCache[](operatorCount);\\n\\n        for (uint256 index; index < _depositCount; ) {\\n            // Retrieve base index and skip value based on block hash and current loop index\\n            (uint8 base, uint8 skip) = _getBaseSkip(blockHash, index, optimusPrime);\\n            // Retrieve two operator indexes pointing to two (or the same) operator(s) that have at least one available\\n            // validator key to be used for a deposit. This method takes into account possible pending deposits from\\n            // previous loop rounds.\\n            (uint8 alphaIndex, uint8 betaIndex) = _getElligibleOperators(base, skip, optimusPrime, vd);\\n\\n            if (alphaIndex == betaIndex) {\\n                // Assign the deposit to the only operator having available keys\\n                _assignTemporaryDeposit(alphaIndex, vd);\\n            } else {\\n                // Assign the deposit to the operator having the lowest amount of funded keys\\n                _assignTemporaryDeposit(_getBestOperator(alphaIndex, betaIndex, blockHash, vd), vd);\\n            }\\n\\n            unchecked {\\n                ++index;\\n            }\\n        }\\n\\n        // Loop through the cached operator values and deposit any pending deposits\\n        for (uint256 index; index < vd.length; ) {\\n            if (vd[index].toDeposit > 0) {\\n                _depositValidatorsOfOperator(index, vd[index].toDeposit, _withdrawer);\\n            }\\n            unchecked {\\n                ++index;\\n            }\\n        }\\n\\n        StakingContractStorageLib.setTotalAvailableValidators(_totalAvailableValidators - _depositCount);\\n    }\\n\\n    function _deposit(address _withdrawer) internal {\\n        if (msg.value == 0 || msg.value % DEPOSIT_SIZE != 0) {\\n            revert InvalidMessageValue();\\n        }\\n        uint256 totalAvailableValidators = StakingContractStorageLib.getTotalAvailableValidators();\\n        uint256 depositCount = msg.value / DEPOSIT_SIZE;\\n        if (depositCount > totalAvailableValidators) {\\n            revert NotEnoughValidators();\\n        }\\n        StakingContractStorageLib.OperatorsSlot storage operators = StakingContractStorageLib.getOperators();\\n        if (operators.value.length == 0) {\\n            revert NoOperators();\\n        } else if (operators.value.length == 1) {\\n            _depositOnOneOperator(_withdrawer, depositCount, totalAvailableValidators);\\n        } else if (operators.value.length == 2) {\\n            _depositOnTwoOperators(_withdrawer, depositCount, totalAvailableValidators);\\n        } else {\\n            _depositOnThreeOrMoreOperators(_withdrawer, depositCount, totalAvailableValidators, operators);\\n        }\\n    }\\n\\n    function _primes() internal pure returns (uint8[54] memory primes) {\\n        primes = [\\n            2,\\n            3,\\n            5,\\n            7,\\n            11,\\n            13,\\n            17,\\n            19,\\n            23,\\n            29,\\n            31,\\n            37,\\n            41,\\n            43,\\n            47,\\n            53,\\n            59,\\n            61,\\n            67,\\n            71,\\n            73,\\n            79,\\n            83,\\n            89,\\n            97,\\n            101,\\n            103,\\n            107,\\n            109,\\n            113,\\n            127,\\n            131,\\n            137,\\n            139,\\n            149,\\n            151,\\n            157,\\n            163,\\n            167,\\n            173,\\n            179,\\n            181,\\n            191,\\n            193,\\n            197,\\n            199,\\n            211,\\n            223,\\n            227,\\n            229,\\n            233,\\n            239,\\n            241,\\n            251\\n        ];\\n    }\\n\\n    function _getClosestPrimeAbove(uint8 _count) internal pure returns (uint8) {\\n        uint8[54] memory primes = _primes();\\n        for (uint256 i; i < primes.length; ) {\\n            if (primes[i] >= _count) {\\n                return primes[i];\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        revert InvalidValidatorCount();\\n    }\\n\\n    function _min(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        if (_a < _b) {\\n            return _a;\\n        }\\n        return _b;\\n    }\\n\\n    /// @notice Computes the execution layer fee recipient for the given validator public key\\n    /// @param _publicKey The public key linked to the recipient\\n    function _getDeterministicELFeeRecipientAddress(bytes memory _publicKey) internal view returns (address) {\\n        bytes32 publicKeyRoot = _getPubKeyRoot(_publicKey);\\n        bytes32 feeRecipientSalt = sha256(abi.encodePacked(EXECUTION_LAYER_SALT_PREFIX, publicKeyRoot));\\n        address implementation = StakingContractStorageLib.getELFeeRecipientImplementation();\\n        return Clones.predictDeterministicAddress(implementation, feeRecipientSalt);\\n    }\\n\\n    /// @notice Computes the consensus layer fee recipient for the given validator public key\\n    /// @param _publicKey The public key linked to the recipient\\n    function _getDeterministicCLFeeRecipientAddress(bytes memory _publicKey) internal view returns (address) {\\n        bytes32 publicKeyRoot = _getPubKeyRoot(_publicKey);\\n        bytes32 feeRecipientSalt = sha256(abi.encodePacked(CONSENSUS_LAYER_SALT_PREFIX, publicKeyRoot));\\n        address implementation = StakingContractStorageLib.getCLFeeRecipientImplementation();\\n        return Clones.predictDeterministicAddress(implementation, feeRecipientSalt);\\n    }\\n\\n    /// @notice Computes the execution layer fee recipient for the given validator public key, checks if a\\n    ///         contract exists at given address, creates a minimal Clone if not and then performs withdrawal\\n    /// @param _publicKey The public key linked to the recipient\\n    function _deployAndWithdrawELFee(bytes calldata _publicKey) internal {\\n        bytes32 publicKeyRoot = _getPubKeyRoot(_publicKey);\\n        bytes32 feeRecipientSalt = sha256(abi.encodePacked(EXECUTION_LAYER_SALT_PREFIX, publicKeyRoot));\\n        address implementation = StakingContractStorageLib.getELFeeRecipientImplementation();\\n        address feeRecipientAddress = Clones.predictDeterministicAddress(implementation, feeRecipientSalt);\\n        if (feeRecipientAddress.code.length == 0) {\\n            Clones.cloneDeterministic(implementation, feeRecipientSalt);\\n            IELFeeRecipient(feeRecipientAddress).initELFR(address(this), publicKeyRoot);\\n        }\\n        IELFeeRecipient(feeRecipientAddress).withdraw();\\n    }\\n\\n    /// @notice Computes the consensus layer fee recipient for the given validator public key, checks if a\\n    ///         contract exists at given address, creates a minimal Clone if not and then performs withdrawal\\n    /// @param _publicKey The public key linked to the recipient\\n    function _deployAndWithdrawCLFee(bytes calldata _publicKey) internal {\\n        bytes32 publicKeyRoot = _getPubKeyRoot(_publicKey);\\n        bytes32 feeRecipientSalt = sha256(abi.encodePacked(CONSENSUS_LAYER_SALT_PREFIX, publicKeyRoot));\\n        address implementation = StakingContractStorageLib.getCLFeeRecipientImplementation();\\n        address feeRecipientAddress = Clones.predictDeterministicAddress(implementation, feeRecipientSalt);\\n        if (feeRecipientAddress.code.length == 0) {\\n            Clones.cloneDeterministic(implementation, feeRecipientSalt);\\n            ICLFeeRecipient(feeRecipientAddress).initCLFR(address(this), publicKeyRoot);\\n        }\\n        ICLFeeRecipient(feeRecipientAddress).withdraw();\\n    }\\n}\\n\",\"keccak256\":\"0xe992f0b857b92eda642db024dc3cde81b0d0907da5d3134d8fb2382865bf67db\",\"license\":\"BUSL-1.1\"},\"src/contracts/interfaces/IDepositContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10;\\n\\ninterface IDepositContract {\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawalCredentials,\\n        bytes calldata signature,\\n        bytes32 depositDataRoot\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x10ced526f2842c879ff63bf37a47d121d56898609456f98df1f3cff0a768b2c9\",\"license\":\"MIT\"},\"src/contracts/interfaces/IFeeRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10;\\n\\ninterface IELFeeRecipient {\\n    function initELFR(address _stakingContract, bytes32 _publicKeyRoot) external;\\n\\n    function withdraw() external;\\n}\\n\\ninterface ICLFeeRecipient {\\n    function initCLFR(address _stakingContract, bytes32 _publicKeyRoot) external;\\n\\n    function withdraw() external;\\n}\\n\",\"keccak256\":\"0xb1b6719d865184b524ea9851ba28f6bae2c12f0c86037aa1f6b841c946faf98e\",\"license\":\"MIT\"},\"src/contracts/libs/BytesLib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10;\\n\\nlibrary BytesLib {\\n    function pad64(bytes memory _b) internal pure returns (bytes memory) {\\n        assert(_b.length >= 32 && _b.length <= 64);\\n        if (64 == _b.length) return _b;\\n\\n        bytes memory zero32 = new bytes(32);\\n        assembly {\\n            mstore(add(zero32, 0x20), 0)\\n        }\\n\\n        if (32 == _b.length) return BytesLib.concat(_b, zero32);\\n        else return BytesLib.concat(_b, BytesLib.slice(zero32, 0, uint256(64) - _b.length));\\n    }\\n\\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(\\n                0x40,\\n                and(\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                    not(31) // Round down to the nearest 32 bytes.\\n                )\\n            )\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n}\\n\",\"keccak256\":\"0xec149de15f8150999a1881930747f7bc75138b84123e0547d1b4074ef0aef5cd\",\"license\":\"MIT\"},\"src/contracts/libs/StakingContractStorageLib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10;\\n\\nlibrary StakingContractStorageLib {\\n    function getUint256(bytes32 position) internal view returns (uint256 data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function setUint256(bytes32 position, uint256 data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function getAddress(bytes32 position) internal view returns (address data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function setAddress(bytes32 position, address data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function getBytes32(bytes32 position) internal view returns (bytes32 data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function setBytes32(bytes32 position, bytes32 data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    /* ========================================\\n    ===========================================\\n    =========================================*/\\n\\n    bytes32 internal constant VERSION_SLOT = keccak256(\\\"StakingContract.version\\\");\\n\\n    function getVersion() internal view returns (uint256) {\\n        return getUint256(VERSION_SLOT);\\n    }\\n\\n    function setVersion(uint256 _newVersion) internal {\\n        setUint256(VERSION_SLOT, _newVersion);\\n    }\\n\\n    /* ========================================\\n    ===========================================\\n    =========================================*/\\n\\n    bytes32 internal constant ADMIN_SLOT = keccak256(\\\"StakingContract.admin\\\");\\n\\n    function getAdmin() internal view returns (address) {\\n        return getAddress(ADMIN_SLOT);\\n    }\\n\\n    function setAdmin(address _newAdmin) internal {\\n        setAddress(ADMIN_SLOT, _newAdmin);\\n    }\\n\\n    /* ========================================\\n    ===========================================\\n    =========================================*/\\n\\n    bytes32 internal constant DEPOSIT_CONTRACT_SLOT = keccak256(\\\"StakingContract.depositContract\\\");\\n\\n    function getDepositContract() internal view returns (address) {\\n        return getAddress(DEPOSIT_CONTRACT_SLOT);\\n    }\\n\\n    function setDepositContract(address _newAdmin) internal {\\n        setAddress(DEPOSIT_CONTRACT_SLOT, _newAdmin);\\n    }\\n\\n    /* ========================================\\n    ===========================================\\n    =========================================*/\\n\\n    bytes32 internal constant OPERATORS_SLOT = keccak256(\\\"StakingContract.operators\\\");\\n\\n    struct OperatorInfo {\\n        address operator;\\n        uint256 limit;\\n        bytes[] publicKeys;\\n        bytes[] signatures;\\n    }\\n\\n    struct OperatorsSlot {\\n        OperatorInfo[] value;\\n    }\\n\\n    function getOperators() internal pure returns (OperatorsSlot storage p) {\\n        bytes32 slot = OPERATORS_SLOT;\\n        assembly {\\n            p.slot := slot\\n        }\\n    }\\n\\n    /* ========================================\\n    ===========================================\\n    =========================================*/\\n\\n    bytes32 internal constant VALIDATORS_FUNDING_INFO_SLOT = keccak256(\\\"StakingContract.validatorsFundingInfo\\\");\\n\\n    struct ValidatorsFundingInfo {\\n        uint32 availableKeys;\\n        uint32 funded;\\n    }\\n\\n    struct UintToUintMappingSlot {\\n        mapping(uint256 => uint256) value;\\n    }\\n\\n    function getValidatorsFundingInfo(uint256 _index) internal view returns (ValidatorsFundingInfo memory vfi) {\\n        UintToUintMappingSlot storage p;\\n        bytes32 slot = VALIDATORS_FUNDING_INFO_SLOT;\\n\\n        assembly {\\n            p.slot := slot\\n        }\\n\\n        uint256 slotIndex = _index / 4;\\n        uint256 innerIndex = _index % 4;\\n\\n        uint256 slotValue = p.value[slotIndex];\\n\\n        vfi.availableKeys = uint32(slotValue >> ((innerIndex * 8) * 8));\\n        vfi.funded = uint32(slotValue >> (((innerIndex * 8) + 4) * 8));\\n    }\\n\\n    function setOperatorInfo(\\n        uint256 _index,\\n        uint32 _availableKeys,\\n        uint32 _funded\\n    ) internal {\\n        UintToUintMappingSlot storage p;\\n        bytes32 slot = VALIDATORS_FUNDING_INFO_SLOT;\\n\\n        assembly {\\n            p.slot := slot\\n        }\\n\\n        uint256 slotIndex = _index / 4;\\n        uint256 innerIndex = _index % 4;\\n\\n        p.value[slotIndex] &= (type(uint256).max - (0xFFFFFFFFFFFFFFFF << ((innerIndex * 8) * 8)));\\n        p.value[slotIndex] +=\\n            (uint256(_availableKeys) << ((innerIndex * 8) * 8)) +\\n            (uint256(_funded) << (((innerIndex * 8) + 4) * 8));\\n    }\\n\\n    /* ========================================\\n    ===========================================\\n    =========================================*/\\n\\n    bytes32 internal constant TOTAL_AVAILABLE_VALIDATORS_SLOT = keccak256(\\\"StakingContract.totalAvailableValidators\\\");\\n\\n    function getTotalAvailableValidators() internal view returns (uint256) {\\n        return getUint256(TOTAL_AVAILABLE_VALIDATORS_SLOT);\\n    }\\n\\n    function setTotalAvailableValidators(uint256 _newTotal) internal {\\n        setUint256(TOTAL_AVAILABLE_VALIDATORS_SLOT, _newTotal);\\n    }\\n\\n    /* ========================================\\n    ===========================================\\n    =========================================*/\\n\\n    bytes32 internal constant WITHDRAWERS_SLOT = keccak256(\\\"StakingContract.withdrawers\\\");\\n\\n    struct WithdrawersSlot {\\n        mapping(bytes32 => address) value;\\n    }\\n\\n    function getWithdrawers() internal pure returns (WithdrawersSlot storage p) {\\n        bytes32 slot = WITHDRAWERS_SLOT;\\n        assembly {\\n            p.slot := slot\\n        }\\n    }\\n\\n    struct OperatorIndexPerValidatorSlot {\\n        mapping(bytes32 => uint256) value;\\n    }\\n\\n    /* ========================================\\n    ===========================================\\n    =========================================*/\\n\\n    bytes32 internal constant OPERATOR_INDEX_PER_VALIDATOR_SLOT =\\n        keccak256(\\\"StakingContract.operatorIndexPerValidator\\\");\\n\\n    function getOperatorIndexPerValidator() internal pure returns (OperatorIndexPerValidatorSlot storage p) {\\n        bytes32 slot = OPERATOR_INDEX_PER_VALIDATOR_SLOT;\\n        assembly {\\n            p.slot := slot\\n        }\\n    }\\n\\n    /* ========================================\\n    ===========================================\\n    =========================================*/\\n\\n    bytes32 internal constant EL_FEE_SLOT = keccak256(\\\"StakingContract.executionLayerFee\\\");\\n\\n    function getELFee() internal view returns (uint256) {\\n        return getUint256(EL_FEE_SLOT);\\n    }\\n\\n    function setELFee(uint256 _newElFee) internal {\\n        setUint256(EL_FEE_SLOT, _newElFee);\\n    }\\n\\n    /* ========================================\\n    ===========================================\\n    =========================================*/\\n\\n    bytes32 internal constant CL_FEE_SLOT = keccak256(\\\"StakingContract.consensusLayerFee\\\");\\n\\n    function getCLFee() internal view returns (uint256) {\\n        return getUint256(CL_FEE_SLOT);\\n    }\\n\\n    function setCLFee(uint256 _newClFee) internal {\\n        setUint256(CL_FEE_SLOT, _newClFee);\\n    }\\n\\n    /* ========================================\\n    ===========================================\\n    =========================================*/\\n\\n    bytes32 internal constant EL_FEE_RECIPIENT_IMPLEMENTATION_SLOT =\\n        keccak256(\\\"StakingContract.executionLayerFeeRecipientImplementation\\\");\\n\\n    function getELFeeRecipientImplementation() internal view returns (address) {\\n        return getAddress(EL_FEE_RECIPIENT_IMPLEMENTATION_SLOT);\\n    }\\n\\n    function setELFeeRecipientImplementation(address _newElFeeRecipientImplementation) internal {\\n        setAddress(EL_FEE_RECIPIENT_IMPLEMENTATION_SLOT, _newElFeeRecipientImplementation);\\n    }\\n\\n    /* ========================================\\n    ===========================================\\n    =========================================*/\\n\\n    bytes32 internal constant CL_FEE_RECIPIENT_IMPLEMENTATION_SLOT =\\n        keccak256(\\\"StakingContract.consensusLayerFeeRecipientImplementation\\\");\\n\\n    function getCLFeeRecipientImplementation() internal view returns (address) {\\n        return getAddress(CL_FEE_RECIPIENT_IMPLEMENTATION_SLOT);\\n    }\\n\\n    function setCLFeeRecipientImplementation(address _newClFeeRecipientImplementation) internal {\\n        setAddress(CL_FEE_RECIPIENT_IMPLEMENTATION_SLOT, _newClFeeRecipientImplementation);\\n    }\\n}\\n\",\"keccak256\":\"0x90c53064a4b09e3640cf51c74f26b1b6377968f56b0a6217f95cc798e9065595\",\"license\":\"MIT\"},\"src/contracts/libs/UintLib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10;\\n\\nlibrary Uint256Lib {\\n    function toLittleEndian64(uint256 _value) internal pure returns (uint256 result) {\\n        result = 0;\\n        uint256 temp_value = _value;\\n        for (uint256 i = 0; i < 8; ++i) {\\n            result = (result << 8) | (temp_value & 0xFF);\\n            temp_value >>= 8;\\n        }\\n\\n        assert(0 == temp_value); // fully converted\\n        result <<= (24 * 8);\\n    }\\n}\\n\",\"keccak256\":\"0x452fa01e7c7dbf60df6d9d12f79645183d66f5a8ca3d673742eb4960a1952b73\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615195806100206000396000f3fe6080604052600436106101a05760003560e01c806374d099e6116100ec578063bf509bd41161008a578063d6d9c99a11610064578063d6d9c99a14610632578063e00cb6ca1461065b578063e99454f514610698578063f340fa01146106c1576101b0565b8063bf509bd41461058f578063d243d69d146105b8578063d602d796146105f5576101b0565b8063a7400801116100c6578063a7400801146104d3578063b4336b8414610510578063b747e7dd1461053b578063bf15af5614610564576101b0565b806374d099e6146104425780637c4c92381461046b5780639870d7fe14610496576101b0565b806336bf33251161015957806363b4118f1161013357806363b4118f146103855780636e9960c3146103c5578063704b6c02146103f0578063714b55b214610419576101b0565b806336bf332514610304578063540bc5ea1461032f5780635b18d5791461035a576101b0565b806305f63c8a146101e25780630968f264146102235780631864636c1461024c5780631ee13343146102755780631f078d86146102b25780632ba03a79146102db576101b0565b366101b0576101ae336106dd565b005b6040517fae962d4e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3480156101ee57600080fd5b50610209600480360381019061020491906143ca565b610836565b60405161021a959493929190614447565b60405180910390f35b34801561022f57600080fd5b5061024a600480360381019061024591906144ff565b61093c565b005b34801561025857600080fd5b50610273600480360381019061026e91906145a2565b610954565b005b34801561028157600080fd5b5061029c600480360381019061029791906144ff565b610ef5565b6040516102a99190614602565b60405180910390f35b3480156102be57600080fd5b506102d960048036038101906102d491906143ca565b610f4c565b005b3480156102e757600080fd5b5061030260048036038101906102fd91906144ff565b611000565b005b34801561031057600080fd5b5061031961100e565b604051610326919061461d565b60405180910390f35b34801561033b57600080fd5b5061034461101b565b604051610351919061461d565b60405180910390f35b34801561036657600080fd5b5061036f611020565b60405161037c919061461d565b60405180910390f35b34801561039157600080fd5b506103ac60048036038101906103a79190614638565b61102f565b6040516103bc949392919061472c565b60405180910390f35b3480156103d157600080fd5b506103da611211565b6040516103e79190614602565b60405180910390f35b3480156103fc57600080fd5b50610417600480360381019061041291906147ab565b611220565b005b34801561042557600080fd5b50610440600480360381019061043b9190614638565b611298565b005b34801561044e57600080fd5b50610469600480360381019061046491906147d8565b61134a565b005b34801561047757600080fd5b506104806113df565b60405161048d919061461d565b60405180910390f35b3480156104a257600080fd5b506104bd60048036038101906104b891906147ab565b6113ee565b6040516104ca919061461d565b60405180910390f35b3480156104df57600080fd5b506104fa60048036038101906104f5919061489b565b611580565b6040516105079190614602565b60405180910390f35b34801561051c57600080fd5b50610525611592565b604051610532919061461d565b60405180910390f35b34801561054757600080fd5b50610562600480360381019061055d91906148c8565b6115a1565b005b34801561057057600080fd5b50610579611942565b604051610586919061461d565b60405180910390f35b34801561059b57600080fd5b506105b660048036038101906105b191906144ff565b611947565b005b3480156105c457600080fd5b506105df60048036038101906105da91906144ff565b611955565b6040516105ec9190614602565b60405180910390f35b34801561060157600080fd5b5061061c6004803603810190610617919061489b565b6119ac565b6040516106299190614602565b60405180910390f35b34801561063e57600080fd5b50610659600480360381019061065491906143ca565b611a20565b005b34801561066757600080fd5b50610682600480360381019061067d91906144ff565b611ad4565b60405161068f9190614602565b60405180910390f35b3480156106a457600080fd5b506106bf60048036038101906106ba919061496f565b611b33565b005b6106db60048036038101906106d691906147ab565b611cd4565b005b6000341480610701575060006801bc16d674ec800000346106fe91906149fe565b14155b15610738576040517fd5e6876b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610742611ce0565b905060006801bc16d674ec8000003461075b9190614a5e565b905081811115610797576040517fae575a8800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006107a1611d10565b905060008160000180549050036107e4576040517fddf9d24500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001816000018054905003610803576107fe848385611d3d565b610830565b60028160000180549050036108225761081d848385611d62565b61082f565b61082e84838584611e9e565b5b5b50505050565b600080600080600080610847611d10565b905080600001805490508710156109325760006108638861201a565b905081600001888154811061087b5761087a614a8f565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260000189815481106108c3576108c2614a8f565b5b906000526020600020906004020160010154836000018a815481106108eb576108ea614a8f565b5b906000526020600020906004020160020180549050809750819850829950505050806020015181600001518163ffffffff1691508063ffffffff1690508094508195505050505b5091939590929450565b6109468282612102565b61095082826122e3565b5050565b8261095d611d10565b600001818154811061097257610971614a8f565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a08576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008383905003610a45576040517fa9cb9e0d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610a508561201a565b90506000610a5c611d10565b905060005b85859050811015610ee357600081118015610aba57508585600183610a869190614abe565b818110610a9657610a95614a8f565b5b90506020020135868683818110610ab057610aaf614a8f565b5b9050602002013510155b15610af1576040517f35061dff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b826020015163ffffffff16868683818110610b0f57610b0e614a8f565b5b905060200201351015610b4e576040517f34947ea100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001826000018881548110610b6657610b65614a8f565b5b906000526020600020906004020160020180549050610b859190614abe565b868683818110610b9857610b97614a8f565b5b9050602002013503610c5357816000018781548110610bba57610bb9614a8f565b5b9060005260206000209060040201600201805480610bdb57610bda614af2565b5b600190038181906000526020600020016000610bf791906140c9565b9055816000018781548110610c0f57610c0e614a8f565b5b9060005260206000209060040201600301805480610c3057610c2f614af2565b5b600190038181906000526020600020016000610c4c91906140c9565b9055610ed8565b816000018781548110610c6957610c68614a8f565b5b90600052602060002090600402016002016001836000018981548110610c9257610c91614a8f565b5b906000526020600020906004020160020180549050610cb19190614abe565b81548110610cc257610cc1614a8f565b5b90600052602060002001826000018881548110610ce257610ce1614a8f565b5b9060005260206000209060040201600201878784818110610d0657610d05614a8f565b5b9050602002013581548110610d1e57610d1d614a8f565b5b90600052602060002001908054610d3490614b50565b610d3f929190614109565b50816000018781548110610d5657610d55614a8f565b5b9060005260206000209060040201600201805480610d7757610d76614af2565b5b600190038181906000526020600020016000610d9391906140c9565b9055816000018781548110610dab57610daa614a8f565b5b90600052602060002090600402016003016001836000018981548110610dd457610dd3614a8f565b5b906000526020600020906004020160030180549050610df39190614abe565b81548110610e0457610e03614a8f565b5b90600052602060002001826000018881548110610e2457610e23614a8f565b5b9060005260206000209060040201600301878784818110610e4857610e47614a8f565b5b9050602002013581548110610e6057610e5f614a8f565b5b90600052602060002001908054610e7690614b50565b610e81929190614109565b50816000018781548110610e9857610e97614a8f565b5b9060005260206000209060040201600301805480610eb957610eb8614af2565b5b600190038181906000526020600020016000610ed591906140c9565b90555b806001019050610a61565b50610eed866124c4565b505050505050565b6000610f4483838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612637565b905092915050565b610f546126db565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610fb8576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612710811115610ff4576040517f58d620b300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610ffd8161270b565b50565b61100a82826122e3565b5050565b6801bc16d674ec80000081565b606081565b600061102a612738565b905090565b606080600080600061103f611d10565b905080600001878154811061105757611056614a8f565b5b9060005260206000209060040201600201868154811061107a57611079614a8f565b5b90600052602060002001805461108f90614b50565b80601f01602080910402602001604051908101604052809291908181526020018280546110bb90614b50565b80156111085780601f106110dd57610100808354040283529160200191611108565b820191906000526020600020905b8154815290600101906020018083116110eb57829003601f168201915b5050505050945080600001878154811061112557611124614a8f565b5b9060005260206000209060040201600301868154811061114857611147614a8f565b5b90600052602060002001805461115d90614b50565b80601f016020809104026020016040519081016040528092919081815260200182805461118990614b50565b80156111d65780601f106111ab576101008083540402835291602001916111d6565b820191906000526020600020905b8154815290600101906020018083116111b957829003601f168201915b505050505093506111ee6111e986612768565b6127c9565b92506111f98761201a565b6020015163ffffffff16861091505092959194509250565b600061121b6126db565b905090565b6112286126db565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461128c576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6112958161280f565b50565b6112a06126db565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611304576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061130e611d10565b90508181600001848154811061132757611326614a8f565b5b906000526020600020906004020160010181905550611345836124c4565b505050565b60018061135561283c565b61135f9190614b81565b8114611397576040517f0dc149f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6113a08161286c565b6113a98761280f565b6113b286612899565b6113bb856128c6565b6113c4836128f3565b6113cd84612920565b6113d68261270b565b50505050505050565b60006113e961294d565b905090565b60006113f86126db565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461145c576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611466611d10565b9050611470614196565b83816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508160000181908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020190805190602001906115439291906141d4565b5060608201518160030190805190602001906115609291906141d4565b505050600182600001805490506115779190614abe565b92505050919050565b600061158b826127c9565b9050919050565b600061159c611ce0565b905090565b856115aa611d10565b60000181815481106115bf576115be614a8f565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611655576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000860361168f576040517fa9cb9e0d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006030868690506116a191906149fe565b1415806116bd5750856030868690506116ba9190614a5e565b14155b156116f4576040517f337d0f4100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060608484905061170691906149fe565b14158061172257508560608484905061171f9190614a5e565b14155b15611759576040517f274cf40100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611763611d10565b9050600061176f61297d565b905060005b8881101561192d5760006117da89898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506030846117d39190614bd7565b60306129aa565b9050600061183a88888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506060856118339190614bd7565b60606129aa565b9050846000018c8154811061185257611851614a8f565b5b90600052602060002090600402016002018290806001815401808255809150506001900390600052602060002001600090919091909150908051906020019061189c929190614234565b50846000018c815481106118b3576118b2614a8f565b5b9060005260206000209060040201600301819080600181540180825580915050600190039060005260206000200160009091909190915090805190602001906118fd929190614234565b508b84600001600061190e85612768565b8152602001908152602001600020819055508260010192505050611774565b50611937896124c4565b505050505050505050565b603081565b6119518282612102565b5050565b60006119a483838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612ac8565b905092915050565b60006119b6611d10565b6000016119c161297d565b600001600084815260200190815260200160002054815481106119e7576119e6614a8f565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b611a286126db565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611a8c576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612710811115611ac8576040517f58d620b300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611ad1816128f3565b50565b6000611b2b611b2684848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612768565b6127c9565b905092915050565b60006002611b8485858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612b6c565b604051611b919190614c6d565b602060405180830381855afa158015611bae573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611bd19190614c99565b90506000611bdd612c3f565b90503373ffffffffffffffffffffffffffffffffffffffff1681600001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611c79576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8281600001600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b611cdd816106dd565b50565b6000611d0b7f559ad51499ae00ca2e9d9d95aab46737c8904ab7da276613fefda282b2c2ac06612c6c565b905090565b6000807fd2a2f1f08ad325daf72af0169949ae210065d6916750ff03abd83510331b7b3990508091505090565b611d4960008385612c77565b611d5d8282611d589190614abe565b612f81565b505050565b6000611d6e600061201a565b90506000611d7c600161201a565b90506000806000600243611d9091906149fe565b03611db757600286611da29190614a5e565b91508186611db09190614abe565b9050611dd5565b600286611dc49190614a5e565b90508086611dd29190614abe565b91505b836000015163ffffffff16821115611e1157836000015163ffffffff1686611dfd9190614abe565b9050836000015163ffffffff169150611e4a565b826000015163ffffffff16811115611e4957826000015163ffffffff1686611e399190614abe565b9150826000015163ffffffff1690505b5b6000821115611e6057611e5f60008389612c77565b5b6000811115611e7657611e7560018289612c77565b5b611e958183611e859190614b81565b86611e909190614abe565b612f81565b50505050505050565b6000816000018054905090506000611eb582612fae565b905060004340905060008367ffffffffffffffff811115611ed957611ed8614cc6565b5b604051908082528060200260200182016040528015611f1257816020015b611eff6142ba565b815260200190600190039081611ef75790505b50905060005b87811015611f8657600080611f2e85848861304f565b91509150600080611f4184848a896130fb565b915091508060ff168260ff1603611f6157611f5c828761326b565b611f77565b611f76611f7083838a8a6132b4565b8761326b565b5b84600101945050505050611f18565b5060005b8151811015611ffb576000828281518110611fa857611fa7614a8f565b5b60200260200101516060015163ffffffff161115611ff057611fef81838381518110611fd757611fd6614a8f565b5b60200260200101516060015163ffffffff168b612c77565b5b806001019050611f8a565b50612010878761200b9190614abe565b612f81565b5050505050505050565b612022614300565b6000807f37e2c371bbf1c7a1326d52e30855e9c8b6cac15eda4475320e427b948813a9f09050809150600060048561205a9190614a5e565b9050600060048661206b91906149fe565b90506000846000016000848152602001908152602001600020549050600880836120959190614bd7565b61209f9190614bd7565b81901c866000019063ffffffff16908163ffffffff1681525050600860046008846120ca9190614bd7565b6120d49190614b81565b6120de9190614bd7565b81901c866020019063ffffffff16908163ffffffff16815250505050505050919050565b600061215183838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612768565b90506000600260008360405160200161216b929190614d37565b6040516020818303038152906040526040516121879190614c6d565b602060405180830381855afa1580156121a4573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906121c79190614c99565b905060006121d3613371565b905060006121e182846133a1565b905060008173ffffffffffffffffffffffffffffffffffffffff163b0361227b5761220c82846133b6565b508073ffffffffffffffffffffffffffffffffffffffff1663177a453430866040518363ffffffff1660e01b8152600401612248929190614d72565b600060405180830381600087803b15801561226257600080fd5b505af1158015612276573d6000803e3d6000fd5b505050505b8073ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156122c357600080fd5b505af11580156122d7573d6000803e3d6000fd5b50505050505050505050565b600061233283838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612768565b90506000600260018360405160200161234c929190614d37565b6040516020818303038152906040526040516123689190614c6d565b602060405180830381855afa158015612385573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906123a89190614c99565b905060006123b461348c565b905060006123c282846133a1565b905060008173ffffffffffffffffffffffffffffffffffffffff163b0361245c576123ed82846133b6565b508073ffffffffffffffffffffffffffffffffffffffff1663b9e1b44330866040518363ffffffff1660e01b8152600401612429929190614d72565b600060405180830381600087803b15801561244357600080fd5b505af1158015612457573d6000803e3d6000fd5b505050505b8073ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156124a457600080fd5b505af11580156124b8573d6000803e3d6000fd5b50505050505050505050565b60006124cf8261201a565b905060006124db611d10565b905060008260000151905060008061254484600001878154811061250257612501614a8f565b5b90600052602060002090600402016001015485600001888154811061252a57612529614a8f565b5b9060005260206000209060040201600201805490506134bc565b9050846020015163ffffffff16811161256c5761256786600087602001516134d8565b6125a9565b846020015163ffffffff16816125829190614abe565b91506125a886866020015163ffffffff168361259e9190614abe565b87602001516134d8565b5b8163ffffffff168363ffffffff161461262f578163ffffffff168363ffffffff161115612601576125fc82846125df9190614dab565b63ffffffff166125ed611ce0565b6125f79190614abe565b612f81565b61262e565b61262d83836126109190614dab565b63ffffffff1661261e611ce0565b6126289190614b81565b612f81565b5b5b505050505050565b60008061264383612768565b90506000600260018360405160200161265d929190614d37565b6040516020818303038152906040526040516126799190614c6d565b602060405180830381855afa158015612696573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906126b99190614c99565b905060006126c561348c565b90506126d181836133a1565b9350505050919050565b60006127067ffbeda9bc03875013b12a1ec161efb8e5bf7e58e3cec96a1ea9efd3e264d26e64613620565b905090565b6127357f7215162fa88ce7cd4020af158a4a540511706bceccf679f8a9b8e991bc4326238261362b565b50565b60006127637fa5ff58ace960275942ff7a2c83e4b03bef245960d313a4897cb780c2f2b50f02612c6c565b905090565b6000600261277583612b6c565b6040516127829190614c6d565b602060405180830381855afa15801561279f573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906127c29190614c99565b9050919050565b60006127d3612c3f565b600001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6128397ffbeda9bc03875013b12a1ec161efb8e5bf7e58e3cec96a1ea9efd3e264d26e6482613632565b50565b60006128677fd5c553085b8382c47128ae7612257fd5dc3b4fc4d3a108925604d3c8700c025b612c6c565b905090565b6128967fd5c553085b8382c47128ae7612257fd5dc3b4fc4d3a108925604d3c8700c025b8261362b565b50565b6128c37fbc8b9852d17d50256bb221fdf6ee12d78dd493d807e907f7d223c40d65abd6b982613632565b50565b6128f07f8d6ac026ef324fba047d2d17e02795ba26a2f3d515a4528bc25a02f9ed5ed07f82613632565b50565b61291d7fa5ff58ace960275942ff7a2c83e4b03bef245960d313a4897cb780c2f2b50f028261362b565b50565b61294a7f86eab05ded17b7bb99ae52aecc7d0141775ce631a881bb0f714c57e984add84982613632565b50565b60006129787f7215162fa88ce7cd4020af158a4a540511706bceccf679f8a9b8e991bc432623612c6c565b905090565b6000807fc58a51931c529c2a8796a8fad2ae789ee504643b4b567f2c0c97e809cec9390290508091505090565b606081601f836129ba9190614b81565b10156129fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129f290614e3c565b60405180910390fd5b8183612a079190614b81565b84511015612a4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a4190614ea8565b60405180910390fd5b6060821560008114612a6b5760405191506000825260208201604052612abc565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015612aa95780518352602083019250602081019050612a8c565b50868552601f19601f8301166040525050505b50809150509392505050565b600080612ad483612768565b905060006002600083604051602001612aee929190614d37565b604051602081830303815290604052604051612b0a9190614c6d565b602060405180830381855afa158015612b27573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612b4a9190614c99565b90506000612b56613371565b9050612b6281836133a1565b9350505050919050565b60606020825110158015612b8257506040825111155b612b8f57612b8e614ec8565b5b8151604003612ba057819050612c3a565b6000602067ffffffffffffffff811115612bbd57612bbc614cc6565b5b6040519080825280601f01601f191660200182016040528015612bef5781602001600182028036833780820191505090505b509050600060208201528251602003612c1457612c0c8382613639565b915050612c3a565b612c3683612c3183600087516040612c2c9190614abe565b6129aa565b613639565b9150505b919050565b6000807f86647fdbbdb534026d3e0f93a551cecf651c2b40fcdfef4b9fd9ed826133e26590508091505090565b600081549050919050565b6000612c81611d10565b90506000816000018581548110612c9b57612c9a614a8f565b5b906000526020600020906004020190506000612cb68661201a565b90506000816020015163ffffffff1690505b85826020015163ffffffff16612cde9190614b81565b811015612f43576000836002018281548110612cfd57612cfc614a8f565b5b906000526020600020018054612d1290614b50565b80601f0160208091040260200160405190810160405280929190818152602001828054612d3e90614b50565b8015612d8b5780601f10612d6057610100808354040283529160200191612d8b565b820191906000526020600020905b815481529060010190602001808311612d6e57829003601f168201915b505050505090506000846003018381548110612daa57612da9614a8f565b5b906000526020600020018054612dbf90614b50565b80601f0160208091040260200160405190810160405280929190818152602001828054612deb90614b50565b8015612e385780601f10612e0d57610100808354040283529160200191612e38565b820191906000526020600020905b815481529060010190602001808311612e1b57829003601f168201915b505050505090506000612e4a83612637565b90506000612e57826136c3565b9050612e64848483613711565b6000612e6f85612768565b905089612e7a612c3f565b600001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508973ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f881413a504838591eb119e81d4d4e3ce0f6e9b4988dd7bd6c194e53c343c20008784604051612f2b929190614ef7565b60405180910390a38560010195505050505050612cc8565b50612f798686836000015163ffffffff16612f5e9190614abe565b87846020015163ffffffff16612f749190614b81565b6134d8565b505050505050565b612fab7f559ad51499ae00ca2e9d9d95aab46737c8904ab7da276613fefda282b2c2ac068261362b565b50565b600080612fb9613af9565b905060005b6036811015613017578360ff16828260368110612fde57612fdd614a8f565b5b602002015160ff161061300c57818160368110612ffe57612ffd614a8f565b5b60200201519250505061304a565b806001019050612fbe565b506040517f1470905f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b600080828560206002876130639190614bd7565b61306d91906149fe565b6020811061307e5761307d614a8f565b5b1a60f81b60f81c61308f9190614f34565b91506001808461309f9190614f65565b86602060016002896130b19190614bd7565b6130bb9190614b81565b6130c591906149fe565b602081106130d6576130d5614a8f565b5b1a60f81b60f81c6130e79190614f34565b6130f19190614f99565b9050935093915050565b60008060007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff905060007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff905060008890505b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8360010b14806131a157507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260010b145b156132595760006131b28288613d2c565b63ffffffff1611156131fb577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8360010b036131f3578060000b92506131fa565b8060000b91505b5b8688826132089190614f99565b6132129190614f34565b90508860ff168160ff1614801561324b57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260010b145b15613254578291505b61314e565b82829450945050505094509492505050565b6001818360ff168151811061328357613282614a8f565b5b602002602001015160600181815161329b9190614fd0565b91509063ffffffff16908163ffffffff16815250505050565b6000806132c18684613e78565b63ffffffff16905060006132d58685613e78565b63ffffffff169050808210156132ef578692505050613369565b80821115613301578592505050613369565b6000600160028760208a8c6133169190614f99565b6133209190614f34565b60ff166020811061333457613333614a8f565b5b1a60f81b60f81c6133459190614f34565b60ff16149050600015158115150361336257869350505050613369565b8793505050505b949350505050565b600061339c7f8d6ac026ef324fba047d2d17e02795ba26a2f3d515a4528bc25a02f9ed5ed07f613620565b905090565b60006133ae838330613fc4565b905092915050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528360601b60148201527f5af43d82803e903d91602b57fd5bf300000000000000000000000000000000006028820152826037826000f5915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603613486576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161347d90615056565b60405180910390fd5b92915050565b60006134b77f86eab05ded17b7bb99ae52aecc7d0141775ce631a881bb0f714c57e984add849613620565b905090565b6000818310156134ce578290506134d2565b8190505b92915050565b6000807f37e2c371bbf1c7a1326d52e30855e9c8b6cac15eda4475320e427b948813a9f0905080915060006004866135109190614a5e565b9050600060048761352191906149fe565b9050600880826135319190614bd7565b61353b9190614bd7565b67ffffffffffffffff901b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6135719190614abe565b84600001600084815260200190815260200160002060008282541692505081905550600860046008836135a49190614bd7565b6135ae9190614b81565b6135b89190614bd7565b8563ffffffff16901b600880836135cf9190614bd7565b6135d99190614bd7565b8763ffffffff16901b6135ec9190614b81565b84600001600084815260200190815260200160002060008282546136109190614b81565b9250508190555050505050505050565b600081549050919050565b8082555050565b8082555050565b6060806040519050835180825260208201818101602087015b8183101561366f5780518352602083019250602081019050613652565b50855192508351830184528091508282019050602086015b818310156136a45780518352602083019250602081019050613687565b50601f19601f8851850115830101166040525050508091505092915050565b60007f01000000000000000000000000000000000000000000000000000000000000008273ffffffffffffffffffffffffffffffffffffffff166137079190614b81565b60001b9050919050565b600061371c84612768565b9050600060028061373086600060406129aa565b60405161373d9190614c6d565b602060405180830381855afa15801561375a573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061377d9190614c99565b600261379f61379a8860408060606137959190614abe565b6129aa565b612b6c565b6040516137ac9190614c6d565b602060405180830381855afa1580156137c9573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906137ec9190614c99565b6040516020016137fd929190615076565b6040516020818303038152906040526040516138199190614c6d565b602060405180830381855afa158015613836573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906138599190614c99565b90506000633b9aca006801bc16d674ec8000006138769190614a5e565b90506801bc16d674ec800000633b9aca00826138929190614bd7565b146138a05761389f614ec8565b5b600060028085876040516020016138b8929190615076565b6040516020818303038152906040526040516138d49190614c6d565b602060405180830381855afa1580156138f1573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906139149190614c99565b600261391f85614044565b86604051602001613931929190614d37565b60405160208183030381529060405260405161394d9190614c6d565b602060405180830381855afa15801561396a573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061398d9190614c99565b60405160200161399e929190615076565b6040516020818303038152906040526040516139ba9190614c6d565b602060405180830381855afa1580156139d7573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906139fa9190614c99565b905060006801bc16d674ec80000047613a139190614abe565b9050613a1d614099565b73ffffffffffffffffffffffffffffffffffffffff1663228951186801bc16d674ec8000008a89604051602001613a5491906150a2565b6040516020818303038152906040528b876040518663ffffffff1660e01b8152600401613a8494939291906150bd565b6000604051808303818588803b158015613a9d57600080fd5b505af1158015613ab1573d6000803e3d6000fd5b5050505050804714613aef576040517f6596d2b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050505050565b613b01614326565b604051806106c00160405280600260ff168152602001600360ff168152602001600560ff168152602001600760ff168152602001600b60ff168152602001600d60ff168152602001601160ff168152602001601360ff168152602001601760ff168152602001601d60ff168152602001601f60ff168152602001602560ff168152602001602960ff168152602001602b60ff168152602001602f60ff168152602001603560ff168152602001603b60ff168152602001603d60ff168152602001604360ff168152602001604760ff168152602001604960ff168152602001604f60ff168152602001605360ff168152602001605960ff168152602001606160ff168152602001606560ff168152602001606760ff168152602001606b60ff168152602001606d60ff168152602001607160ff168152602001607f60ff168152602001608360ff168152602001608960ff168152602001608b60ff168152602001609560ff168152602001609760ff168152602001609d60ff16815260200160a360ff16815260200160a760ff16815260200160ad60ff16815260200160b360ff16815260200160b560ff16815260200160bf60ff16815260200160c160ff16815260200160c560ff16815260200160c760ff16815260200160d360ff16815260200160df60ff16815260200160e360ff16815260200160e560ff16815260200160e960ff16815260200160ef60ff16815260200160f160ff16815260200160fb60ff16815250905090565b600081518360ff1610613d425760009050613e72565b60001515828460ff1681518110613d5c57613d5b614a8f565b5b602002602001015160000151151503613e21576000613d7d8460ff1661201a565b90506001838560ff1681518110613d9757613d96614a8f565b5b602002602001015160000190151590811515815250508060200151838560ff1681518110613dc857613dc7614a8f565b5b60200260200101516040019063ffffffff16908163ffffffff16815250508060000151838560ff1681518110613e0157613e00614a8f565b5b60200260200101516080019063ffffffff16908163ffffffff1681525050505b818360ff1681518110613e3757613e36614a8f565b5b602002602001015160600151828460ff1681518110613e5957613e58614a8f565b5b602002602001015160800151613e6f9190614dab565b90505b92915050565b600081518360ff1610613e8e5760009050613fbe565b60001515828460ff1681518110613ea857613ea7614a8f565b5b602002602001015160000151151503613f6d576000613ec98460ff1661201a565b90506001838560ff1681518110613ee357613ee2614a8f565b5b602002602001015160000190151590811515815250508060200151838560ff1681518110613f1457613f13614a8f565b5b60200260200101516040019063ffffffff16908163ffffffff16815250508060000151838560ff1681518110613f4d57613f4c614a8f565b5b60200260200101516080019063ffffffff16908163ffffffff1681525050505b818360ff1681518110613f8357613f82614a8f565b5b602002602001015160600151828460ff1681518110613fa557613fa4614a8f565b5b602002602001015160400151613fbb9190614fd0565b90505b92915050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528460601b60148201527f5af43d82803e903d91602b57fd5bf3ff0000000000000000000000000000000060288201528260601b603882015283604c82015260378120606c820152605560378201209150509392505050565b60008082905060005b600881101561407a5760ff8216600884901b179250600882901c91508061407390615117565b905061404d565b508060001461408c5761408b614ec8565b5b60c082901b915050919050565b60006140c47fbc8b9852d17d50256bb221fdf6ee12d78dd493d807e907f7d223c40d65abd6b9613620565b905090565b5080546140d590614b50565b6000825580601f106140e75750614106565b601f0160209004906000526020600020908101906141059190614349565b5b50565b82805461411590614b50565b90600052602060002090601f0160209004810192826141375760008555614185565b82601f106141485780548555614185565b8280016001018555821561418557600052602060002091601f016020900482015b82811115614184578254825591600101919060010190614169565b5b5090506141929190614349565b5090565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160608152602001606081525090565b828054828255906000526020600020908101928215614223579160200282015b82811115614222578251829080519060200190614212929190614234565b50916020019190600101906141f4565b5b5090506142309190614366565b5090565b82805461424090614b50565b90600052602060002090601f01602090048101928261426257600085556142a9565b82601f1061427b57805160ff19168380011785556142a9565b828001600101855582156142a9579182015b828111156142a857825182559160200191906001019061428d565b5b5090506142b69190614349565b5090565b6040518060a00160405280600015158152602001600060ff168152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff1681525090565b6040518060400160405280600063ffffffff168152602001600063ffffffff1681525090565b604051806106c00160405280603690602082028036833780820191505090505090565b5b8082111561436257600081600090555060010161434a565b5090565b5b80821115614386576000818161437d91906140c9565b50600101614367565b5090565b600080fd5b600080fd5b6000819050919050565b6143a781614394565b81146143b257600080fd5b50565b6000813590506143c48161439e565b92915050565b6000602082840312156143e0576143df61438a565b5b60006143ee848285016143b5565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000614422826143f7565b9050919050565b61443281614417565b82525050565b61444181614394565b82525050565b600060a08201905061445c6000830188614429565b6144696020830187614438565b6144766040830186614438565b6144836060830185614438565b6144906080830184614438565b9695505050505050565b600080fd5b600080fd5b600080fd5b60008083601f8401126144bf576144be61449a565b5b8235905067ffffffffffffffff8111156144dc576144db61449f565b5b6020830191508360018202830111156144f8576144f76144a4565b5b9250929050565b600080602083850312156145165761451561438a565b5b600083013567ffffffffffffffff8111156145345761453361438f565b5b614540858286016144a9565b92509250509250929050565b60008083601f8401126145625761456161449a565b5b8235905067ffffffffffffffff81111561457f5761457e61449f565b5b60208301915083602082028301111561459b5761459a6144a4565b5b9250929050565b6000806000604084860312156145bb576145ba61438a565b5b60006145c9868287016143b5565b935050602084013567ffffffffffffffff8111156145ea576145e961438f565b5b6145f68682870161454c565b92509250509250925092565b60006020820190506146176000830184614429565b92915050565b60006020820190506146326000830184614438565b92915050565b6000806040838503121561464f5761464e61438a565b5b600061465d858286016143b5565b925050602061466e858286016143b5565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b838110156146b2578082015181840152602081019050614697565b838111156146c1576000848401525b50505050565b6000601f19601f8301169050919050565b60006146e382614678565b6146ed8185614683565b93506146fd818560208601614694565b614706816146c7565b840191505092915050565b60008115159050919050565b61472681614711565b82525050565b6000608082019050818103600083015261474681876146d8565b9050818103602083015261475a81866146d8565b90506147696040830185614429565b614776606083018461471d565b95945050505050565b61478881614417565b811461479357600080fd5b50565b6000813590506147a58161477f565b92915050565b6000602082840312156147c1576147c061438a565b5b60006147cf84828501614796565b91505092915050565b60008060008060008060c087890312156147f5576147f461438a565b5b600061480389828a01614796565b965050602061481489828a01614796565b955050604061482589828a01614796565b945050606061483689828a01614796565b935050608061484789828a016143b5565b92505060a061485889828a016143b5565b9150509295509295509295565b6000819050919050565b61487881614865565b811461488357600080fd5b50565b6000813590506148958161486f565b92915050565b6000602082840312156148b1576148b061438a565b5b60006148bf84828501614886565b91505092915050565b600080600080600080608087890312156148e5576148e461438a565b5b60006148f389828a016143b5565b965050602061490489828a016143b5565b955050604087013567ffffffffffffffff8111156149255761492461438f565b5b61493189828a016144a9565b9450945050606087013567ffffffffffffffff8111156149545761495361438f565b5b61496089828a016144a9565b92509250509295509295509295565b6000806000604084860312156149885761498761438a565b5b600084013567ffffffffffffffff8111156149a6576149a561438f565b5b6149b2868287016144a9565b935093505060206149c586828701614796565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614a0982614394565b9150614a1483614394565b925082614a2457614a236149cf565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614a6982614394565b9150614a7483614394565b925082614a8457614a836149cf565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000614ac982614394565b9150614ad483614394565b925082821015614ae757614ae6614a2f565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680614b6857607f821691505b602082108103614b7b57614b7a614b21565b5b50919050565b6000614b8c82614394565b9150614b9783614394565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614bcc57614bcb614a2f565b5b828201905092915050565b6000614be282614394565b9150614bed83614394565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614c2657614c25614a2f565b5b828202905092915050565b600081905092915050565b6000614c4782614678565b614c518185614c31565b9350614c61818560208601614694565b80840191505092915050565b6000614c798284614c3c565b915081905092915050565b600081519050614c938161486f565b92915050565b600060208284031215614caf57614cae61438a565b5b6000614cbd84828501614c84565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000819050919050565b614d10614d0b82614394565b614cf5565b82525050565b6000819050919050565b614d31614d2c82614865565b614d16565b82525050565b6000614d438285614cff565b602082019150614d538284614d20565b6020820191508190509392505050565b614d6c81614865565b82525050565b6000604082019050614d876000830185614429565b614d946020830184614d63565b9392505050565b600063ffffffff82169050919050565b6000614db682614d9b565b9150614dc183614d9b565b925082821015614dd457614dd3614a2f565b5b828203905092915050565b600082825260208201905092915050565b7f736c6963655f6f766572666c6f77000000000000000000000000000000000000600082015250565b6000614e26600e83614ddf565b9150614e3182614df0565b602082019050919050565b60006020820190508181036000830152614e5581614e19565b9050919050565b7f736c6963655f6f75744f66426f756e6473000000000000000000000000000000600082015250565b6000614e92601183614ddf565b9150614e9d82614e5c565b602082019050919050565b60006020820190508181036000830152614ec181614e85565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b60006040820190508181036000830152614f1181856146d8565b9050614f206020830184614d63565b9392505050565b600060ff82169050919050565b6000614f3f82614f27565b9150614f4a83614f27565b925082614f5a57614f596149cf565b5b828206905092915050565b6000614f7082614f27565b9150614f7b83614f27565b925082821015614f8e57614f8d614a2f565b5b828203905092915050565b6000614fa482614f27565b9150614faf83614f27565b92508260ff03821115614fc557614fc4614a2f565b5b828201905092915050565b6000614fdb82614d9b565b9150614fe683614d9b565b92508263ffffffff03821115614fff57614ffe614a2f565b5b828201905092915050565b7f455243313136373a2063726561746532206661696c6564000000000000000000600082015250565b6000615040601783614ddf565b915061504b8261500a565b602082019050919050565b6000602082019050818103600083015261506f81615033565b9050919050565b60006150828285614d20565b6020820191506150928284614d20565b6020820191508190509392505050565b60006150ae8284614d20565b60208201915081905092915050565b600060808201905081810360008301526150d781876146d8565b905081810360208301526150eb81866146d8565b905081810360408301526150ff81856146d8565b905061510e6060830184614d63565b95945050505050565b600061512282614394565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361515457615153614a2f565b5b60018201905091905056fea2646970667358221220969e74a1ce6d381a0435b09da4f15eb1192066b28da98398f5427a7d3d64ab1064736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106101a05760003560e01c806374d099e6116100ec578063bf509bd41161008a578063d6d9c99a11610064578063d6d9c99a14610632578063e00cb6ca1461065b578063e99454f514610698578063f340fa01146106c1576101b0565b8063bf509bd41461058f578063d243d69d146105b8578063d602d796146105f5576101b0565b8063a7400801116100c6578063a7400801146104d3578063b4336b8414610510578063b747e7dd1461053b578063bf15af5614610564576101b0565b806374d099e6146104425780637c4c92381461046b5780639870d7fe14610496576101b0565b806336bf33251161015957806363b4118f1161013357806363b4118f146103855780636e9960c3146103c5578063704b6c02146103f0578063714b55b214610419576101b0565b806336bf332514610304578063540bc5ea1461032f5780635b18d5791461035a576101b0565b806305f63c8a146101e25780630968f264146102235780631864636c1461024c5780631ee13343146102755780631f078d86146102b25780632ba03a79146102db576101b0565b366101b0576101ae336106dd565b005b6040517fae962d4e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3480156101ee57600080fd5b50610209600480360381019061020491906143ca565b610836565b60405161021a959493929190614447565b60405180910390f35b34801561022f57600080fd5b5061024a600480360381019061024591906144ff565b61093c565b005b34801561025857600080fd5b50610273600480360381019061026e91906145a2565b610954565b005b34801561028157600080fd5b5061029c600480360381019061029791906144ff565b610ef5565b6040516102a99190614602565b60405180910390f35b3480156102be57600080fd5b506102d960048036038101906102d491906143ca565b610f4c565b005b3480156102e757600080fd5b5061030260048036038101906102fd91906144ff565b611000565b005b34801561031057600080fd5b5061031961100e565b604051610326919061461d565b60405180910390f35b34801561033b57600080fd5b5061034461101b565b604051610351919061461d565b60405180910390f35b34801561036657600080fd5b5061036f611020565b60405161037c919061461d565b60405180910390f35b34801561039157600080fd5b506103ac60048036038101906103a79190614638565b61102f565b6040516103bc949392919061472c565b60405180910390f35b3480156103d157600080fd5b506103da611211565b6040516103e79190614602565b60405180910390f35b3480156103fc57600080fd5b50610417600480360381019061041291906147ab565b611220565b005b34801561042557600080fd5b50610440600480360381019061043b9190614638565b611298565b005b34801561044e57600080fd5b50610469600480360381019061046491906147d8565b61134a565b005b34801561047757600080fd5b506104806113df565b60405161048d919061461d565b60405180910390f35b3480156104a257600080fd5b506104bd60048036038101906104b891906147ab565b6113ee565b6040516104ca919061461d565b60405180910390f35b3480156104df57600080fd5b506104fa60048036038101906104f5919061489b565b611580565b6040516105079190614602565b60405180910390f35b34801561051c57600080fd5b50610525611592565b604051610532919061461d565b60405180910390f35b34801561054757600080fd5b50610562600480360381019061055d91906148c8565b6115a1565b005b34801561057057600080fd5b50610579611942565b604051610586919061461d565b60405180910390f35b34801561059b57600080fd5b506105b660048036038101906105b191906144ff565b611947565b005b3480156105c457600080fd5b506105df60048036038101906105da91906144ff565b611955565b6040516105ec9190614602565b60405180910390f35b34801561060157600080fd5b5061061c6004803603810190610617919061489b565b6119ac565b6040516106299190614602565b60405180910390f35b34801561063e57600080fd5b50610659600480360381019061065491906143ca565b611a20565b005b34801561066757600080fd5b50610682600480360381019061067d91906144ff565b611ad4565b60405161068f9190614602565b60405180910390f35b3480156106a457600080fd5b506106bf60048036038101906106ba919061496f565b611b33565b005b6106db60048036038101906106d691906147ab565b611cd4565b005b6000341480610701575060006801bc16d674ec800000346106fe91906149fe565b14155b15610738576040517fd5e6876b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610742611ce0565b905060006801bc16d674ec8000003461075b9190614a5e565b905081811115610797576040517fae575a8800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006107a1611d10565b905060008160000180549050036107e4576040517fddf9d24500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001816000018054905003610803576107fe848385611d3d565b610830565b60028160000180549050036108225761081d848385611d62565b61082f565b61082e84838584611e9e565b5b5b50505050565b600080600080600080610847611d10565b905080600001805490508710156109325760006108638861201a565b905081600001888154811061087b5761087a614a8f565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260000189815481106108c3576108c2614a8f565b5b906000526020600020906004020160010154836000018a815481106108eb576108ea614a8f565b5b906000526020600020906004020160020180549050809750819850829950505050806020015181600001518163ffffffff1691508063ffffffff1690508094508195505050505b5091939590929450565b6109468282612102565b61095082826122e3565b5050565b8261095d611d10565b600001818154811061097257610971614a8f565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a08576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008383905003610a45576040517fa9cb9e0d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610a508561201a565b90506000610a5c611d10565b905060005b85859050811015610ee357600081118015610aba57508585600183610a869190614abe565b818110610a9657610a95614a8f565b5b90506020020135868683818110610ab057610aaf614a8f565b5b9050602002013510155b15610af1576040517f35061dff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b826020015163ffffffff16868683818110610b0f57610b0e614a8f565b5b905060200201351015610b4e576040517f34947ea100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001826000018881548110610b6657610b65614a8f565b5b906000526020600020906004020160020180549050610b859190614abe565b868683818110610b9857610b97614a8f565b5b9050602002013503610c5357816000018781548110610bba57610bb9614a8f565b5b9060005260206000209060040201600201805480610bdb57610bda614af2565b5b600190038181906000526020600020016000610bf791906140c9565b9055816000018781548110610c0f57610c0e614a8f565b5b9060005260206000209060040201600301805480610c3057610c2f614af2565b5b600190038181906000526020600020016000610c4c91906140c9565b9055610ed8565b816000018781548110610c6957610c68614a8f565b5b90600052602060002090600402016002016001836000018981548110610c9257610c91614a8f565b5b906000526020600020906004020160020180549050610cb19190614abe565b81548110610cc257610cc1614a8f565b5b90600052602060002001826000018881548110610ce257610ce1614a8f565b5b9060005260206000209060040201600201878784818110610d0657610d05614a8f565b5b9050602002013581548110610d1e57610d1d614a8f565b5b90600052602060002001908054610d3490614b50565b610d3f929190614109565b50816000018781548110610d5657610d55614a8f565b5b9060005260206000209060040201600201805480610d7757610d76614af2565b5b600190038181906000526020600020016000610d9391906140c9565b9055816000018781548110610dab57610daa614a8f565b5b90600052602060002090600402016003016001836000018981548110610dd457610dd3614a8f565b5b906000526020600020906004020160030180549050610df39190614abe565b81548110610e0457610e03614a8f565b5b90600052602060002001826000018881548110610e2457610e23614a8f565b5b9060005260206000209060040201600301878784818110610e4857610e47614a8f565b5b9050602002013581548110610e6057610e5f614a8f565b5b90600052602060002001908054610e7690614b50565b610e81929190614109565b50816000018781548110610e9857610e97614a8f565b5b9060005260206000209060040201600301805480610eb957610eb8614af2565b5b600190038181906000526020600020016000610ed591906140c9565b90555b806001019050610a61565b50610eed866124c4565b505050505050565b6000610f4483838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612637565b905092915050565b610f546126db565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610fb8576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612710811115610ff4576040517f58d620b300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610ffd8161270b565b50565b61100a82826122e3565b5050565b6801bc16d674ec80000081565b606081565b600061102a612738565b905090565b606080600080600061103f611d10565b905080600001878154811061105757611056614a8f565b5b9060005260206000209060040201600201868154811061107a57611079614a8f565b5b90600052602060002001805461108f90614b50565b80601f01602080910402602001604051908101604052809291908181526020018280546110bb90614b50565b80156111085780601f106110dd57610100808354040283529160200191611108565b820191906000526020600020905b8154815290600101906020018083116110eb57829003601f168201915b5050505050945080600001878154811061112557611124614a8f565b5b9060005260206000209060040201600301868154811061114857611147614a8f565b5b90600052602060002001805461115d90614b50565b80601f016020809104026020016040519081016040528092919081815260200182805461118990614b50565b80156111d65780601f106111ab576101008083540402835291602001916111d6565b820191906000526020600020905b8154815290600101906020018083116111b957829003601f168201915b505050505093506111ee6111e986612768565b6127c9565b92506111f98761201a565b6020015163ffffffff16861091505092959194509250565b600061121b6126db565b905090565b6112286126db565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461128c576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6112958161280f565b50565b6112a06126db565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611304576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061130e611d10565b90508181600001848154811061132757611326614a8f565b5b906000526020600020906004020160010181905550611345836124c4565b505050565b60018061135561283c565b61135f9190614b81565b8114611397576040517f0dc149f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6113a08161286c565b6113a98761280f565b6113b286612899565b6113bb856128c6565b6113c4836128f3565b6113cd84612920565b6113d68261270b565b50505050505050565b60006113e961294d565b905090565b60006113f86126db565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461145c576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611466611d10565b9050611470614196565b83816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508160000181908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020190805190602001906115439291906141d4565b5060608201518160030190805190602001906115609291906141d4565b505050600182600001805490506115779190614abe565b92505050919050565b600061158b826127c9565b9050919050565b600061159c611ce0565b905090565b856115aa611d10565b60000181815481106115bf576115be614a8f565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611655576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000860361168f576040517fa9cb9e0d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006030868690506116a191906149fe565b1415806116bd5750856030868690506116ba9190614a5e565b14155b156116f4576040517f337d0f4100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060608484905061170691906149fe565b14158061172257508560608484905061171f9190614a5e565b14155b15611759576040517f274cf40100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611763611d10565b9050600061176f61297d565b905060005b8881101561192d5760006117da89898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506030846117d39190614bd7565b60306129aa565b9050600061183a88888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506060856118339190614bd7565b60606129aa565b9050846000018c8154811061185257611851614a8f565b5b90600052602060002090600402016002018290806001815401808255809150506001900390600052602060002001600090919091909150908051906020019061189c929190614234565b50846000018c815481106118b3576118b2614a8f565b5b9060005260206000209060040201600301819080600181540180825580915050600190039060005260206000200160009091909190915090805190602001906118fd929190614234565b508b84600001600061190e85612768565b8152602001908152602001600020819055508260010192505050611774565b50611937896124c4565b505050505050505050565b603081565b6119518282612102565b5050565b60006119a483838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612ac8565b905092915050565b60006119b6611d10565b6000016119c161297d565b600001600084815260200190815260200160002054815481106119e7576119e6614a8f565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b611a286126db565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611a8c576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612710811115611ac8576040517f58d620b300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611ad1816128f3565b50565b6000611b2b611b2684848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612768565b6127c9565b905092915050565b60006002611b8485858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612b6c565b604051611b919190614c6d565b602060405180830381855afa158015611bae573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611bd19190614c99565b90506000611bdd612c3f565b90503373ffffffffffffffffffffffffffffffffffffffff1681600001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611c79576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8281600001600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b611cdd816106dd565b50565b6000611d0b7f559ad51499ae00ca2e9d9d95aab46737c8904ab7da276613fefda282b2c2ac06612c6c565b905090565b6000807fd2a2f1f08ad325daf72af0169949ae210065d6916750ff03abd83510331b7b3990508091505090565b611d4960008385612c77565b611d5d8282611d589190614abe565b612f81565b505050565b6000611d6e600061201a565b90506000611d7c600161201a565b90506000806000600243611d9091906149fe565b03611db757600286611da29190614a5e565b91508186611db09190614abe565b9050611dd5565b600286611dc49190614a5e565b90508086611dd29190614abe565b91505b836000015163ffffffff16821115611e1157836000015163ffffffff1686611dfd9190614abe565b9050836000015163ffffffff169150611e4a565b826000015163ffffffff16811115611e4957826000015163ffffffff1686611e399190614abe565b9150826000015163ffffffff1690505b5b6000821115611e6057611e5f60008389612c77565b5b6000811115611e7657611e7560018289612c77565b5b611e958183611e859190614b81565b86611e909190614abe565b612f81565b50505050505050565b6000816000018054905090506000611eb582612fae565b905060004340905060008367ffffffffffffffff811115611ed957611ed8614cc6565b5b604051908082528060200260200182016040528015611f1257816020015b611eff6142ba565b815260200190600190039081611ef75790505b50905060005b87811015611f8657600080611f2e85848861304f565b91509150600080611f4184848a896130fb565b915091508060ff168260ff1603611f6157611f5c828761326b565b611f77565b611f76611f7083838a8a6132b4565b8761326b565b5b84600101945050505050611f18565b5060005b8151811015611ffb576000828281518110611fa857611fa7614a8f565b5b60200260200101516060015163ffffffff161115611ff057611fef81838381518110611fd757611fd6614a8f565b5b60200260200101516060015163ffffffff168b612c77565b5b806001019050611f8a565b50612010878761200b9190614abe565b612f81565b5050505050505050565b612022614300565b6000807f37e2c371bbf1c7a1326d52e30855e9c8b6cac15eda4475320e427b948813a9f09050809150600060048561205a9190614a5e565b9050600060048661206b91906149fe565b90506000846000016000848152602001908152602001600020549050600880836120959190614bd7565b61209f9190614bd7565b81901c866000019063ffffffff16908163ffffffff1681525050600860046008846120ca9190614bd7565b6120d49190614b81565b6120de9190614bd7565b81901c866020019063ffffffff16908163ffffffff16815250505050505050919050565b600061215183838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612768565b90506000600260008360405160200161216b929190614d37565b6040516020818303038152906040526040516121879190614c6d565b602060405180830381855afa1580156121a4573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906121c79190614c99565b905060006121d3613371565b905060006121e182846133a1565b905060008173ffffffffffffffffffffffffffffffffffffffff163b0361227b5761220c82846133b6565b508073ffffffffffffffffffffffffffffffffffffffff1663177a453430866040518363ffffffff1660e01b8152600401612248929190614d72565b600060405180830381600087803b15801561226257600080fd5b505af1158015612276573d6000803e3d6000fd5b505050505b8073ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156122c357600080fd5b505af11580156122d7573d6000803e3d6000fd5b50505050505050505050565b600061233283838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612768565b90506000600260018360405160200161234c929190614d37565b6040516020818303038152906040526040516123689190614c6d565b602060405180830381855afa158015612385573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906123a89190614c99565b905060006123b461348c565b905060006123c282846133a1565b905060008173ffffffffffffffffffffffffffffffffffffffff163b0361245c576123ed82846133b6565b508073ffffffffffffffffffffffffffffffffffffffff1663b9e1b44330866040518363ffffffff1660e01b8152600401612429929190614d72565b600060405180830381600087803b15801561244357600080fd5b505af1158015612457573d6000803e3d6000fd5b505050505b8073ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156124a457600080fd5b505af11580156124b8573d6000803e3d6000fd5b50505050505050505050565b60006124cf8261201a565b905060006124db611d10565b905060008260000151905060008061254484600001878154811061250257612501614a8f565b5b90600052602060002090600402016001015485600001888154811061252a57612529614a8f565b5b9060005260206000209060040201600201805490506134bc565b9050846020015163ffffffff16811161256c5761256786600087602001516134d8565b6125a9565b846020015163ffffffff16816125829190614abe565b91506125a886866020015163ffffffff168361259e9190614abe565b87602001516134d8565b5b8163ffffffff168363ffffffff161461262f578163ffffffff168363ffffffff161115612601576125fc82846125df9190614dab565b63ffffffff166125ed611ce0565b6125f79190614abe565b612f81565b61262e565b61262d83836126109190614dab565b63ffffffff1661261e611ce0565b6126289190614b81565b612f81565b5b5b505050505050565b60008061264383612768565b90506000600260018360405160200161265d929190614d37565b6040516020818303038152906040526040516126799190614c6d565b602060405180830381855afa158015612696573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906126b99190614c99565b905060006126c561348c565b90506126d181836133a1565b9350505050919050565b60006127067ffbeda9bc03875013b12a1ec161efb8e5bf7e58e3cec96a1ea9efd3e264d26e64613620565b905090565b6127357f7215162fa88ce7cd4020af158a4a540511706bceccf679f8a9b8e991bc4326238261362b565b50565b60006127637fa5ff58ace960275942ff7a2c83e4b03bef245960d313a4897cb780c2f2b50f02612c6c565b905090565b6000600261277583612b6c565b6040516127829190614c6d565b602060405180830381855afa15801561279f573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906127c29190614c99565b9050919050565b60006127d3612c3f565b600001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6128397ffbeda9bc03875013b12a1ec161efb8e5bf7e58e3cec96a1ea9efd3e264d26e6482613632565b50565b60006128677fd5c553085b8382c47128ae7612257fd5dc3b4fc4d3a108925604d3c8700c025b612c6c565b905090565b6128967fd5c553085b8382c47128ae7612257fd5dc3b4fc4d3a108925604d3c8700c025b8261362b565b50565b6128c37fbc8b9852d17d50256bb221fdf6ee12d78dd493d807e907f7d223c40d65abd6b982613632565b50565b6128f07f8d6ac026ef324fba047d2d17e02795ba26a2f3d515a4528bc25a02f9ed5ed07f82613632565b50565b61291d7fa5ff58ace960275942ff7a2c83e4b03bef245960d313a4897cb780c2f2b50f028261362b565b50565b61294a7f86eab05ded17b7bb99ae52aecc7d0141775ce631a881bb0f714c57e984add84982613632565b50565b60006129787f7215162fa88ce7cd4020af158a4a540511706bceccf679f8a9b8e991bc432623612c6c565b905090565b6000807fc58a51931c529c2a8796a8fad2ae789ee504643b4b567f2c0c97e809cec9390290508091505090565b606081601f836129ba9190614b81565b10156129fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129f290614e3c565b60405180910390fd5b8183612a079190614b81565b84511015612a4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a4190614ea8565b60405180910390fd5b6060821560008114612a6b5760405191506000825260208201604052612abc565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015612aa95780518352602083019250602081019050612a8c565b50868552601f19601f8301166040525050505b50809150509392505050565b600080612ad483612768565b905060006002600083604051602001612aee929190614d37565b604051602081830303815290604052604051612b0a9190614c6d565b602060405180830381855afa158015612b27573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612b4a9190614c99565b90506000612b56613371565b9050612b6281836133a1565b9350505050919050565b60606020825110158015612b8257506040825111155b612b8f57612b8e614ec8565b5b8151604003612ba057819050612c3a565b6000602067ffffffffffffffff811115612bbd57612bbc614cc6565b5b6040519080825280601f01601f191660200182016040528015612bef5781602001600182028036833780820191505090505b509050600060208201528251602003612c1457612c0c8382613639565b915050612c3a565b612c3683612c3183600087516040612c2c9190614abe565b6129aa565b613639565b9150505b919050565b6000807f86647fdbbdb534026d3e0f93a551cecf651c2b40fcdfef4b9fd9ed826133e26590508091505090565b600081549050919050565b6000612c81611d10565b90506000816000018581548110612c9b57612c9a614a8f565b5b906000526020600020906004020190506000612cb68661201a565b90506000816020015163ffffffff1690505b85826020015163ffffffff16612cde9190614b81565b811015612f43576000836002018281548110612cfd57612cfc614a8f565b5b906000526020600020018054612d1290614b50565b80601f0160208091040260200160405190810160405280929190818152602001828054612d3e90614b50565b8015612d8b5780601f10612d6057610100808354040283529160200191612d8b565b820191906000526020600020905b815481529060010190602001808311612d6e57829003601f168201915b505050505090506000846003018381548110612daa57612da9614a8f565b5b906000526020600020018054612dbf90614b50565b80601f0160208091040260200160405190810160405280929190818152602001828054612deb90614b50565b8015612e385780601f10612e0d57610100808354040283529160200191612e38565b820191906000526020600020905b815481529060010190602001808311612e1b57829003601f168201915b505050505090506000612e4a83612637565b90506000612e57826136c3565b9050612e64848483613711565b6000612e6f85612768565b905089612e7a612c3f565b600001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508973ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f881413a504838591eb119e81d4d4e3ce0f6e9b4988dd7bd6c194e53c343c20008784604051612f2b929190614ef7565b60405180910390a38560010195505050505050612cc8565b50612f798686836000015163ffffffff16612f5e9190614abe565b87846020015163ffffffff16612f749190614b81565b6134d8565b505050505050565b612fab7f559ad51499ae00ca2e9d9d95aab46737c8904ab7da276613fefda282b2c2ac068261362b565b50565b600080612fb9613af9565b905060005b6036811015613017578360ff16828260368110612fde57612fdd614a8f565b5b602002015160ff161061300c57818160368110612ffe57612ffd614a8f565b5b60200201519250505061304a565b806001019050612fbe565b506040517f1470905f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b600080828560206002876130639190614bd7565b61306d91906149fe565b6020811061307e5761307d614a8f565b5b1a60f81b60f81c61308f9190614f34565b91506001808461309f9190614f65565b86602060016002896130b19190614bd7565b6130bb9190614b81565b6130c591906149fe565b602081106130d6576130d5614a8f565b5b1a60f81b60f81c6130e79190614f34565b6130f19190614f99565b9050935093915050565b60008060007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff905060007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff905060008890505b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8360010b14806131a157507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260010b145b156132595760006131b28288613d2c565b63ffffffff1611156131fb577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8360010b036131f3578060000b92506131fa565b8060000b91505b5b8688826132089190614f99565b6132129190614f34565b90508860ff168160ff1614801561324b57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260010b145b15613254578291505b61314e565b82829450945050505094509492505050565b6001818360ff168151811061328357613282614a8f565b5b602002602001015160600181815161329b9190614fd0565b91509063ffffffff16908163ffffffff16815250505050565b6000806132c18684613e78565b63ffffffff16905060006132d58685613e78565b63ffffffff169050808210156132ef578692505050613369565b80821115613301578592505050613369565b6000600160028760208a8c6133169190614f99565b6133209190614f34565b60ff166020811061333457613333614a8f565b5b1a60f81b60f81c6133459190614f34565b60ff16149050600015158115150361336257869350505050613369565b8793505050505b949350505050565b600061339c7f8d6ac026ef324fba047d2d17e02795ba26a2f3d515a4528bc25a02f9ed5ed07f613620565b905090565b60006133ae838330613fc4565b905092915050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528360601b60148201527f5af43d82803e903d91602b57fd5bf300000000000000000000000000000000006028820152826037826000f5915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603613486576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161347d90615056565b60405180910390fd5b92915050565b60006134b77f86eab05ded17b7bb99ae52aecc7d0141775ce631a881bb0f714c57e984add849613620565b905090565b6000818310156134ce578290506134d2565b8190505b92915050565b6000807f37e2c371bbf1c7a1326d52e30855e9c8b6cac15eda4475320e427b948813a9f0905080915060006004866135109190614a5e565b9050600060048761352191906149fe565b9050600880826135319190614bd7565b61353b9190614bd7565b67ffffffffffffffff901b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6135719190614abe565b84600001600084815260200190815260200160002060008282541692505081905550600860046008836135a49190614bd7565b6135ae9190614b81565b6135b89190614bd7565b8563ffffffff16901b600880836135cf9190614bd7565b6135d99190614bd7565b8763ffffffff16901b6135ec9190614b81565b84600001600084815260200190815260200160002060008282546136109190614b81565b9250508190555050505050505050565b600081549050919050565b8082555050565b8082555050565b6060806040519050835180825260208201818101602087015b8183101561366f5780518352602083019250602081019050613652565b50855192508351830184528091508282019050602086015b818310156136a45780518352602083019250602081019050613687565b50601f19601f8851850115830101166040525050508091505092915050565b60007f01000000000000000000000000000000000000000000000000000000000000008273ffffffffffffffffffffffffffffffffffffffff166137079190614b81565b60001b9050919050565b600061371c84612768565b9050600060028061373086600060406129aa565b60405161373d9190614c6d565b602060405180830381855afa15801561375a573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061377d9190614c99565b600261379f61379a8860408060606137959190614abe565b6129aa565b612b6c565b6040516137ac9190614c6d565b602060405180830381855afa1580156137c9573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906137ec9190614c99565b6040516020016137fd929190615076565b6040516020818303038152906040526040516138199190614c6d565b602060405180830381855afa158015613836573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906138599190614c99565b90506000633b9aca006801bc16d674ec8000006138769190614a5e565b90506801bc16d674ec800000633b9aca00826138929190614bd7565b146138a05761389f614ec8565b5b600060028085876040516020016138b8929190615076565b6040516020818303038152906040526040516138d49190614c6d565b602060405180830381855afa1580156138f1573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906139149190614c99565b600261391f85614044565b86604051602001613931929190614d37565b60405160208183030381529060405260405161394d9190614c6d565b602060405180830381855afa15801561396a573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061398d9190614c99565b60405160200161399e929190615076565b6040516020818303038152906040526040516139ba9190614c6d565b602060405180830381855afa1580156139d7573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906139fa9190614c99565b905060006801bc16d674ec80000047613a139190614abe565b9050613a1d614099565b73ffffffffffffffffffffffffffffffffffffffff1663228951186801bc16d674ec8000008a89604051602001613a5491906150a2565b6040516020818303038152906040528b876040518663ffffffff1660e01b8152600401613a8494939291906150bd565b6000604051808303818588803b158015613a9d57600080fd5b505af1158015613ab1573d6000803e3d6000fd5b5050505050804714613aef576040517f6596d2b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050505050565b613b01614326565b604051806106c00160405280600260ff168152602001600360ff168152602001600560ff168152602001600760ff168152602001600b60ff168152602001600d60ff168152602001601160ff168152602001601360ff168152602001601760ff168152602001601d60ff168152602001601f60ff168152602001602560ff168152602001602960ff168152602001602b60ff168152602001602f60ff168152602001603560ff168152602001603b60ff168152602001603d60ff168152602001604360ff168152602001604760ff168152602001604960ff168152602001604f60ff168152602001605360ff168152602001605960ff168152602001606160ff168152602001606560ff168152602001606760ff168152602001606b60ff168152602001606d60ff168152602001607160ff168152602001607f60ff168152602001608360ff168152602001608960ff168152602001608b60ff168152602001609560ff168152602001609760ff168152602001609d60ff16815260200160a360ff16815260200160a760ff16815260200160ad60ff16815260200160b360ff16815260200160b560ff16815260200160bf60ff16815260200160c160ff16815260200160c560ff16815260200160c760ff16815260200160d360ff16815260200160df60ff16815260200160e360ff16815260200160e560ff16815260200160e960ff16815260200160ef60ff16815260200160f160ff16815260200160fb60ff16815250905090565b600081518360ff1610613d425760009050613e72565b60001515828460ff1681518110613d5c57613d5b614a8f565b5b602002602001015160000151151503613e21576000613d7d8460ff1661201a565b90506001838560ff1681518110613d9757613d96614a8f565b5b602002602001015160000190151590811515815250508060200151838560ff1681518110613dc857613dc7614a8f565b5b60200260200101516040019063ffffffff16908163ffffffff16815250508060000151838560ff1681518110613e0157613e00614a8f565b5b60200260200101516080019063ffffffff16908163ffffffff1681525050505b818360ff1681518110613e3757613e36614a8f565b5b602002602001015160600151828460ff1681518110613e5957613e58614a8f565b5b602002602001015160800151613e6f9190614dab565b90505b92915050565b600081518360ff1610613e8e5760009050613fbe565b60001515828460ff1681518110613ea857613ea7614a8f565b5b602002602001015160000151151503613f6d576000613ec98460ff1661201a565b90506001838560ff1681518110613ee357613ee2614a8f565b5b602002602001015160000190151590811515815250508060200151838560ff1681518110613f1457613f13614a8f565b5b60200260200101516040019063ffffffff16908163ffffffff16815250508060000151838560ff1681518110613f4d57613f4c614a8f565b5b60200260200101516080019063ffffffff16908163ffffffff1681525050505b818360ff1681518110613f8357613f82614a8f565b5b602002602001015160600151828460ff1681518110613fa557613fa4614a8f565b5b602002602001015160400151613fbb9190614fd0565b90505b92915050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528460601b60148201527f5af43d82803e903d91602b57fd5bf3ff0000000000000000000000000000000060288201528260601b603882015283604c82015260378120606c820152605560378201209150509392505050565b60008082905060005b600881101561407a5760ff8216600884901b179250600882901c91508061407390615117565b905061404d565b508060001461408c5761408b614ec8565b5b60c082901b915050919050565b60006140c47fbc8b9852d17d50256bb221fdf6ee12d78dd493d807e907f7d223c40d65abd6b9613620565b905090565b5080546140d590614b50565b6000825580601f106140e75750614106565b601f0160209004906000526020600020908101906141059190614349565b5b50565b82805461411590614b50565b90600052602060002090601f0160209004810192826141375760008555614185565b82601f106141485780548555614185565b8280016001018555821561418557600052602060002091601f016020900482015b82811115614184578254825591600101919060010190614169565b5b5090506141929190614349565b5090565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160608152602001606081525090565b828054828255906000526020600020908101928215614223579160200282015b82811115614222578251829080519060200190614212929190614234565b50916020019190600101906141f4565b5b5090506142309190614366565b5090565b82805461424090614b50565b90600052602060002090601f01602090048101928261426257600085556142a9565b82601f1061427b57805160ff19168380011785556142a9565b828001600101855582156142a9579182015b828111156142a857825182559160200191906001019061428d565b5b5090506142b69190614349565b5090565b6040518060a00160405280600015158152602001600060ff168152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff1681525090565b6040518060400160405280600063ffffffff168152602001600063ffffffff1681525090565b604051806106c00160405280603690602082028036833780820191505090505090565b5b8082111561436257600081600090555060010161434a565b5090565b5b80821115614386576000818161437d91906140c9565b50600101614367565b5090565b600080fd5b600080fd5b6000819050919050565b6143a781614394565b81146143b257600080fd5b50565b6000813590506143c48161439e565b92915050565b6000602082840312156143e0576143df61438a565b5b60006143ee848285016143b5565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000614422826143f7565b9050919050565b61443281614417565b82525050565b61444181614394565b82525050565b600060a08201905061445c6000830188614429565b6144696020830187614438565b6144766040830186614438565b6144836060830185614438565b6144906080830184614438565b9695505050505050565b600080fd5b600080fd5b600080fd5b60008083601f8401126144bf576144be61449a565b5b8235905067ffffffffffffffff8111156144dc576144db61449f565b5b6020830191508360018202830111156144f8576144f76144a4565b5b9250929050565b600080602083850312156145165761451561438a565b5b600083013567ffffffffffffffff8111156145345761453361438f565b5b614540858286016144a9565b92509250509250929050565b60008083601f8401126145625761456161449a565b5b8235905067ffffffffffffffff81111561457f5761457e61449f565b5b60208301915083602082028301111561459b5761459a6144a4565b5b9250929050565b6000806000604084860312156145bb576145ba61438a565b5b60006145c9868287016143b5565b935050602084013567ffffffffffffffff8111156145ea576145e961438f565b5b6145f68682870161454c565b92509250509250925092565b60006020820190506146176000830184614429565b92915050565b60006020820190506146326000830184614438565b92915050565b6000806040838503121561464f5761464e61438a565b5b600061465d858286016143b5565b925050602061466e858286016143b5565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b838110156146b2578082015181840152602081019050614697565b838111156146c1576000848401525b50505050565b6000601f19601f8301169050919050565b60006146e382614678565b6146ed8185614683565b93506146fd818560208601614694565b614706816146c7565b840191505092915050565b60008115159050919050565b61472681614711565b82525050565b6000608082019050818103600083015261474681876146d8565b9050818103602083015261475a81866146d8565b90506147696040830185614429565b614776606083018461471d565b95945050505050565b61478881614417565b811461479357600080fd5b50565b6000813590506147a58161477f565b92915050565b6000602082840312156147c1576147c061438a565b5b60006147cf84828501614796565b91505092915050565b60008060008060008060c087890312156147f5576147f461438a565b5b600061480389828a01614796565b965050602061481489828a01614796565b955050604061482589828a01614796565b945050606061483689828a01614796565b935050608061484789828a016143b5565b92505060a061485889828a016143b5565b9150509295509295509295565b6000819050919050565b61487881614865565b811461488357600080fd5b50565b6000813590506148958161486f565b92915050565b6000602082840312156148b1576148b061438a565b5b60006148bf84828501614886565b91505092915050565b600080600080600080608087890312156148e5576148e461438a565b5b60006148f389828a016143b5565b965050602061490489828a016143b5565b955050604087013567ffffffffffffffff8111156149255761492461438f565b5b61493189828a016144a9565b9450945050606087013567ffffffffffffffff8111156149545761495361438f565b5b61496089828a016144a9565b92509250509295509295509295565b6000806000604084860312156149885761498761438a565b5b600084013567ffffffffffffffff8111156149a6576149a561438f565b5b6149b2868287016144a9565b935093505060206149c586828701614796565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614a0982614394565b9150614a1483614394565b925082614a2457614a236149cf565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614a6982614394565b9150614a7483614394565b925082614a8457614a836149cf565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000614ac982614394565b9150614ad483614394565b925082821015614ae757614ae6614a2f565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680614b6857607f821691505b602082108103614b7b57614b7a614b21565b5b50919050565b6000614b8c82614394565b9150614b9783614394565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614bcc57614bcb614a2f565b5b828201905092915050565b6000614be282614394565b9150614bed83614394565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614c2657614c25614a2f565b5b828202905092915050565b600081905092915050565b6000614c4782614678565b614c518185614c31565b9350614c61818560208601614694565b80840191505092915050565b6000614c798284614c3c565b915081905092915050565b600081519050614c938161486f565b92915050565b600060208284031215614caf57614cae61438a565b5b6000614cbd84828501614c84565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000819050919050565b614d10614d0b82614394565b614cf5565b82525050565b6000819050919050565b614d31614d2c82614865565b614d16565b82525050565b6000614d438285614cff565b602082019150614d538284614d20565b6020820191508190509392505050565b614d6c81614865565b82525050565b6000604082019050614d876000830185614429565b614d946020830184614d63565b9392505050565b600063ffffffff82169050919050565b6000614db682614d9b565b9150614dc183614d9b565b925082821015614dd457614dd3614a2f565b5b828203905092915050565b600082825260208201905092915050565b7f736c6963655f6f766572666c6f77000000000000000000000000000000000000600082015250565b6000614e26600e83614ddf565b9150614e3182614df0565b602082019050919050565b60006020820190508181036000830152614e5581614e19565b9050919050565b7f736c6963655f6f75744f66426f756e6473000000000000000000000000000000600082015250565b6000614e92601183614ddf565b9150614e9d82614e5c565b602082019050919050565b60006020820190508181036000830152614ec181614e85565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b60006040820190508181036000830152614f1181856146d8565b9050614f206020830184614d63565b9392505050565b600060ff82169050919050565b6000614f3f82614f27565b9150614f4a83614f27565b925082614f5a57614f596149cf565b5b828206905092915050565b6000614f7082614f27565b9150614f7b83614f27565b925082821015614f8e57614f8d614a2f565b5b828203905092915050565b6000614fa482614f27565b9150614faf83614f27565b92508260ff03821115614fc557614fc4614a2f565b5b828201905092915050565b6000614fdb82614d9b565b9150614fe683614d9b565b92508263ffffffff03821115614fff57614ffe614a2f565b5b828201905092915050565b7f455243313136373a2063726561746532206661696c6564000000000000000000600082015250565b6000615040601783614ddf565b915061504b8261500a565b602082019050919050565b6000602082019050818103600083015261506f81615033565b9050919050565b60006150828285614d20565b6020820191506150928284614d20565b6020820191508190509392505050565b60006150ae8284614d20565b60208201915081905092915050565b600060808201905081810360008301526150d781876146d8565b905081810360208301526150eb81866146d8565b905081810360408301526150ff81856146d8565b905061510e6060830184614d63565b95945050505050565b600061512282614394565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361515457615153614a2f565b5b60018201905091905056fea2646970667358221220969e74a1ce6d381a0435b09da4f15eb1192066b28da98398f5427a7d3d64ab1064736f6c634300080d0033",
  "devdoc": {
    "author": "Kiln",
    "kind": "dev",
    "methods": {
      "addOperator(address)": {
        "details": "Only callable by admin",
        "params": {
          "_operatorAddress": "Operator address allowed to add / remove validators"
        }
      },
      "addValidators(uint256,uint256,bytes,bytes)": {
        "details": "Only callable by operator",
        "params": {
          "_keyCount": "Number of keys added",
          "_operatorIndex": "Operator Index",
          "_publicKeys": "Concatenated _keyCount public keys",
          "_signatures": "Concatenated _keyCount signatures"
        }
      },
      "deposit(address)": {
        "details": "A multiple of 32 ETH should be sent",
        "params": {
          "_withdrawer": "The withdrawer address"
        }
      },
      "getCLFeeRecipient(bytes)": {
        "params": {
          "_publicKey": "Validator to get the recipient"
        }
      },
      "getELFeeRecipient(bytes)": {
        "params": {
          "_publicKey": "Validator to get the recipient"
        }
      },
      "getOperator(uint256)": {
        "params": {
          "_operatorIndex": "Operator index"
        }
      },
      "getValidator(uint256,uint256)": {
        "params": {
          "_operatorIndex": "Index of the operator running the validator",
          "_validatorIndex": "Index of the validator"
        }
      },
      "getWithdrawer(bytes)": {
        "params": {
          "_publicKey": "Public Key to check"
        }
      },
      "getWithdrawerFromPublicKeyRoot(bytes32)": {
        "params": {
          "_publicKeyRoot": "Hash of the public key"
        }
      },
      "initialize_1(address,address,address,address,uint256,uint256)": {
        "params": {
          "_admin": "Address of the admin allowed to change the operator and admin",
          "_clFee": "Fee in bps to take on any Consensus Layer fee withdrawal",
          "_clFeeRecipientImplementation": "Address of the Consensus Layer fee recipient implementation",
          "_depositContract": "Address of the Deposit Contract",
          "_elFee": "Fee in bps to take on any Execution Layer fee withdrawal",
          "_elFeeRecipientImplementation": "Address of the Execution Layer fee recipient implementation"
        }
      },
      "removeValidators(uint256,uint256[])": {
        "details": "Only callable by operatorIndexes should be provided in decreasing order",
        "params": {
          "_indexes": "List of indexes to delete, in decreasing order",
          "_operatorIndex": "Operator Index"
        }
      },
      "setAdmin(address)": {
        "details": "Only callable by admin",
        "params": {
          "_newAdmin": "New Administrator address"
        }
      },
      "setCLFee(uint256)": {
        "params": {
          "_fee": "Fee in Basis Point"
        }
      },
      "setELFee(uint256)": {
        "params": {
          "_fee": "Fee in Basis Point"
        }
      },
      "setOperatorLimit(uint256,uint256)": {
        "details": "Only callable by admin",
        "params": {
          "_limit": "New staking limit",
          "_operatorIndex": "Operator Index"
        }
      },
      "setWithdrawer(bytes,address)": {
        "details": "Only callable by current public key withdrawer",
        "params": {
          "_newWithdrawer": "New withdrawer address",
          "_publicKey": "Public key to change withdrawer"
        }
      },
      "withdraw(bytes)": {
        "details": "Reverts if any is null",
        "params": {
          "_publicKey": "Validator to withdraw Execution and Consensus Layer Fees from"
        }
      },
      "withdrawCLFee(bytes)": {
        "details": "Funds are sent to the withdrawer accountThis method is public on purpose",
        "params": {
          "_publicKey": "Validator to withdraw Consensus Layer Fees from"
        }
      },
      "withdrawELFee(bytes)": {
        "details": "Funds are sent to the withdrawer accountThis method is public on purpose",
        "params": {
          "_publicKey": "Validator to withdraw Execution Layer Fees from"
        }
      }
    },
    "title": "Ethereum Staking Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addOperator(address)": {
        "notice": "Add new operator"
      },
      "addValidators(uint256,uint256,bytes,bytes)": {
        "notice": "Add new validator public keys and signatures"
      },
      "deposit(address)": {
        "notice": "Explicit deposit method"
      },
      "getAdmin()": {
        "notice": "Retrieve system admin"
      },
      "getAvailableValidatorCount()": {
        "notice": "Get the total available keys that are redy to be used for deposits"
      },
      "getCLFee()": {
        "notice": "Retrieve the Consensus Layer Fee taken by the node operator"
      },
      "getCLFeeRecipient(bytes)": {
        "notice": "Compute the Consensus Layer Fee recipient address for a given validator public key"
      },
      "getELFee()": {
        "notice": "Retrieve the Execution Layer Fee taken by the node operator"
      },
      "getELFeeRecipient(bytes)": {
        "notice": "Compute the Execution Layer Fee recipient address for a given validator public key"
      },
      "getFeeTreasury(bytes32)": {
        "notice": "Retrieve the Execution & Consensus Layer Fee operator recipient for a given public key"
      },
      "getOperator(uint256)": {
        "notice": "Retrieve operator details"
      },
      "getValidator(uint256,uint256)": {
        "notice": "Get details about a validator"
      },
      "getWithdrawer(bytes)": {
        "notice": "Retrieve withdrawer of public key"
      },
      "getWithdrawerFromPublicKeyRoot(bytes32)": {
        "notice": "Retrieve withdrawer of public key root"
      },
      "initialize_1(address,address,address,address,uint256,uint256)": {
        "notice": "Initializes version 1 of Staking Contract"
      },
      "removeValidators(uint256,uint256[])": {
        "notice": "Remove unfunded validators"
      },
      "setAdmin(address)": {
        "notice": "Set new admin"
      },
      "setCLFee(uint256)": {
        "notice": "Change the Consensus Layer Fee taken by the node operator"
      },
      "setELFee(uint256)": {
        "notice": "Change the Execution Layer Fee taken by the node operator"
      },
      "setOperatorLimit(uint256,uint256)": {
        "notice": "Set operator staking limits"
      },
      "setWithdrawer(bytes,address)": {
        "notice": "Set withdrawer for public key"
      },
      "withdraw(bytes)": {
        "notice": "Withdraw both Consensus and Execution Layer Fee for a given validator public key"
      },
      "withdrawCLFee(bytes)": {
        "notice": "Withdraw the Consensus Layer Fee for a given validator public key"
      },
      "withdrawELFee(bytes)": {
        "notice": "Withdraw the Execution Layer Fee for a given validator public key"
      }
    },
    "notice": "You can use this contract to store validator keys and have users fund them and trigger deposits.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}