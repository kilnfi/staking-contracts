{
  "address": "0x1575418a685Af286dEBbCCe78078B187bD6E4848",
  "abi": [
    {
      "inputs": [],
      "name": "AlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DepositFailure",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FundedValidatorDeletionAttempt",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidArgument",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidMessageValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPublicKeys",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSignatures",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughKeys",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnsortedIndexes",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "publicKeyRoot",
          "type": "bytes32"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "DEPOSIT_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PUBLIC_KEY_LENGTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SIGNATURE_LENGTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_withdrawer",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundedValidatorsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOperator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_idx",
          "type": "uint256"
        }
      ],
      "name": "getValidator",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "funded",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_publicKey",
          "type": "bytes"
        }
      ],
      "name": "getWithdrawer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_depositContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_withdrawalCredentials",
          "type": "bytes32"
        }
      ],
      "name": "initialize_1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "keyCount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "publicKeys",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signatures",
          "type": "bytes"
        }
      ],
      "name": "registerValidators",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_indexes",
          "type": "uint256[]"
        }
      ],
      "name": "removeValidators",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOperator",
          "type": "address"
        }
      ],
      "name": "setOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_publicKey",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_newWithdrawer",
          "type": "address"
        }
      ],
      "name": "setWithdrawer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValidatorCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa6220acc64ed568aa58d7ae5854c6c84213f8dad4d2c2aa130762a0c876ab3b7",
  "receipt": {
    "to": null,
    "from": "0x92D7d6DADe15fcF369534cEb8CD1A27f97185ab3",
    "contractAddress": "0x1575418a685Af286dEBbCCe78078B187bD6E4848",
    "transactionIndex": 15,
    "gasUsed": "2657417",
    "logsBloom": "0x
    "blockHash": "0xa7cfa08a279d5a90c6955ce104e8a7e44dd4582e6081d7f40b931528e2bfd58a",
    "transactionHash": "0xa6220acc64ed568aa58d7ae5854c6c84213f8dad4d2c2aa130762a0c876ab3b7",
    "logs": [],
    "blockNumber": 6662815,
    "cumulativeGasUsed": "4716769",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "129976638230ba94a2fa995df21988e9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositFailure\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundedValidatorDeletionAttempt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArgument\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMessageValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPublicKeys\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignatures\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughKeys\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsortedIndexes\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"publicKeyRoot\",\"type\":\"bytes32\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DEPOSIT_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_KEY_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIGNATURE_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_withdrawer\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundedValidatorsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"getValidator\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"funded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"getWithdrawer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_depositContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_withdrawalCredentials\",\"type\":\"bytes32\"}],\"name\":\"initialize_1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"keyCount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"publicKeys\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"}],\"name\":\"registerValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_indexes\",\"type\":\"uint256[]\"}],\"name\":\"removeValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOperator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_newWithdrawer\",\"type\":\"address\"}],\"name\":\"setWithdrawer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValidatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"SkillZ\",\"kind\":\"dev\",\"methods\":{\"deposit(address)\":{\"details\":\"A multiple of 32 ETH should be sent\",\"params\":{\"_withdrawer\":\"The withdrawer address\"}},\"getValidator(uint256)\":{\"params\":{\"_idx\":\"Index of the validator\"}},\"getWithdrawer(bytes)\":{\"params\":{\"_publicKey\":\"Public Key to retrieve the withdrawer\"}},\"initialize_1(address,address,address,bytes32)\":{\"params\":{\"_admin\":\"Address of the admin allowed to change the operator and admin\",\"_depositContract\":\"Address of the Deposit Contract\",\"_operator\":\"Address of the operator allowed to add/remove keys\",\"_withdrawalCredentials\":\"Withdrawal Credentials to apply to all provided keys upon deposit\"}},\"registerValidators(uint256,bytes,bytes)\":{\"details\":\"Only the operator or the admin are allowed to call this methodpublickKeys is the concatenation of keyCount public keyssignatures is the concatenation of keyCount signatures\",\"params\":{\"keyCount\":\"The expected number of keys from publicKeys and signatures\",\"publicKeys\":\"Concatenated public keys\",\"signatures\":\"Concatenated signatures\"}},\"removeValidators(uint256[])\":{\"details\":\"Only the operator or the admin are allowed to call this methodThe indexes to delete should all be greater than the amount of funded validatorsThe indexes to delete should be sorted in descending order or the method will fail\",\"params\":{\"_indexes\":\"The indexes to delete\"}},\"setAdmin(address)\":{\"details\":\"Only the admin is allowed to call this method\",\"params\":{\"_newAdmin\":\"New Admin address\"}},\"setOperator(address)\":{\"details\":\"Only the admin or the operator are allowed to call this method\",\"params\":{\"_newOperator\":\"New Operator address\"}},\"setWithdrawer(bytes,address)\":{\"details\":\"Only the previous withdrawer of the public key can change the withdrawer\",\"params\":{\"_newWithdrawer\":\"The new withdrawer address\",\"_publicKey\":\"The public key to change\"}}},\"title\":\"Ethereum Staking Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deposit(address)\":{\"notice\":\"Explicit deposit method\"},\"fundedValidatorsCount()\":{\"notice\":\"Retrieve the amount of funded validators\"},\"getAdmin()\":{\"notice\":\"Retrieve the admin address\"},\"getOperator()\":{\"notice\":\"Retrieve the operator address\"},\"getValidator(uint256)\":{\"notice\":\"Retrieve the details of a validator\"},\"getWithdrawer(bytes)\":{\"notice\":\"Retrieve the withdrawer for a specific public key\"},\"initialize_1(address,address,address,bytes32)\":{\"notice\":\"Initializes version 1 of Staking Contract\"},\"registerValidators(uint256,bytes,bytes)\":{\"notice\":\"Register new validators\"},\"removeValidators(uint256[])\":{\"notice\":\"Remove validators\"},\"setAdmin(address)\":{\"notice\":\"Change the admin address\"},\"setOperator(address)\":{\"notice\":\"Change the operator address\"},\"setWithdrawer(bytes,address)\":{\"notice\":\"Change the withdrawer for a specific public key\"},\"totalValidatorCount()\":{\"notice\":\"Retrieve the amount of registered validators (funded + not yet funded)\"}},\"notice\":\"You can use this contract to store validator keys and have users fund them and trigger deposits.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/StakingContract.sol\":\"StakingContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/contracts/StakingContract.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.10;\\n\\nimport \\\"./libs/StateLib.sol\\\";\\nimport \\\"./libs/UintLib.sol\\\";\\nimport \\\"./libs/BytesLib.sol\\\";\\n\\nimport \\\"./interfaces/IDepositContract.sol\\\";\\n\\n/// @title Ethereum Staking Contract\\n/// @author SkillZ\\n/// @notice You can use this contract to store validator keys and have users fund them and trigger deposits.\\ncontract StakingContract {\\n    using StateLib for bytes32;\\n\\n    bytes32 internal constant ADMIN_SLOT =\\n        /* keccak256(\\\"StakingContract.admin\\\") */\\n        hex\\\"fbeda9bc03875013b12a1ec161efb8e5bf7e58e3cec96a1ea9efd3e264d26e64\\\";\\n    bytes32 internal constant VERSION_SLOT =\\n        /* keccak256(\\\"StakingContract.version\\\") */\\n        hex\\\"d5c553085b8382c47128ae7612257fd5dc3b4fc4d3a108925604d3c8700c025b\\\";\\n    bytes32 internal constant OPERATOR_SLOT =\\n        /* keccak256(\\\"StakingContract.operator\\\") */\\n        hex\\\"dfe7334ae89a4aa54c085540947bfa7e13e6b6933be4c49f359d18e88c0dbde5\\\";\\n    bytes32 internal constant SIGNATURES_SLOT =\\n        /* keccak256(\\\"StakingContract.signatures\\\") */\\n        hex\\\"2805e4a7c8c139ac2ebe63141d90c488245fd479906b2c60bd42603b8a2ca08b\\\";\\n    bytes32 internal constant PUBLIC_KEYS_SLOT =\\n        /* keccak256(\\\"StakingContract.publicKeys\\\") */\\n        hex\\\"cc0b8384259c4a4e6418cdc72955757e9214822019f44d8b5283077c1b46d43c\\\";\\n    bytes32 internal constant WITHDRAWERS_SLOT =\\n        /* keccak256(\\\"StakingContract.withdrawers\\\") */\\n        hex\\\"86647fdbbdb534026d3e0f93a551cecf651c2b40fcdfef4b9fd9ed826133e265\\\";\\n    bytes32 internal constant VALIDATORS_COUNT_SLOT =\\n        /* keccak256(\\\"StakingContract.validatorsCount\\\") */\\n        hex\\\"e9622dd0bba60226e1dbc661ca8aae56cc90dc7e9b3f33ece002f6764b3801b8\\\";\\n    bytes32 internal constant DEPOSIT_CONTRACT_SLOT =\\n        /* keccak256(\\\"StakingContract.depositContract\\\") */\\n        hex\\\"bc8b9852d17d50256bb221fdf6ee12d78dd493d807e907f7d223c40d65abd6b9\\\";\\n    bytes32 internal constant WITHDRAWAL_CREDENTIALS_SLOT =\\n        /* keccak256(\\\"StakingContract.withdrawalCredentials\\\") */\\n        hex\\\"2783da738595cd6ebaec6fd0f06d62f2266a9e475e2d1feb1d26aa2d1e051255\\\";\\n\\n    uint256 public constant SIGNATURE_LENGTH = 96;\\n    uint256 public constant PUBLIC_KEY_LENGTH = 48;\\n    uint256 public constant DEPOSIT_SIZE = 32 ether;\\n\\n    error InvalidCall();\\n    error Unauthorized();\\n    error NotEnoughKeys();\\n    error DepositFailure();\\n    error InvalidArgument();\\n    error UnsortedIndexes();\\n    error InvalidPublicKeys();\\n    error InvalidSignatures();\\n    error AlreadyInitialized();\\n    error InvalidMessageValue();\\n    error FundedValidatorDeletionAttempt();\\n\\n    event Deposit(address indexed caller, address indexed withdrawer, bytes publicKey, bytes32 publicKeyRoot);\\n\\n    /// @notice Ensures an initialisation call has been called only once per _version value\\n    /// @param _version The current initialisation value\\n    modifier init(uint256 _version) {\\n        if (_version != VERSION_SLOT.getUint256() + 1) {\\n            revert AlreadyInitialized();\\n        }\\n\\n        VERSION_SLOT.setUint256(_version);\\n\\n        _;\\n    }\\n\\n    /// @notice Ensures that the caller is the operator\\n    modifier onlyOperator() {\\n        if (msg.sender != OPERATOR_SLOT.getAddress()) {\\n            revert Unauthorized();\\n        }\\n\\n        _;\\n    }\\n\\n    /// @notice Ensures that the caller is the admin\\n    modifier onlyAdmin() {\\n        if (msg.sender != ADMIN_SLOT.getAddress()) {\\n            revert Unauthorized();\\n        }\\n\\n        _;\\n    }\\n\\n    /// @notice Ensures that the caller is the operator or the admin\\n    modifier onlyAdminOrOperator() {\\n        if (msg.sender != ADMIN_SLOT.getAddress() && msg.sender != OPERATOR_SLOT.getAddress()) {\\n            revert Unauthorized();\\n        }\\n\\n        _;\\n    }\\n\\n    /// @notice Initializes version 1 of Staking Contract\\n    /// @param _operator Address of the operator allowed to add/remove keys\\n    /// @param _admin Address of the admin allowed to change the operator and admin\\n    /// @param _depositContract Address of the Deposit Contract\\n    /// @param _withdrawalCredentials Withdrawal Credentials to apply to all provided keys upon deposit\\n    function initialize_1(\\n        address _operator,\\n        address _admin,\\n        address _depositContract,\\n        bytes32 _withdrawalCredentials\\n    ) external init(1) {\\n        OPERATOR_SLOT.setAddress(_operator);\\n        DEPOSIT_CONTRACT_SLOT.setAddress(_depositContract);\\n        WITHDRAWAL_CREDENTIALS_SLOT.setBytes32(_withdrawalCredentials);\\n        ADMIN_SLOT.setAddress(_admin);\\n    }\\n\\n    /// @notice Retrieve the admin address\\n    function getAdmin() external view returns (address) {\\n        return ADMIN_SLOT.getAddress();\\n    }\\n\\n    /// @notice Retrieve the operator address\\n    function getOperator() external view returns (address) {\\n        return OPERATOR_SLOT.getAddress();\\n    }\\n\\n    /// @notice Retrieve the withdrawer for a specific public key\\n    /// @param _publicKey Public Key to retrieve the withdrawer\\n    function getWithdrawer(bytes memory _publicKey) external view returns (address) {\\n        bytes32 pubkeyRoot = sha256(BytesLib.pad64(_publicKey));\\n        StateLib.Bytes32ToAddressMappingSlot storage publicKeyOwnership = WITHDRAWERS_SLOT\\n            .getStorageBytes32ToAddressMapping();\\n        return publicKeyOwnership.value[pubkeyRoot];\\n    }\\n\\n    /// @notice Retrieve the amount of funded validators\\n    function fundedValidatorsCount() external view returns (uint256) {\\n        return VALIDATORS_COUNT_SLOT.getUint256();\\n    }\\n\\n    /// @notice Retrieve the amount of registered validators (funded + not yet funded)\\n    function totalValidatorCount() external view returns (uint256) {\\n        return PUBLIC_KEYS_SLOT.getStorageBytesArray().value.length;\\n    }\\n\\n    /// @notice Retrieve the details of a validator\\n    /// @param _idx Index of the validator\\n    function getValidator(uint256 _idx)\\n        external\\n        view\\n        returns (\\n            bytes memory publicKey,\\n            bytes memory signature,\\n            address withdrawer,\\n            bool funded\\n        )\\n    {\\n        StateLib.BytesArraySlot storage publicKeysStore = PUBLIC_KEYS_SLOT.getStorageBytesArray();\\n        StateLib.BytesArraySlot storage signaturesStore = SIGNATURES_SLOT.getStorageBytesArray();\\n        StateLib.Bytes32ToAddressMappingSlot storage withdrawers = WITHDRAWERS_SLOT.getStorageBytes32ToAddressMapping();\\n        uint256 validatorCount = VALIDATORS_COUNT_SLOT.getUint256();\\n\\n        publicKey = publicKeysStore.value[_idx];\\n        signature = signaturesStore.value[_idx];\\n        withdrawer = withdrawers.value[sha256(BytesLib.pad64(publicKey))];\\n        funded = _idx < validatorCount;\\n    }\\n\\n    /// @notice Change the admin address\\n    /// @dev Only the admin is allowed to call this method\\n    /// @param _newAdmin New Admin address\\n    function setAdmin(address _newAdmin) external onlyAdmin {\\n        ADMIN_SLOT.setAddress(_newAdmin);\\n    }\\n\\n    /// @notice Change the operator address\\n    /// @dev Only the admin or the operator are allowed to call this method\\n    /// @param _newOperator New Operator address\\n    function setOperator(address _newOperator) external onlyAdminOrOperator {\\n        OPERATOR_SLOT.setAddress(_newOperator);\\n    }\\n\\n    /// @notice Change the withdrawer for a specific public key\\n    /// @dev Only the previous withdrawer of the public key can change the withdrawer\\n    /// @param _publicKey The public key to change\\n    /// @param _newWithdrawer The new withdrawer address\\n    function setWithdrawer(bytes memory _publicKey, address _newWithdrawer) external {\\n        bytes32 pubkeyRoot = sha256(BytesLib.pad64(_publicKey));\\n        StateLib.Bytes32ToAddressMappingSlot storage publicKeyOwnership = WITHDRAWERS_SLOT\\n            .getStorageBytes32ToAddressMapping();\\n\\n        if (msg.sender != publicKeyOwnership.value[pubkeyRoot]) {\\n            revert Unauthorized();\\n        }\\n\\n        publicKeyOwnership.value[pubkeyRoot] = _newWithdrawer;\\n    }\\n\\n    /// @notice Explicit deposit method\\n    /// @dev A multiple of 32 ETH should be sent\\n    /// @param _withdrawer The withdrawer address\\n    function deposit(address _withdrawer) external payable {\\n        _deposit(_withdrawer);\\n    }\\n\\n    /// @notice Implicit deposit method\\n    /// @dev A multiple of 32 ETH should be sent\\n    /// @dev The withdrawer is set to the message sender address\\n    receive() external payable {\\n        _deposit(msg.sender);\\n    }\\n\\n    /// @notice Fallback detection\\n    /// @dev Fails on any call that fallbacks\\n    fallback() external payable {\\n        revert InvalidCall();\\n    }\\n\\n    /// @notice Register new validators\\n    /// @dev Only the operator or the admin are allowed to call this method\\n    /// @dev publickKeys is the concatenation of keyCount public keys\\n    /// @dev signatures is the concatenation of keyCount signatures\\n    /// @param keyCount The expected number of keys from publicKeys and signatures\\n    /// @param publicKeys Concatenated public keys\\n    /// @param signatures Concatenated signatures\\n    function registerValidators(\\n        uint256 keyCount,\\n        bytes calldata publicKeys,\\n        bytes calldata signatures\\n    ) external onlyAdminOrOperator {\\n        if (keyCount == 0) {\\n            revert InvalidArgument();\\n        }\\n\\n        if (publicKeys.length % PUBLIC_KEY_LENGTH != 0 || publicKeys.length / PUBLIC_KEY_LENGTH != keyCount) {\\n            revert InvalidPublicKeys();\\n        }\\n\\n        if (signatures.length % SIGNATURE_LENGTH != 0 || signatures.length / SIGNATURE_LENGTH != keyCount) {\\n            revert InvalidSignatures();\\n        }\\n\\n        StateLib.BytesArraySlot storage publicKeysStore = PUBLIC_KEYS_SLOT.getStorageBytesArray();\\n        StateLib.BytesArraySlot storage signaturesStore = SIGNATURES_SLOT.getStorageBytesArray();\\n\\n        for (uint256 i; i < keyCount; ) {\\n            bytes memory publicKey = BytesLib.slice(publicKeys, i * PUBLIC_KEY_LENGTH, PUBLIC_KEY_LENGTH);\\n            bytes memory signature = BytesLib.slice(signatures, i * SIGNATURE_LENGTH, SIGNATURE_LENGTH);\\n\\n            publicKeysStore.value.push(publicKey);\\n            signaturesStore.value.push(signature);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @notice Remove validators\\n    /// @dev Only the operator or the admin are allowed to call this method\\n    /// @dev The indexes to delete should all be greater than the amount of funded validators\\n    /// @dev The indexes to delete should be sorted in descending order or the method will fail\\n    /// @param _indexes The indexes to delete\\n    function removeValidators(uint256[] calldata _indexes) external onlyAdminOrOperator {\\n        if (_indexes.length == 0) {\\n            revert InvalidArgument();\\n        }\\n\\n        uint256 validatorsCount = VALIDATORS_COUNT_SLOT.getUint256();\\n        StateLib.BytesArraySlot storage publicKeysStore = PUBLIC_KEYS_SLOT.getStorageBytesArray();\\n        StateLib.BytesArraySlot storage signaturesStore = SIGNATURES_SLOT.getStorageBytesArray();\\n\\n        for (uint256 i; i < _indexes.length; ) {\\n            if (i > 0 && _indexes[i] >= _indexes[i - 1]) {\\n                revert UnsortedIndexes();\\n            }\\n\\n            if (_indexes[i] < validatorsCount) {\\n                revert FundedValidatorDeletionAttempt();\\n            }\\n\\n            if (_indexes[i] == publicKeysStore.value.length - 1) {\\n                publicKeysStore.value.pop();\\n                signaturesStore.value.pop();\\n            } else {\\n                publicKeysStore.value[_indexes[i]] = publicKeysStore.value[publicKeysStore.value.length - 1];\\n                publicKeysStore.value.pop();\\n                signaturesStore.value[_indexes[i]] = signaturesStore.value[signaturesStore.value.length - 1];\\n                signaturesStore.value.pop();\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @notice Internal utility to deposit a public key, its signature and 32 ETH to the consensus layer\\n    /// @param _publicKey The Public Key to deposit\\n    /// @param _signature The Signature to deposit\\n    /// @param _withdrawalCredentials The Withdrawal Credentials to deposit\\n    function _depositValidator(\\n        bytes memory _publicKey,\\n        bytes memory _signature,\\n        bytes32 _withdrawalCredentials\\n    ) internal {\\n        bytes32 pubkeyRoot = sha256(BytesLib.pad64(_publicKey));\\n        bytes32 signatureRoot = sha256(\\n            abi.encodePacked(\\n                sha256(BytesLib.slice(_signature, 0, 64)),\\n                sha256(BytesLib.pad64(BytesLib.slice(_signature, 64, SIGNATURE_LENGTH - 64)))\\n            )\\n        );\\n\\n        uint256 depositAmount = DEPOSIT_SIZE / 1000000000 wei;\\n        assert(depositAmount * 1000000000 wei == DEPOSIT_SIZE);\\n\\n        bytes32 depositDataRoot = sha256(\\n            abi.encodePacked(\\n                sha256(abi.encodePacked(pubkeyRoot, _withdrawalCredentials)),\\n                sha256(abi.encodePacked(Uint256Lib.toLittleEndian64(depositAmount), signatureRoot))\\n            )\\n        );\\n\\n        uint256 targetBalance = address(this).balance - DEPOSIT_SIZE;\\n\\n        IDepositContract(DEPOSIT_CONTRACT_SLOT.getAddress()).deposit{value: DEPOSIT_SIZE}(\\n            _publicKey,\\n            abi.encodePacked(_withdrawalCredentials),\\n            _signature,\\n            depositDataRoot\\n        );\\n\\n        if (address(this).balance != targetBalance) {\\n            revert DepositFailure();\\n        }\\n    }\\n\\n    /// @notice Perform one or multiple deposits for the same withdrawer\\n    /// @param _withdrawer Address allowed to withdraw the funds of the deposits\\n    function _deposit(address _withdrawer) internal {\\n        if (msg.value == 0 || msg.value % DEPOSIT_SIZE != 0) {\\n            revert InvalidMessageValue();\\n        }\\n\\n        uint256 depositCount = msg.value / DEPOSIT_SIZE;\\n        uint256 validatorCount = VALIDATORS_COUNT_SLOT.getUint256();\\n        StateLib.BytesArraySlot storage publicKeysStore = PUBLIC_KEYS_SLOT.getStorageBytesArray();\\n        StateLib.BytesArraySlot storage signaturesStore = SIGNATURES_SLOT.getStorageBytesArray();\\n        bytes32 withdrawalCredentials = WITHDRAWAL_CREDENTIALS_SLOT.getBytes32();\\n\\n        if (validatorCount + depositCount > publicKeysStore.value.length) {\\n            revert NotEnoughKeys();\\n        }\\n\\n        StateLib.Bytes32ToAddressMappingSlot storage publicKeyOwnership = WITHDRAWERS_SLOT\\n            .getStorageBytes32ToAddressMapping();\\n\\n        for (uint256 i; i < depositCount; ) {\\n            bytes memory publicKey = publicKeysStore.value[validatorCount + i];\\n            bytes32 publicKeyRoot = sha256(BytesLib.pad64(publicKey));\\n            _depositValidator(publicKey, signaturesStore.value[validatorCount + i], withdrawalCredentials);\\n            publicKeyOwnership.value[publicKeyRoot] = _withdrawer;\\n            emit Deposit(msg.sender, _withdrawer, publicKey, publicKeyRoot);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        VALIDATORS_COUNT_SLOT.setUint256(validatorCount + depositCount);\\n    }\\n}\\n\",\"keccak256\":\"0xb2cc693fb57c8eaf5fc107c94901a28128ec3f18446401ac0612d921d582c480\",\"license\":\"BUSL-1.1\"},\"src/contracts/interfaces/IDepositContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10;\\n\\ninterface IDepositContract {\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawalCredentials,\\n        bytes calldata signature,\\n        bytes32 depositDataRoot\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x10ced526f2842c879ff63bf37a47d121d56898609456f98df1f3cff0a768b2c9\",\"license\":\"MIT\"},\"src/contracts/libs/BytesLib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10;\\n\\nlibrary BytesLib {\\n    function pad64(bytes memory _b) internal pure returns (bytes memory) {\\n        assert(_b.length >= 32 && _b.length <= 64);\\n        if (64 == _b.length) return _b;\\n\\n        bytes memory zero32 = new bytes(32);\\n        assembly {\\n            mstore(add(zero32, 0x20), 0)\\n        }\\n\\n        if (32 == _b.length) return BytesLib.concat(_b, zero32);\\n        else return BytesLib.concat(_b, BytesLib.slice(zero32, 0, uint256(64) - _b.length));\\n    }\\n\\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(\\n                0x40,\\n                and(\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                    not(31) // Round down to the nearest 32 bytes.\\n                )\\n            )\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n}\\n\",\"keccak256\":\"0xec149de15f8150999a1881930747f7bc75138b84123e0547d1b4074ef0aef5cd\",\"license\":\"MIT\"},\"src/contracts/libs/StateLib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10;\\n\\nlibrary StateLib {\\n    function getUint256(bytes32 position) internal view returns (uint256 data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function setUint256(bytes32 position, uint256 data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function getAddress(bytes32 position) internal view returns (address data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function setAddress(bytes32 position, address data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function getBytes32(bytes32 position) internal view returns (bytes32 data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function setBytes32(bytes32 position, bytes32 data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    struct Bytes32ToAddressMappingSlot {\\n        mapping(bytes32 => address) value;\\n    }\\n\\n    function getStorageBytes32ToAddressMapping(bytes32 position)\\n        internal\\n        pure\\n        returns (Bytes32ToAddressMappingSlot storage r)\\n    {\\n        assembly {\\n            r.slot := position\\n        }\\n    }\\n\\n    struct BytesArraySlot {\\n        bytes[] value;\\n    }\\n\\n    function getStorageBytesArray(bytes32 position) internal pure returns (BytesArraySlot storage r) {\\n        assembly {\\n            r.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7323b811960a60ddeceba135424559505dddd818df281ac1f87e81ee236f01f0\",\"license\":\"MIT\"},\"src/contracts/libs/UintLib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10;\\n\\nlibrary Uint256Lib {\\n    function toLittleEndian64(uint256 _value) internal pure returns (uint256 result) {\\n        result = 0;\\n        uint256 temp_value = _value;\\n        for (uint256 i = 0; i < 8; ++i) {\\n            result = (result << 8) | (temp_value & 0xFF);\\n            temp_value >>= 8;\\n        }\\n\\n        assert(0 == temp_value); // fully converted\\n        result <<= (24 * 8);\\n    }\\n}\\n\",\"keccak256\":\"0x452fa01e7c7dbf60df6d9d12f79645183d66f5a8ca3d673742eb4960a1952b73\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612f47806100206000396000f3fe6080604052600436106100f75760003560e01c80637bb7f3571161008a578063e00cb6ca11610059578063e00cb6ca14610348578063e7f43c6814610385578063e99454f5146103b0578063f340fa01146103d957610107565b80637bb7f35714610289578063b3ab15fb146102b4578063b5d89627146102dd578063bf15af561461031d57610107565b80634b630319116100c65780634b630319146101e1578063540bc5ea1461020a5780636e9960c314610235578063704b6c021461026057610107565b80631bea6725146101395780632ec590c414610162578063304f99c81461018b57806336bf3325146101b657610107565b3661010757610105336103f5565b005b6040517fae962d4e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34801561014557600080fd5b50610160600480360381019061015b91906123af565b610883565b005b34801561016e57600080fd5b506101896004803603810190610184919061249a565b610c2e565b005b34801561019757600080fd5b506101a06110e3565b6040516101ad91906124f6565b60405180910390f35b3480156101c257600080fd5b506101cb61111a565b6040516101d891906124f6565b60405180910390f35b3480156101ed57600080fd5b50610208600480360381019061020391906125a5565b611127565b005b34801561021657600080fd5b5061021f61129b565b60405161022c91906124f6565b60405180910390f35b34801561024157600080fd5b5061024a6112a0565b604051610257919061261b565b60405180910390f35b34801561026c57600080fd5b5061028760048036038101906102829190612636565b6112d0565b005b34801561029557600080fd5b5061029e611393565b6040516102ab91906124f6565b60405180910390f35b3480156102c057600080fd5b506102db60048036038101906102d69190612636565b6113c3565b005b3480156102e957600080fd5b5061030460048036038101906102ff9190612663565b6114e8565b6040516103149493929190612744565b60405180910390f35b34801561032957600080fd5b50610332611797565b60405161033f91906124f6565b60405180910390f35b34801561035457600080fd5b5061036f600480360381019061036a91906128c7565b61179c565b60405161037c919061261b565b60405180910390f35b34801561039157600080fd5b5061039a611865565b6040516103a7919061261b565b60405180910390f35b3480156103bc57600080fd5b506103d760048036038101906103d29190612910565b611895565b005b6103f360048036038101906103ee9190612636565b611a12565b005b6000341480610419575060006801bc16d674ec80000034610416919061299b565b14155b15610450576040517fd5e6876b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006801bc16d674ec8000003461046791906129fb565b905060006104947fe9622dd0bba60226e1dbc661ca8aae56cc90dc7e9b3f33ece002f6764b3801b8611a1e565b905060006104c17fcc0b8384259c4a4e6418cdc72955757e9214822019f44d8b5283077c1b46d43c611a29565b905060006104ee7f2805e4a7c8c139ac2ebe63141d90c488245fd479906b2c60bd42603b8a2ca08b611a29565b9050600061051b7f2783da738595cd6ebaec6fd0f06d62f2266a9e475e2d1feb1d26aa2d1e051255611a33565b9050826000018054905085856105319190612a2c565b1115610569576040517f2f27a95400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006105947f86647fdbbdb534026d3e0f93a551cecf651c2b40fcdfef4b9fd9ed826133e265611a3e565b905060005b8681101561083b5760008560000182886105b39190612a2c565b815481106105c4576105c3612a82565b5b9060005260206000200180546105d990612ae0565b80601f016020809104026020016040519081016040528092919081815260200182805461060590612ae0565b80156106525780601f1061062757610100808354040283529160200191610652565b820191906000526020600020905b81548152906001019060200180831161063557829003601f168201915b505050505090506000600261066683611a48565b6040516106739190612b4d565b602060405180830381855afa158015610690573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906106b39190612b79565b90506107738287600001858b6106c99190612a2c565b815481106106da576106d9612a82565b5b9060005260206000200180546106ef90612ae0565b80601f016020809104026020016040519081016040528092919081815260200182805461071b90612ae0565b80156107685780601f1061073d57610100808354040283529160200191610768565b820191906000526020600020905b81548152906001019060200180831161074b57829003601f168201915b505050505087611b1b565b8984600001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508973ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f881413a504838591eb119e81d4d4e3ce0f6e9b4988dd7bd6c194e53c343c20008484604051610826929190612bb5565b60405180910390a38260010192505050610599565b5061087a868661084b9190612a2c565b7fe9622dd0bba60226e1dbc661ca8aae56cc90dc7e9b3f33ece002f6764b3801b8611f7390919063ffffffff16565b50505050505050565b6108ac7ffbeda9bc03875013b12a1ec161efb8e5bf7e58e3cec96a1ea9efd3e264d26e64611f7a565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415801561093b575061090b7fdfe7334ae89a4aa54c085540947bfa7e13e6b6933be4c49f359d18e88c0dbde5611f7a565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15610972576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600085036109ac576040517fa9cb9e0d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006030858590506109be919061299b565b1415806109da5750846030858590506109d791906129fb565b14155b15610a11576040517f337d0f4100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000606083839050610a23919061299b565b141580610a3f575084606083839050610a3c91906129fb565b14155b15610a76576040517f274cf40100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610aa17fcc0b8384259c4a4e6418cdc72955757e9214822019f44d8b5283077c1b46d43c611a29565b90506000610ace7f2805e4a7c8c139ac2ebe63141d90c488245fd479906b2c60bd42603b8a2ca08b611a29565b905060005b87811015610c24576000610b3988888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050603084610b329190612be5565b6030611f85565b90506000610b9987878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050606085610b929190612be5565b6060611f85565b90508460000182908060018154018082558091505060019003906000526020600020016000909190919091509080519060200190610bd8929190612190565b508360000181908060018154018082558091505060019003906000526020600020016000909190919091509080519060200190610c16929190612190565b508260010192505050610ad3565b5050505050505050565b610c577ffbeda9bc03875013b12a1ec161efb8e5bf7e58e3cec96a1ea9efd3e264d26e64611f7a565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614158015610ce65750610cb67fdfe7334ae89a4aa54c085540947bfa7e13e6b6933be4c49f359d18e88c0dbde5611f7a565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15610d1d576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008282905003610d5a576040517fa9cb9e0d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610d857fe9622dd0bba60226e1dbc661ca8aae56cc90dc7e9b3f33ece002f6764b3801b8611a1e565b90506000610db27fcc0b8384259c4a4e6418cdc72955757e9214822019f44d8b5283077c1b46d43c611a29565b90506000610ddf7f2805e4a7c8c139ac2ebe63141d90c488245fd479906b2c60bd42603b8a2ca08b611a29565b905060005b858590508110156110db57600081118015610e3d57508585600183610e099190612c3f565b818110610e1957610e18612a82565b5b90506020020135868683818110610e3357610e32612a82565b5b9050602002013510155b15610e74576040517f35061dff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83868683818110610e8857610e87612a82565b5b905060200201351015610ec7576040517f34947ea100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018360000180549050610edb9190612c3f565b868683818110610eee57610eed612a82565b5b9050602002013503610f635782600001805480610f0e57610f0d612c73565b5b600190038181906000526020600020016000610f2a9190612216565b905581600001805480610f4057610f3f612c73565b5b600190038181906000526020600020016000610f5c9190612216565b90556110d0565b8260000160018460000180549050610f7b9190612c3f565b81548110610f8c57610f8b612a82565b5b9060005260206000200183600001878784818110610fad57610fac612a82565b5b9050602002013581548110610fc557610fc4612a82565b5b90600052602060002001908054610fdb90612ae0565b610fe6929190612256565b5082600001805480610ffb57610ffa612c73565b5b6001900381819060005260206000200160006110179190612216565b905581600001600183600001805490506110319190612c3f565b8154811061104257611041612a82565b5b906000526020600020018260000187878481811061106357611062612a82565b5b905060200201358154811061107b5761107a612a82565b5b9060005260206000200190805461109190612ae0565b61109c929190612256565b50816000018054806110b1576110b0612c73565b5b6001900381819060005260206000200160006110cd9190612216565b90555b806001019050610de4565b505050505050565b600061110e7fcc0b8384259c4a4e6418cdc72955757e9214822019f44d8b5283077c1b46d43c611a29565b60000180549050905090565b6801bc16d674ec80000081565b6001806111537fd5c553085b8382c47128ae7612257fd5dc3b4fc4d3a108925604d3c8700c025b611a1e565b61115d9190612a2c565b8114611195576040517f0dc149f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6111c8817fd5c553085b8382c47128ae7612257fd5dc3b4fc4d3a108925604d3c8700c025b611f7390919063ffffffff16565b6111fb857fdfe7334ae89a4aa54c085540947bfa7e13e6b6933be4c49f359d18e88c0dbde56120a390919063ffffffff16565b61122e837fbc8b9852d17d50256bb221fdf6ee12d78dd493d807e907f7d223c40d65abd6b96120a390919063ffffffff16565b611261827f2783da738595cd6ebaec6fd0f06d62f2266a9e475e2d1feb1d26aa2d1e0512556120aa90919063ffffffff16565b611294847ffbeda9bc03875013b12a1ec161efb8e5bf7e58e3cec96a1ea9efd3e264d26e646120a390919063ffffffff16565b5050505050565b606081565b60006112cb7ffbeda9bc03875013b12a1ec161efb8e5bf7e58e3cec96a1ea9efd3e264d26e64611f7a565b905090565b6112f97ffbeda9bc03875013b12a1ec161efb8e5bf7e58e3cec96a1ea9efd3e264d26e64611f7a565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461135d576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611390817ffbeda9bc03875013b12a1ec161efb8e5bf7e58e3cec96a1ea9efd3e264d26e646120a390919063ffffffff16565b50565b60006113be7fe9622dd0bba60226e1dbc661ca8aae56cc90dc7e9b3f33ece002f6764b3801b8611a1e565b905090565b6113ec7ffbeda9bc03875013b12a1ec161efb8e5bf7e58e3cec96a1ea9efd3e264d26e64611f7a565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415801561147b575061144b7fdfe7334ae89a4aa54c085540947bfa7e13e6b6933be4c49f359d18e88c0dbde5611f7a565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b156114b2576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6114e5817fdfe7334ae89a4aa54c085540947bfa7e13e6b6933be4c49f359d18e88c0dbde56120a390919063ffffffff16565b50565b60608060008060006115197fcc0b8384259c4a4e6418cdc72955757e9214822019f44d8b5283077c1b46d43c611a29565b905060006115467f2805e4a7c8c139ac2ebe63141d90c488245fd479906b2c60bd42603b8a2ca08b611a29565b905060006115737f86647fdbbdb534026d3e0f93a551cecf651c2b40fcdfef4b9fd9ed826133e265611a3e565b905060006115a07fe9622dd0bba60226e1dbc661ca8aae56cc90dc7e9b3f33ece002f6764b3801b8611a1e565b90508360000189815481106115b8576115b7612a82565b5b9060005260206000200180546115cd90612ae0565b80601f01602080910402602001604051908101604052809291908181526020018280546115f990612ae0565b80156116465780601f1061161b57610100808354040283529160200191611646565b820191906000526020600020905b81548152906001019060200180831161162957829003601f168201915b5050505050975082600001898154811061166357611662612a82565b5b90600052602060002001805461167890612ae0565b80601f01602080910402602001604051908101604052809291908181526020018280546116a490612ae0565b80156116f15780601f106116c6576101008083540402835291602001916116f1565b820191906000526020600020905b8154815290600101906020018083116116d457829003601f168201915b5050505050965081600001600060026117098b611a48565b6040516117169190612b4d565b602060405180830381855afa158015611733573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906117569190612b79565b815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1695508089109450505050509193509193565b603081565b60008060026117aa84611a48565b6040516117b79190612b4d565b602060405180830381855afa1580156117d4573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906117f79190612b79565b905060006118247f86647fdbbdb534026d3e0f93a551cecf651c2b40fcdfef4b9fd9ed826133e265611a3e565b905080600001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1692505050919050565b60006118907fdfe7334ae89a4aa54c085540947bfa7e13e6b6933be4c49f359d18e88c0dbde5611f7a565b905090565b600060026118a284611a48565b6040516118af9190612b4d565b602060405180830381855afa1580156118cc573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906118ef9190612b79565b9050600061191c7f86647fdbbdb534026d3e0f93a551cecf651c2b40fcdfef4b9fd9ed826133e265611a3e565b905080600001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146119b8576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8281600001600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b611a1b816103f5565b50565b600081549050919050565b6000819050919050565b600081549050919050565b6000819050919050565b60606020825110158015611a5e57506040825111155b611a6b57611a6a612ca2565b5b8151604003611a7c57819050611b16565b6000602067ffffffffffffffff811115611a9957611a9861279c565b5b6040519080825280601f01601f191660200182016040528015611acb5781602001600182028036833780820191505090505b509050600060208201528251602003611af057611ae883826120b1565b915050611b16565b611b1283611b0d83600087516040611b089190612c3f565b611f85565b6120b1565b9150505b919050565b60006002611b2885611a48565b604051611b359190612b4d565b602060405180830381855afa158015611b52573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611b759190612b79565b90506000600280611b898660006040611f85565b604051611b969190612b4d565b602060405180830381855afa158015611bb3573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611bd69190612b79565b6002611bf8611bf3886040806060611bee9190612c3f565b611f85565b611a48565b604051611c059190612b4d565b602060405180830381855afa158015611c22573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611c459190612b79565b604051602001611c56929190612cf2565b604051602081830303815290604052604051611c729190612b4d565b602060405180830381855afa158015611c8f573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611cb29190612b79565b90506000633b9aca006801bc16d674ec800000611ccf91906129fb565b90506801bc16d674ec800000633b9aca0082611ceb9190612be5565b14611cf957611cf8612ca2565b5b60006002808587604051602001611d11929190612cf2565b604051602081830303815290604052604051611d2d9190612b4d565b602060405180830381855afa158015611d4a573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611d6d9190612b79565b6002611d788561213b565b86604051602001611d8a929190612d3f565b604051602081830303815290604052604051611da69190612b4d565b602060405180830381855afa158015611dc3573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611de69190612b79565b604051602001611df7929190612cf2565b604051602081830303815290604052604051611e139190612b4d565b602060405180830381855afa158015611e30573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611e539190612b79565b905060006801bc16d674ec80000047611e6c9190612c3f565b9050611e977fbc8b9852d17d50256bb221fdf6ee12d78dd493d807e907f7d223c40d65abd6b9611f7a565b73ffffffffffffffffffffffffffffffffffffffff1663228951186801bc16d674ec8000008a89604051602001611ece9190612d6b565b6040516020818303038152906040528b876040518663ffffffff1660e01b8152600401611efe9493929190612d86565b6000604051808303818588803b158015611f1757600080fd5b505af1158015611f2b573d6000803e3d6000fd5b5050505050804714611f69576040517f6596d2b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050505050565b8082555050565b600081549050919050565b606081601f83611f959190612a2c565b1015611fd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fcd90612e3d565b60405180910390fd5b8183611fe29190612a2c565b84511015612025576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161201c90612ea9565b60405180910390fd5b60608215600081146120465760405191506000825260208201604052612097565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156120845780518352602083019250602081019050612067565b50868552601f19601f8301166040525050505b50809150509392505050565b8082555050565b8082555050565b6060806040519050835180825260208201818101602087015b818310156120e757805183526020830192506020810190506120ca565b50855192508351830184528091508282019050602086015b8183101561211c57805183526020830192506020810190506120ff565b50601f19601f8851850115830101166040525050508091505092915050565b60008082905060005b60088110156121715760ff8216600884901b179250600882901c91508061216a90612ec9565b9050612144565b508060001461218357612182612ca2565b5b60c082901b915050919050565b82805461219c90612ae0565b90600052602060002090601f0160209004810192826121be5760008555612205565b82601f106121d757805160ff1916838001178555612205565b82800160010185558215612205579182015b828111156122045782518255916020019190600101906121e9565b5b50905061221291906122e3565b5090565b50805461222290612ae0565b6000825580601f106122345750612253565b601f01602090049060005260206000209081019061225291906122e3565b5b50565b82805461226290612ae0565b90600052602060002090601f01602090048101928261228457600085556122d2565b82601f1061229557805485556122d2565b828001600101855582156122d257600052602060002091601f016020900482015b828111156122d15782548255916001019190600101906122b6565b5b5090506122df91906122e3565b5090565b5b808211156122fc5760008160009055506001016122e4565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61232781612314565b811461233257600080fd5b50565b6000813590506123448161231e565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261236f5761236e61234a565b5b8235905067ffffffffffffffff81111561238c5761238b61234f565b5b6020830191508360018202830111156123a8576123a7612354565b5b9250929050565b6000806000806000606086880312156123cb576123ca61230a565b5b60006123d988828901612335565b955050602086013567ffffffffffffffff8111156123fa576123f961230f565b5b61240688828901612359565b9450945050604086013567ffffffffffffffff8111156124295761242861230f565b5b61243588828901612359565b92509250509295509295909350565b60008083601f84011261245a5761245961234a565b5b8235905067ffffffffffffffff8111156124775761247661234f565b5b60208301915083602082028301111561249357612492612354565b5b9250929050565b600080602083850312156124b1576124b061230a565b5b600083013567ffffffffffffffff8111156124cf576124ce61230f565b5b6124db85828601612444565b92509250509250929050565b6124f081612314565b82525050565b600060208201905061250b60008301846124e7565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061253c82612511565b9050919050565b61254c81612531565b811461255757600080fd5b50565b60008135905061256981612543565b92915050565b6000819050919050565b6125828161256f565b811461258d57600080fd5b50565b60008135905061259f81612579565b92915050565b600080600080608085870312156125bf576125be61230a565b5b60006125cd8782880161255a565b94505060206125de8782880161255a565b93505060406125ef8782880161255a565b925050606061260087828801612590565b91505092959194509250565b61261581612531565b82525050565b6000602082019050612630600083018461260c565b92915050565b60006020828403121561264c5761264b61230a565b5b600061265a8482850161255a565b91505092915050565b6000602082840312156126795761267861230a565b5b600061268784828501612335565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156126ca5780820151818401526020810190506126af565b838111156126d9576000848401525b50505050565b6000601f19601f8301169050919050565b60006126fb82612690565b612705818561269b565b93506127158185602086016126ac565b61271e816126df565b840191505092915050565b60008115159050919050565b61273e81612729565b82525050565b6000608082019050818103600083015261275e81876126f0565b9050818103602083015261277281866126f0565b9050612781604083018561260c565b61278e6060830184612735565b95945050505050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6127d4826126df565b810181811067ffffffffffffffff821117156127f3576127f261279c565b5b80604052505050565b6000612806612300565b905061281282826127cb565b919050565b600067ffffffffffffffff8211156128325761283161279c565b5b61283b826126df565b9050602081019050919050565b82818337600083830152505050565b600061286a61286584612817565b6127fc565b90508281526020810184848401111561288657612885612797565b5b612891848285612848565b509392505050565b600082601f8301126128ae576128ad61234a565b5b81356128be848260208601612857565b91505092915050565b6000602082840312156128dd576128dc61230a565b5b600082013567ffffffffffffffff8111156128fb576128fa61230f565b5b61290784828501612899565b91505092915050565b600080604083850312156129275761292661230a565b5b600083013567ffffffffffffffff8111156129455761294461230f565b5b61295185828601612899565b92505060206129628582860161255a565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006129a682612314565b91506129b183612314565b9250826129c1576129c061296c565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612a0682612314565b9150612a1183612314565b925082612a2157612a2061296c565b5b828204905092915050565b6000612a3782612314565b9150612a4283612314565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612a7757612a766129cc565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612af857607f821691505b602082108103612b0b57612b0a612ab1565b5b50919050565b600081905092915050565b6000612b2782612690565b612b318185612b11565b9350612b418185602086016126ac565b80840191505092915050565b6000612b598284612b1c565b915081905092915050565b600081519050612b7381612579565b92915050565b600060208284031215612b8f57612b8e61230a565b5b6000612b9d84828501612b64565b91505092915050565b612baf8161256f565b82525050565b60006040820190508181036000830152612bcf81856126f0565b9050612bde6020830184612ba6565b9392505050565b6000612bf082612314565b9150612bfb83612314565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612c3457612c336129cc565b5b828202905092915050565b6000612c4a82612314565b9150612c5583612314565b925082821015612c6857612c676129cc565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b6000819050919050565b612cec612ce78261256f565b612cd1565b82525050565b6000612cfe8285612cdb565b602082019150612d0e8284612cdb565b6020820191508190509392505050565b6000819050919050565b612d39612d3482612314565b612d1e565b82525050565b6000612d4b8285612d28565b602082019150612d5b8284612cdb565b6020820191508190509392505050565b6000612d778284612cdb565b60208201915081905092915050565b60006080820190508181036000830152612da081876126f0565b90508181036020830152612db481866126f0565b90508181036040830152612dc881856126f0565b9050612dd76060830184612ba6565b95945050505050565b600082825260208201905092915050565b7f736c6963655f6f766572666c6f77000000000000000000000000000000000000600082015250565b6000612e27600e83612de0565b9150612e3282612df1565b602082019050919050565b60006020820190508181036000830152612e5681612e1a565b9050919050565b7f736c6963655f6f75744f66426f756e6473000000000000000000000000000000600082015250565b6000612e93601183612de0565b9150612e9e82612e5d565b602082019050919050565b60006020820190508181036000830152612ec281612e86565b9050919050565b6000612ed482612314565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612f0657612f056129cc565b5b60018201905091905056fea264697066735822122022f707577a819fb74299df0c4c6aa51fd57b93de1f3e66bc411aaf491f720eae64736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106100f75760003560e01c80637bb7f3571161008a578063e00cb6ca11610059578063e00cb6ca14610348578063e7f43c6814610385578063e99454f5146103b0578063f340fa01146103d957610107565b80637bb7f35714610289578063b3ab15fb146102b4578063b5d89627146102dd578063bf15af561461031d57610107565b80634b630319116100c65780634b630319146101e1578063540bc5ea1461020a5780636e9960c314610235578063704b6c021461026057610107565b80631bea6725146101395780632ec590c414610162578063304f99c81461018b57806336bf3325146101b657610107565b3661010757610105336103f5565b005b6040517fae962d4e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34801561014557600080fd5b50610160600480360381019061015b91906123af565b610883565b005b34801561016e57600080fd5b506101896004803603810190610184919061249a565b610c2e565b005b34801561019757600080fd5b506101a06110e3565b6040516101ad91906124f6565b60405180910390f35b3480156101c257600080fd5b506101cb61111a565b6040516101d891906124f6565b60405180910390f35b3480156101ed57600080fd5b50610208600480360381019061020391906125a5565b611127565b005b34801561021657600080fd5b5061021f61129b565b60405161022c91906124f6565b60405180910390f35b34801561024157600080fd5b5061024a6112a0565b604051610257919061261b565b60405180910390f35b34801561026c57600080fd5b5061028760048036038101906102829190612636565b6112d0565b005b34801561029557600080fd5b5061029e611393565b6040516102ab91906124f6565b60405180910390f35b3480156102c057600080fd5b506102db60048036038101906102d69190612636565b6113c3565b005b3480156102e957600080fd5b5061030460048036038101906102ff9190612663565b6114e8565b6040516103149493929190612744565b60405180910390f35b34801561032957600080fd5b50610332611797565b60405161033f91906124f6565b60405180910390f35b34801561035457600080fd5b5061036f600480360381019061036a91906128c7565b61179c565b60405161037c919061261b565b60405180910390f35b34801561039157600080fd5b5061039a611865565b6040516103a7919061261b565b60405180910390f35b3480156103bc57600080fd5b506103d760048036038101906103d29190612910565b611895565b005b6103f360048036038101906103ee9190612636565b611a12565b005b6000341480610419575060006801bc16d674ec80000034610416919061299b565b14155b15610450576040517fd5e6876b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006801bc16d674ec8000003461046791906129fb565b905060006104947fe9622dd0bba60226e1dbc661ca8aae56cc90dc7e9b3f33ece002f6764b3801b8611a1e565b905060006104c17fcc0b8384259c4a4e6418cdc72955757e9214822019f44d8b5283077c1b46d43c611a29565b905060006104ee7f2805e4a7c8c139ac2ebe63141d90c488245fd479906b2c60bd42603b8a2ca08b611a29565b9050600061051b7f2783da738595cd6ebaec6fd0f06d62f2266a9e475e2d1feb1d26aa2d1e051255611a33565b9050826000018054905085856105319190612a2c565b1115610569576040517f2f27a95400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006105947f86647fdbbdb534026d3e0f93a551cecf651c2b40fcdfef4b9fd9ed826133e265611a3e565b905060005b8681101561083b5760008560000182886105b39190612a2c565b815481106105c4576105c3612a82565b5b9060005260206000200180546105d990612ae0565b80601f016020809104026020016040519081016040528092919081815260200182805461060590612ae0565b80156106525780601f1061062757610100808354040283529160200191610652565b820191906000526020600020905b81548152906001019060200180831161063557829003601f168201915b505050505090506000600261066683611a48565b6040516106739190612b4d565b602060405180830381855afa158015610690573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906106b39190612b79565b90506107738287600001858b6106c99190612a2c565b815481106106da576106d9612a82565b5b9060005260206000200180546106ef90612ae0565b80601f016020809104026020016040519081016040528092919081815260200182805461071b90612ae0565b80156107685780601f1061073d57610100808354040283529160200191610768565b820191906000526020600020905b81548152906001019060200180831161074b57829003601f168201915b505050505087611b1b565b8984600001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508973ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f881413a504838591eb119e81d4d4e3ce0f6e9b4988dd7bd6c194e53c343c20008484604051610826929190612bb5565b60405180910390a38260010192505050610599565b5061087a868661084b9190612a2c565b7fe9622dd0bba60226e1dbc661ca8aae56cc90dc7e9b3f33ece002f6764b3801b8611f7390919063ffffffff16565b50505050505050565b6108ac7ffbeda9bc03875013b12a1ec161efb8e5bf7e58e3cec96a1ea9efd3e264d26e64611f7a565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415801561093b575061090b7fdfe7334ae89a4aa54c085540947bfa7e13e6b6933be4c49f359d18e88c0dbde5611f7a565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15610972576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600085036109ac576040517fa9cb9e0d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006030858590506109be919061299b565b1415806109da5750846030858590506109d791906129fb565b14155b15610a11576040517f337d0f4100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000606083839050610a23919061299b565b141580610a3f575084606083839050610a3c91906129fb565b14155b15610a76576040517f274cf40100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610aa17fcc0b8384259c4a4e6418cdc72955757e9214822019f44d8b5283077c1b46d43c611a29565b90506000610ace7f2805e4a7c8c139ac2ebe63141d90c488245fd479906b2c60bd42603b8a2ca08b611a29565b905060005b87811015610c24576000610b3988888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050603084610b329190612be5565b6030611f85565b90506000610b9987878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050606085610b929190612be5565b6060611f85565b90508460000182908060018154018082558091505060019003906000526020600020016000909190919091509080519060200190610bd8929190612190565b508360000181908060018154018082558091505060019003906000526020600020016000909190919091509080519060200190610c16929190612190565b508260010192505050610ad3565b5050505050505050565b610c577ffbeda9bc03875013b12a1ec161efb8e5bf7e58e3cec96a1ea9efd3e264d26e64611f7a565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614158015610ce65750610cb67fdfe7334ae89a4aa54c085540947bfa7e13e6b6933be4c49f359d18e88c0dbde5611f7a565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15610d1d576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008282905003610d5a576040517fa9cb9e0d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610d857fe9622dd0bba60226e1dbc661ca8aae56cc90dc7e9b3f33ece002f6764b3801b8611a1e565b90506000610db27fcc0b8384259c4a4e6418cdc72955757e9214822019f44d8b5283077c1b46d43c611a29565b90506000610ddf7f2805e4a7c8c139ac2ebe63141d90c488245fd479906b2c60bd42603b8a2ca08b611a29565b905060005b858590508110156110db57600081118015610e3d57508585600183610e099190612c3f565b818110610e1957610e18612a82565b5b90506020020135868683818110610e3357610e32612a82565b5b9050602002013510155b15610e74576040517f35061dff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83868683818110610e8857610e87612a82565b5b905060200201351015610ec7576040517f34947ea100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018360000180549050610edb9190612c3f565b868683818110610eee57610eed612a82565b5b9050602002013503610f635782600001805480610f0e57610f0d612c73565b5b600190038181906000526020600020016000610f2a9190612216565b905581600001805480610f4057610f3f612c73565b5b600190038181906000526020600020016000610f5c9190612216565b90556110d0565b8260000160018460000180549050610f7b9190612c3f565b81548110610f8c57610f8b612a82565b5b9060005260206000200183600001878784818110610fad57610fac612a82565b5b9050602002013581548110610fc557610fc4612a82565b5b90600052602060002001908054610fdb90612ae0565b610fe6929190612256565b5082600001805480610ffb57610ffa612c73565b5b6001900381819060005260206000200160006110179190612216565b905581600001600183600001805490506110319190612c3f565b8154811061104257611041612a82565b5b906000526020600020018260000187878481811061106357611062612a82565b5b905060200201358154811061107b5761107a612a82565b5b9060005260206000200190805461109190612ae0565b61109c929190612256565b50816000018054806110b1576110b0612c73565b5b6001900381819060005260206000200160006110cd9190612216565b90555b806001019050610de4565b505050505050565b600061110e7fcc0b8384259c4a4e6418cdc72955757e9214822019f44d8b5283077c1b46d43c611a29565b60000180549050905090565b6801bc16d674ec80000081565b6001806111537fd5c553085b8382c47128ae7612257fd5dc3b4fc4d3a108925604d3c8700c025b611a1e565b61115d9190612a2c565b8114611195576040517f0dc149f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6111c8817fd5c553085b8382c47128ae7612257fd5dc3b4fc4d3a108925604d3c8700c025b611f7390919063ffffffff16565b6111fb857fdfe7334ae89a4aa54c085540947bfa7e13e6b6933be4c49f359d18e88c0dbde56120a390919063ffffffff16565b61122e837fbc8b9852d17d50256bb221fdf6ee12d78dd493d807e907f7d223c40d65abd6b96120a390919063ffffffff16565b611261827f2783da738595cd6ebaec6fd0f06d62f2266a9e475e2d1feb1d26aa2d1e0512556120aa90919063ffffffff16565b611294847ffbeda9bc03875013b12a1ec161efb8e5bf7e58e3cec96a1ea9efd3e264d26e646120a390919063ffffffff16565b5050505050565b606081565b60006112cb7ffbeda9bc03875013b12a1ec161efb8e5bf7e58e3cec96a1ea9efd3e264d26e64611f7a565b905090565b6112f97ffbeda9bc03875013b12a1ec161efb8e5bf7e58e3cec96a1ea9efd3e264d26e64611f7a565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461135d576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611390817ffbeda9bc03875013b12a1ec161efb8e5bf7e58e3cec96a1ea9efd3e264d26e646120a390919063ffffffff16565b50565b60006113be7fe9622dd0bba60226e1dbc661ca8aae56cc90dc7e9b3f33ece002f6764b3801b8611a1e565b905090565b6113ec7ffbeda9bc03875013b12a1ec161efb8e5bf7e58e3cec96a1ea9efd3e264d26e64611f7a565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415801561147b575061144b7fdfe7334ae89a4aa54c085540947bfa7e13e6b6933be4c49f359d18e88c0dbde5611f7a565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b156114b2576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6114e5817fdfe7334ae89a4aa54c085540947bfa7e13e6b6933be4c49f359d18e88c0dbde56120a390919063ffffffff16565b50565b60608060008060006115197fcc0b8384259c4a4e6418cdc72955757e9214822019f44d8b5283077c1b46d43c611a29565b905060006115467f2805e4a7c8c139ac2ebe63141d90c488245fd479906b2c60bd42603b8a2ca08b611a29565b905060006115737f86647fdbbdb534026d3e0f93a551cecf651c2b40fcdfef4b9fd9ed826133e265611a3e565b905060006115a07fe9622dd0bba60226e1dbc661ca8aae56cc90dc7e9b3f33ece002f6764b3801b8611a1e565b90508360000189815481106115b8576115b7612a82565b5b9060005260206000200180546115cd90612ae0565b80601f01602080910402602001604051908101604052809291908181526020018280546115f990612ae0565b80156116465780601f1061161b57610100808354040283529160200191611646565b820191906000526020600020905b81548152906001019060200180831161162957829003601f168201915b5050505050975082600001898154811061166357611662612a82565b5b90600052602060002001805461167890612ae0565b80601f01602080910402602001604051908101604052809291908181526020018280546116a490612ae0565b80156116f15780601f106116c6576101008083540402835291602001916116f1565b820191906000526020600020905b8154815290600101906020018083116116d457829003601f168201915b5050505050965081600001600060026117098b611a48565b6040516117169190612b4d565b602060405180830381855afa158015611733573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906117569190612b79565b815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1695508089109450505050509193509193565b603081565b60008060026117aa84611a48565b6040516117b79190612b4d565b602060405180830381855afa1580156117d4573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906117f79190612b79565b905060006118247f86647fdbbdb534026d3e0f93a551cecf651c2b40fcdfef4b9fd9ed826133e265611a3e565b905080600001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1692505050919050565b60006118907fdfe7334ae89a4aa54c085540947bfa7e13e6b6933be4c49f359d18e88c0dbde5611f7a565b905090565b600060026118a284611a48565b6040516118af9190612b4d565b602060405180830381855afa1580156118cc573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906118ef9190612b79565b9050600061191c7f86647fdbbdb534026d3e0f93a551cecf651c2b40fcdfef4b9fd9ed826133e265611a3e565b905080600001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146119b8576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8281600001600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b611a1b816103f5565b50565b600081549050919050565b6000819050919050565b600081549050919050565b6000819050919050565b60606020825110158015611a5e57506040825111155b611a6b57611a6a612ca2565b5b8151604003611a7c57819050611b16565b6000602067ffffffffffffffff811115611a9957611a9861279c565b5b6040519080825280601f01601f191660200182016040528015611acb5781602001600182028036833780820191505090505b509050600060208201528251602003611af057611ae883826120b1565b915050611b16565b611b1283611b0d83600087516040611b089190612c3f565b611f85565b6120b1565b9150505b919050565b60006002611b2885611a48565b604051611b359190612b4d565b602060405180830381855afa158015611b52573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611b759190612b79565b90506000600280611b898660006040611f85565b604051611b969190612b4d565b602060405180830381855afa158015611bb3573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611bd69190612b79565b6002611bf8611bf3886040806060611bee9190612c3f565b611f85565b611a48565b604051611c059190612b4d565b602060405180830381855afa158015611c22573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611c459190612b79565b604051602001611c56929190612cf2565b604051602081830303815290604052604051611c729190612b4d565b602060405180830381855afa158015611c8f573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611cb29190612b79565b90506000633b9aca006801bc16d674ec800000611ccf91906129fb565b90506801bc16d674ec800000633b9aca0082611ceb9190612be5565b14611cf957611cf8612ca2565b5b60006002808587604051602001611d11929190612cf2565b604051602081830303815290604052604051611d2d9190612b4d565b602060405180830381855afa158015611d4a573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611d6d9190612b79565b6002611d788561213b565b86604051602001611d8a929190612d3f565b604051602081830303815290604052604051611da69190612b4d565b602060405180830381855afa158015611dc3573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611de69190612b79565b604051602001611df7929190612cf2565b604051602081830303815290604052604051611e139190612b4d565b602060405180830381855afa158015611e30573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611e539190612b79565b905060006801bc16d674ec80000047611e6c9190612c3f565b9050611e977fbc8b9852d17d50256bb221fdf6ee12d78dd493d807e907f7d223c40d65abd6b9611f7a565b73ffffffffffffffffffffffffffffffffffffffff1663228951186801bc16d674ec8000008a89604051602001611ece9190612d6b565b6040516020818303038152906040528b876040518663ffffffff1660e01b8152600401611efe9493929190612d86565b6000604051808303818588803b158015611f1757600080fd5b505af1158015611f2b573d6000803e3d6000fd5b5050505050804714611f69576040517f6596d2b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050505050565b8082555050565b600081549050919050565b606081601f83611f959190612a2c565b1015611fd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fcd90612e3d565b60405180910390fd5b8183611fe29190612a2c565b84511015612025576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161201c90612ea9565b60405180910390fd5b60608215600081146120465760405191506000825260208201604052612097565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156120845780518352602083019250602081019050612067565b50868552601f19601f8301166040525050505b50809150509392505050565b8082555050565b8082555050565b6060806040519050835180825260208201818101602087015b818310156120e757805183526020830192506020810190506120ca565b50855192508351830184528091508282019050602086015b8183101561211c57805183526020830192506020810190506120ff565b50601f19601f8851850115830101166040525050508091505092915050565b60008082905060005b60088110156121715760ff8216600884901b179250600882901c91508061216a90612ec9565b9050612144565b508060001461218357612182612ca2565b5b60c082901b915050919050565b82805461219c90612ae0565b90600052602060002090601f0160209004810192826121be5760008555612205565b82601f106121d757805160ff1916838001178555612205565b82800160010185558215612205579182015b828111156122045782518255916020019190600101906121e9565b5b50905061221291906122e3565b5090565b50805461222290612ae0565b6000825580601f106122345750612253565b601f01602090049060005260206000209081019061225291906122e3565b5b50565b82805461226290612ae0565b90600052602060002090601f01602090048101928261228457600085556122d2565b82601f1061229557805485556122d2565b828001600101855582156122d257600052602060002091601f016020900482015b828111156122d15782548255916001019190600101906122b6565b5b5090506122df91906122e3565b5090565b5b808211156122fc5760008160009055506001016122e4565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61232781612314565b811461233257600080fd5b50565b6000813590506123448161231e565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261236f5761236e61234a565b5b8235905067ffffffffffffffff81111561238c5761238b61234f565b5b6020830191508360018202830111156123a8576123a7612354565b5b9250929050565b6000806000806000606086880312156123cb576123ca61230a565b5b60006123d988828901612335565b955050602086013567ffffffffffffffff8111156123fa576123f961230f565b5b61240688828901612359565b9450945050604086013567ffffffffffffffff8111156124295761242861230f565b5b61243588828901612359565b92509250509295509295909350565b60008083601f84011261245a5761245961234a565b5b8235905067ffffffffffffffff8111156124775761247661234f565b5b60208301915083602082028301111561249357612492612354565b5b9250929050565b600080602083850312156124b1576124b061230a565b5b600083013567ffffffffffffffff8111156124cf576124ce61230f565b5b6124db85828601612444565b92509250509250929050565b6124f081612314565b82525050565b600060208201905061250b60008301846124e7565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061253c82612511565b9050919050565b61254c81612531565b811461255757600080fd5b50565b60008135905061256981612543565b92915050565b6000819050919050565b6125828161256f565b811461258d57600080fd5b50565b60008135905061259f81612579565b92915050565b600080600080608085870312156125bf576125be61230a565b5b60006125cd8782880161255a565b94505060206125de8782880161255a565b93505060406125ef8782880161255a565b925050606061260087828801612590565b91505092959194509250565b61261581612531565b82525050565b6000602082019050612630600083018461260c565b92915050565b60006020828403121561264c5761264b61230a565b5b600061265a8482850161255a565b91505092915050565b6000602082840312156126795761267861230a565b5b600061268784828501612335565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156126ca5780820151818401526020810190506126af565b838111156126d9576000848401525b50505050565b6000601f19601f8301169050919050565b60006126fb82612690565b612705818561269b565b93506127158185602086016126ac565b61271e816126df565b840191505092915050565b60008115159050919050565b61273e81612729565b82525050565b6000608082019050818103600083015261275e81876126f0565b9050818103602083015261277281866126f0565b9050612781604083018561260c565b61278e6060830184612735565b95945050505050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6127d4826126df565b810181811067ffffffffffffffff821117156127f3576127f261279c565b5b80604052505050565b6000612806612300565b905061281282826127cb565b919050565b600067ffffffffffffffff8211156128325761283161279c565b5b61283b826126df565b9050602081019050919050565b82818337600083830152505050565b600061286a61286584612817565b6127fc565b90508281526020810184848401111561288657612885612797565b5b612891848285612848565b509392505050565b600082601f8301126128ae576128ad61234a565b5b81356128be848260208601612857565b91505092915050565b6000602082840312156128dd576128dc61230a565b5b600082013567ffffffffffffffff8111156128fb576128fa61230f565b5b61290784828501612899565b91505092915050565b600080604083850312156129275761292661230a565b5b600083013567ffffffffffffffff8111156129455761294461230f565b5b61295185828601612899565b92505060206129628582860161255a565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006129a682612314565b91506129b183612314565b9250826129c1576129c061296c565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612a0682612314565b9150612a1183612314565b925082612a2157612a2061296c565b5b828204905092915050565b6000612a3782612314565b9150612a4283612314565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612a7757612a766129cc565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612af857607f821691505b602082108103612b0b57612b0a612ab1565b5b50919050565b600081905092915050565b6000612b2782612690565b612b318185612b11565b9350612b418185602086016126ac565b80840191505092915050565b6000612b598284612b1c565b915081905092915050565b600081519050612b7381612579565b92915050565b600060208284031215612b8f57612b8e61230a565b5b6000612b9d84828501612b64565b91505092915050565b612baf8161256f565b82525050565b60006040820190508181036000830152612bcf81856126f0565b9050612bde6020830184612ba6565b9392505050565b6000612bf082612314565b9150612bfb83612314565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612c3457612c336129cc565b5b828202905092915050565b6000612c4a82612314565b9150612c5583612314565b925082821015612c6857612c676129cc565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b6000819050919050565b612cec612ce78261256f565b612cd1565b82525050565b6000612cfe8285612cdb565b602082019150612d0e8284612cdb565b6020820191508190509392505050565b6000819050919050565b612d39612d3482612314565b612d1e565b82525050565b6000612d4b8285612d28565b602082019150612d5b8284612cdb565b6020820191508190509392505050565b6000612d778284612cdb565b60208201915081905092915050565b60006080820190508181036000830152612da081876126f0565b90508181036020830152612db481866126f0565b90508181036040830152612dc881856126f0565b9050612dd76060830184612ba6565b95945050505050565b600082825260208201905092915050565b7f736c6963655f6f766572666c6f77000000000000000000000000000000000000600082015250565b6000612e27600e83612de0565b9150612e3282612df1565b602082019050919050565b60006020820190508181036000830152612e5681612e1a565b9050919050565b7f736c6963655f6f75744f66426f756e6473000000000000000000000000000000600082015250565b6000612e93601183612de0565b9150612e9e82612e5d565b602082019050919050565b60006020820190508181036000830152612ec281612e86565b9050919050565b6000612ed482612314565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612f0657612f056129cc565b5b60018201905091905056fea264697066735822122022f707577a819fb74299df0c4c6aa51fd57b93de1f3e66bc411aaf491f720eae64736f6c634300080d0033",
  "devdoc": {
    "author": "SkillZ",
    "kind": "dev",
    "methods": {
      "deposit(address)": {
        "details": "A multiple of 32 ETH should be sent",
        "params": {
          "_withdrawer": "The withdrawer address"
        }
      },
      "getValidator(uint256)": {
        "params": {
          "_idx": "Index of the validator"
        }
      },
      "getWithdrawer(bytes)": {
        "params": {
          "_publicKey": "Public Key to retrieve the withdrawer"
        }
      },
      "initialize_1(address,address,address,bytes32)": {
        "params": {
          "_admin": "Address of the admin allowed to change the operator and admin",
          "_depositContract": "Address of the Deposit Contract",
          "_operator": "Address of the operator allowed to add/remove keys",
          "_withdrawalCredentials": "Withdrawal Credentials to apply to all provided keys upon deposit"
        }
      },
      "registerValidators(uint256,bytes,bytes)": {
        "details": "Only the operator or the admin are allowed to call this methodpublickKeys is the concatenation of keyCount public keyssignatures is the concatenation of keyCount signatures",
        "params": {
          "keyCount": "The expected number of keys from publicKeys and signatures",
          "publicKeys": "Concatenated public keys",
          "signatures": "Concatenated signatures"
        }
      },
      "removeValidators(uint256[])": {
        "details": "Only the operator or the admin are allowed to call this methodThe indexes to delete should all be greater than the amount of funded validatorsThe indexes to delete should be sorted in descending order or the method will fail",
        "params": {
          "_indexes": "The indexes to delete"
        }
      },
      "setAdmin(address)": {
        "details": "Only the admin is allowed to call this method",
        "params": {
          "_newAdmin": "New Admin address"
        }
      },
      "setOperator(address)": {
        "details": "Only the admin or the operator are allowed to call this method",
        "params": {
          "_newOperator": "New Operator address"
        }
      },
      "setWithdrawer(bytes,address)": {
        "details": "Only the previous withdrawer of the public key can change the withdrawer",
        "params": {
          "_newWithdrawer": "The new withdrawer address",
          "_publicKey": "The public key to change"
        }
      }
    },
    "title": "Ethereum Staking Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deposit(address)": {
        "notice": "Explicit deposit method"
      },
      "fundedValidatorsCount()": {
        "notice": "Retrieve the amount of funded validators"
      },
      "getAdmin()": {
        "notice": "Retrieve the admin address"
      },
      "getOperator()": {
        "notice": "Retrieve the operator address"
      },
      "getValidator(uint256)": {
        "notice": "Retrieve the details of a validator"
      },
      "getWithdrawer(bytes)": {
        "notice": "Retrieve the withdrawer for a specific public key"
      },
      "initialize_1(address,address,address,bytes32)": {
        "notice": "Initializes version 1 of Staking Contract"
      },
      "registerValidators(uint256,bytes,bytes)": {
        "notice": "Register new validators"
      },
      "removeValidators(uint256[])": {
        "notice": "Remove validators"
      },
      "setAdmin(address)": {
        "notice": "Change the admin address"
      },
      "setOperator(address)": {
        "notice": "Change the operator address"
      },
      "setWithdrawer(bytes,address)": {
        "notice": "Change the withdrawer for a specific public key"
      },
      "totalValidatorCount()": {
        "notice": "Retrieve the amount of registered validators (funded + not yet funded)"
      }
    },
    "notice": "You can use this contract to store validator keys and have users fund them and trigger deposits.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}