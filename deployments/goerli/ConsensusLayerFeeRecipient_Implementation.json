{
  "address": "0xcEC34B2D7482314f64c1876138791D14C631DC32",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_version",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "errorData",
          "type": "bytes"
        }
      ],
      "name": "FeeRecipientReceiveError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "errorData",
          "type": "bytes"
        }
      ],
      "name": "WithdrawerReceiveError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroBalanceWithdrawal",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "feeRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewards",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "getPublicKeyRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakingContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWithdrawer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_publicKeyRoot",
          "type": "bytes32"
        }
      ],
      "name": "initCLFR",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xb56f947e6551037462428c33ee9b2f6adc631a32fac555bb3e6d8adf066d4f90",
  "receipt": {
    "to": null,
    "from": "0x92D7d6DADe15fcF369534cEb8CD1A27f97185ab3",
    "contractAddress": "0xcEC34B2D7482314f64c1876138791D14C631DC32",
    "transactionIndex": 11,
    "gasUsed": "795800",
    "logsBloom": "0x
    "blockHash": "0x94ff240d38a6c4afa135889f7c052777f6598f7a04b57042817b70e8328fd8ef",
    "transactionHash": "0xb56f947e6551037462428c33ee9b2f6adc631a32fac555bb3e6d8adf066d4f90",
    "logs": [],
    "blockNumber": 7090385,
    "cumulativeGasUsed": "4807468",
    "status": 1,
    "byzantium": true
  },
  "args": [
    1
  ],
  "numDeployments": 1,
  "solcInputHash": "f68b72f58c190a8ac72f8e6dc550df74",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"errorData\",\"type\":\"bytes\"}],\"name\":\"FeeRecipientReceiveError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"errorData\",\"type\":\"bytes\"}],\"name\":\"WithdrawerReceiveError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroBalanceWithdrawal\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"getPublicKeyRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_publicKeyRoot\",\"type\":\"bytes32\"}],\"name\":\"initCLFR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Kiln\",\"kind\":\"dev\",\"methods\":{\"initCLFR(address,bytes32)\":{\"params\":{\"_publicKeyRoot\":\"Hash of the public key linked to this fee recipient\",\"_stakingContract\":\"Address of the Staking Contract\"}}},\"title\":\"Consensus Layer Fee Recipient\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor method allowing us to prevent calls to initCLFR by setting the appropriate version\"},\"getPublicKeyRoot()\":{\"notice\":\"Retrieve the assigned public key root\"},\"getStakingContract()\":{\"notice\":\"Retrieve the staking contract address\"},\"getWithdrawer()\":{\"notice\":\"Retrieve the assigned withdrawer\"},\"initCLFR(address,bytes32)\":{\"notice\":\"Initialized the contract by storing the staking contract and the public key in storage\"},\"withdraw()\":{\"notice\":\"Performs a withdrawal on this contract's balance\"}},\"notice\":\"This contract can be used to receive fees from a validator and split them with a node operator\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/ConsensusLayerFeeRecipient.sol\":\"ConsensusLayerFeeRecipient\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/contracts/ConsensusLayerFeeRecipient.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.10;\\n\\nimport \\\"./libs/FeeRecipientStorageLib.sol\\\";\\nimport \\\"./interfaces/IStakingContractFeeDetails.sol\\\";\\n\\n/// @title Consensus Layer Fee Recipient\\n/// @author Kiln\\n/// @notice This contract can be used to receive fees from a validator and split them with a node operator\\ncontract ConsensusLayerFeeRecipient {\\n    using FeeRecipientStorageLib for bytes32;\\n\\n    event Withdrawal(address indexed withdrawer, address indexed feeRecipient, uint256 rewards, uint256 fee);\\n\\n    error FeeRecipientReceiveError(bytes errorData);\\n    error WithdrawerReceiveError(bytes errorData);\\n    error ZeroBalanceWithdrawal();\\n    error AlreadyInitialized();\\n    error InvalidCall();\\n\\n    bytes32 internal constant STAKING_CONTRACT_ADDRESS_SLOT =\\n        keccak256(\\\"ConsensusLayerFeeRecipient.stakingContractAddress\\\");\\n    bytes32 internal constant VALIDATOR_PUBLIC_KEY_SLOT = keccak256(\\\"ConsensusLayerFeeRecipient.validatorPublicKey\\\");\\n    uint256 internal constant BASIS_POINTS = 10_000;\\n    bytes32 internal constant VERSION_SLOT = keccak256(\\\"ConsensusLayerFeeRecipient.version\\\");\\n\\n    /// @notice Ensures an initialisation call has been called only once per _version value\\n    /// @param _version The current initialisation value\\n    modifier init(uint256 _version) {\\n        if (_version != VERSION_SLOT.getUint256() + 1) {\\n            revert AlreadyInitialized();\\n        }\\n\\n        VERSION_SLOT.setUint256(_version);\\n\\n        _;\\n    }\\n\\n    /// @notice Constructor method allowing us to prevent calls to initCLFR by setting the appropriate version\\n    constructor(uint256 _version) {\\n        VERSION_SLOT.setUint256(_version);\\n    }\\n\\n    /// @notice Initialized the contract by storing the staking contract and the public key in storage\\n    /// @param _stakingContract Address of the Staking Contract\\n    /// @param _publicKeyRoot Hash of the public key linked to this fee recipient\\n    function initCLFR(address _stakingContract, bytes32 _publicKeyRoot) external init(1) {\\n        STAKING_CONTRACT_ADDRESS_SLOT.setAddress(_stakingContract);\\n        VALIDATOR_PUBLIC_KEY_SLOT.setBytes32(_publicKeyRoot);\\n    }\\n\\n    /// @notice Performs a withdrawal on this contract's balance\\n    function withdraw() external {\\n        uint256 balance = address(this).balance;\\n        if (balance == 0) {\\n            revert ZeroBalanceWithdrawal();\\n        }\\n        IStakingContractFeeDetails stakingContract = IStakingContractFeeDetails(\\n            STAKING_CONTRACT_ADDRESS_SLOT.getAddress()\\n        );\\n        bytes32 pubKeyRoot = VALIDATOR_PUBLIC_KEY_SLOT.getBytes32();\\n        address withdrawer = stakingContract.getWithdrawerFromPublicKeyRoot(pubKeyRoot);\\n        uint256 feeBps = stakingContract.getCLFee();\\n        address feeRecipient = stakingContract.getFeeTreasury(pubKeyRoot);\\n\\n        uint256 fee;\\n        if (balance >= 32 ether) {\\n            // withdrawing a healthy & exited validator\\n            fee = ((balance - 32 ether) * feeBps) / BASIS_POINTS;\\n        } else if (balance <= 16 ether) {\\n            // withdrawing from what looks like skimming\\n            fee = (balance * feeBps) / BASIS_POINTS;\\n        } else {\\n            // withdrawing from slashed validator (< 32 eth and > 16 eth)\\n            fee = 0;\\n        }\\n\\n        (bool status, bytes memory data) = withdrawer.call{value: balance - fee}(\\\"\\\");\\n        if (status == false) {\\n            revert WithdrawerReceiveError(data);\\n        }\\n        if (fee > 0) {\\n            (status, data) = feeRecipient.call{value: fee}(\\\"\\\");\\n            if (status == false) {\\n                revert FeeRecipientReceiveError(data);\\n            }\\n        }\\n        emit Withdrawal(withdrawer, feeRecipient, balance - fee, fee);\\n    }\\n\\n    /// @notice Retrieve the staking contract address\\n    function getStakingContract() external view returns (address) {\\n        return STAKING_CONTRACT_ADDRESS_SLOT.getAddress();\\n    }\\n\\n    /// @notice Retrieve the assigned withdrawer\\n    function getWithdrawer() external view returns (address) {\\n        IStakingContractFeeDetails stakingContract = IStakingContractFeeDetails(\\n            STAKING_CONTRACT_ADDRESS_SLOT.getAddress()\\n        );\\n        bytes32 pubKeyRoot = VALIDATOR_PUBLIC_KEY_SLOT.getBytes32();\\n        address withdrawer = stakingContract.getWithdrawerFromPublicKeyRoot(pubKeyRoot);\\n        return withdrawer;\\n    }\\n\\n    /// @notice Retrieve the assigned public key root\\n    function getPublicKeyRoot() external view returns (bytes32) {\\n        return VALIDATOR_PUBLIC_KEY_SLOT.getBytes32();\\n    }\\n\\n    receive() external payable {}\\n\\n    fallback() external payable {\\n        revert InvalidCall();\\n    }\\n}\\n\",\"keccak256\":\"0x0041f1b5fa4edbfbbe577fd878ba10874f8fa44e59b47eca8c4e239822da61e8\",\"license\":\"BUSL-1.1\"},\"src/contracts/interfaces/IStakingContractFeeDetails.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10;\\n\\ninterface IStakingContractFeeDetails {\\n    function getWithdrawerFromPublicKeyRoot(bytes32 _publicKeyRoot) external view returns (address);\\n\\n    function getELFee() external view returns (uint256);\\n\\n    function getCLFee() external view returns (uint256);\\n\\n    function getFeeTreasury(bytes32 pubKeyRoot) external view returns (address);\\n}\\n\",\"keccak256\":\"0x4e19227f0302921d06b27144d500dc66b170690c1a3599101d604d2c8cc12658\",\"license\":\"MIT\"},\"src/contracts/libs/FeeRecipientStorageLib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10;\\n\\nlibrary FeeRecipientStorageLib {\\n    function getUint256(bytes32 position) internal view returns (uint256 data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function setUint256(bytes32 position, uint256 data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function getAddress(bytes32 position) internal view returns (address data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function setAddress(bytes32 position, address data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function getBytes32(bytes32 position) internal view returns (bytes32 data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function setBytes32(bytes32 position, bytes32 data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3cd599adbee155c1fd5b397eb5d6f57add731d867474ef634799efa2ec5bb58e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610df1380380610df1833981810160405281019061003291906100b1565b610069817f6081a8ce97ad8a3951bac5b885ad6097d6b55cb45a6dd62b5069939f8c95ffef61006f60201b61081a1790919060201c565b506100de565b8082555050565b600080fd5b6000819050919050565b61008e8161007b565b811461009957600080fd5b50565b6000815190506100ab81610085565b92915050565b6000602082840312156100c7576100c6610076565b5b60006100d58482850161009c565b91505092915050565b610d04806100ed6000396000f3fe60806040526004361061004e5760003560e01c80633ccfd60b146100875780637d38d21f1461009e5780637f763702146100c95780638e68dce4146100f4578063b9e1b4431461011f57610055565b3661005557005b6040517fae962d4e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34801561009357600080fd5b5061009c610148565b005b3480156100aa57600080fd5b506100b36105cc565b6040516100c09190610891565b60405180910390f35b3480156100d557600080fd5b506100de6106ae565b6040516100eb91906108c5565b60405180910390f35b34801561010057600080fd5b506101096106de565b6040516101169190610891565b60405180910390f35b34801561012b57600080fd5b506101466004803603810190610141919061093d565b61070e565b005b600047905060008103610187576040517fb6562b0a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006101b27ff0fe62e71ff1ce44ef40d55534c386cf3d375849a5782af5d4e66df449ae3a51610821565b905060006101df7f3476f6663ec5404c78a88d9d3888a160723367157bf82a873971deff16a7f3b161082c565b905060008273ffffffffffffffffffffffffffffffffffffffff1663a7400801836040518263ffffffff1660e01b815260040161021c91906108c5565b602060405180830381865afa158015610239573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025d9190610992565b905060008373ffffffffffffffffffffffffffffffffffffffff16637c4c92386040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d091906109f5565b905060008473ffffffffffffffffffffffffffffffffffffffff1663d602d796856040518263ffffffff1660e01b815260040161030d91906108c5565b602060405180830381865afa15801561032a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034e9190610992565b905060006801bc16d674ec800000871061039657612710836801bc16d674ec8000008961037b9190610a51565b6103859190610a85565b61038f9190610b0e565b90506103cb565b67de0b6b3a7640000087116103c55761271083886103b49190610a85565b6103be9190610b0e565b90506103ca565b600090505b5b6000808573ffffffffffffffffffffffffffffffffffffffff16838a6103f19190610a51565b6040516103fd90610b70565b60006040518083038185875af1925050503d806000811461043a576040519150601f19603f3d011682016040523d82523d6000602084013e61043f565b606091505b5091509150600015158215150361048d57806040517fce13343d0000000000000000000000000000000000000000000000000000000081526004016104849190610c1e565b60405180910390fd5b600083111561054f578373ffffffffffffffffffffffffffffffffffffffff16836040516104ba90610b70565b60006040518083038185875af1925050503d80600081146104f7576040519150601f19603f3d011682016040523d82523d6000602084013e6104fc565b606091505b508092508193505050600015158215150361054e57806040517fe5ea83e70000000000000000000000000000000000000000000000000000000081526004016105459190610c1e565b60405180910390fd5b5b8373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fc2b4a290c20fb28939d29f102514fbffd2b73c059ffba8b78250c94161d5fcc6858c6105aa9190610a51565b866040516105b9929190610c4f565b60405180910390a3505050505050505050565b6000806105f87ff0fe62e71ff1ce44ef40d55534c386cf3d375849a5782af5d4e66df449ae3a51610821565b905060006106257f3476f6663ec5404c78a88d9d3888a160723367157bf82a873971deff16a7f3b161082c565b905060008273ffffffffffffffffffffffffffffffffffffffff1663a7400801836040518263ffffffff1660e01b815260040161066291906108c5565b602060405180830381865afa15801561067f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a39190610992565b905080935050505090565b60006106d97f3476f6663ec5404c78a88d9d3888a160723367157bf82a873971deff16a7f3b161082c565b905090565b60006107097ff0fe62e71ff1ce44ef40d55534c386cf3d375849a5782af5d4e66df449ae3a51610821565b905090565b60018061073a7f6081a8ce97ad8a3951bac5b885ad6097d6b55cb45a6dd62b5069939f8c95ffef610837565b6107449190610c78565b811461077c576040517f0dc149f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6107af817f6081a8ce97ad8a3951bac5b885ad6097d6b55cb45a6dd62b5069939f8c95ffef61081a90919063ffffffff16565b6107e2837ff0fe62e71ff1ce44ef40d55534c386cf3d375849a5782af5d4e66df449ae3a5161084290919063ffffffff16565b610815827f3476f6663ec5404c78a88d9d3888a160723367157bf82a873971deff16a7f3b161084990919063ffffffff16565b505050565b8082555050565b600081549050919050565b600081549050919050565b600081549050919050565b8082555050565b8082555050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061087b82610850565b9050919050565b61088b81610870565b82525050565b60006020820190506108a66000830184610882565b92915050565b6000819050919050565b6108bf816108ac565b82525050565b60006020820190506108da60008301846108b6565b92915050565b600080fd5b6108ee81610870565b81146108f957600080fd5b50565b60008135905061090b816108e5565b92915050565b61091a816108ac565b811461092557600080fd5b50565b60008135905061093781610911565b92915050565b60008060408385031215610954576109536108e0565b5b6000610962858286016108fc565b925050602061097385828601610928565b9150509250929050565b60008151905061098c816108e5565b92915050565b6000602082840312156109a8576109a76108e0565b5b60006109b68482850161097d565b91505092915050565b6000819050919050565b6109d2816109bf565b81146109dd57600080fd5b50565b6000815190506109ef816109c9565b92915050565b600060208284031215610a0b57610a0a6108e0565b5b6000610a19848285016109e0565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a5c826109bf565b9150610a67836109bf565b925082821015610a7a57610a79610a22565b5b828203905092915050565b6000610a90826109bf565b9150610a9b836109bf565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ad457610ad3610a22565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b19826109bf565b9150610b24836109bf565b925082610b3457610b33610adf565b5b828204905092915050565b600081905092915050565b50565b6000610b5a600083610b3f565b9150610b6582610b4a565b600082019050919050565b6000610b7b82610b4d565b9150819050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610bbf578082015181840152602081019050610ba4565b83811115610bce576000848401525b50505050565b6000601f19601f8301169050919050565b6000610bf082610b85565b610bfa8185610b90565b9350610c0a818560208601610ba1565b610c1381610bd4565b840191505092915050565b60006020820190508181036000830152610c388184610be5565b905092915050565b610c49816109bf565b82525050565b6000604082019050610c646000830185610c40565b610c716020830184610c40565b9392505050565b6000610c83826109bf565b9150610c8e836109bf565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610cc357610cc2610a22565b5b82820190509291505056fea26469706673582212208f46d368b80a7553f0965f08819cc3dc54518db11e423ce6ac04899aeec1e46564736f6c634300080d0033",
  "deployedBytecode": "0x60806040526004361061004e5760003560e01c80633ccfd60b146100875780637d38d21f1461009e5780637f763702146100c95780638e68dce4146100f4578063b9e1b4431461011f57610055565b3661005557005b6040517fae962d4e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34801561009357600080fd5b5061009c610148565b005b3480156100aa57600080fd5b506100b36105cc565b6040516100c09190610891565b60405180910390f35b3480156100d557600080fd5b506100de6106ae565b6040516100eb91906108c5565b60405180910390f35b34801561010057600080fd5b506101096106de565b6040516101169190610891565b60405180910390f35b34801561012b57600080fd5b506101466004803603810190610141919061093d565b61070e565b005b600047905060008103610187576040517fb6562b0a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006101b27ff0fe62e71ff1ce44ef40d55534c386cf3d375849a5782af5d4e66df449ae3a51610821565b905060006101df7f3476f6663ec5404c78a88d9d3888a160723367157bf82a873971deff16a7f3b161082c565b905060008273ffffffffffffffffffffffffffffffffffffffff1663a7400801836040518263ffffffff1660e01b815260040161021c91906108c5565b602060405180830381865afa158015610239573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025d9190610992565b905060008373ffffffffffffffffffffffffffffffffffffffff16637c4c92386040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d091906109f5565b905060008473ffffffffffffffffffffffffffffffffffffffff1663d602d796856040518263ffffffff1660e01b815260040161030d91906108c5565b602060405180830381865afa15801561032a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034e9190610992565b905060006801bc16d674ec800000871061039657612710836801bc16d674ec8000008961037b9190610a51565b6103859190610a85565b61038f9190610b0e565b90506103cb565b67de0b6b3a7640000087116103c55761271083886103b49190610a85565b6103be9190610b0e565b90506103ca565b600090505b5b6000808573ffffffffffffffffffffffffffffffffffffffff16838a6103f19190610a51565b6040516103fd90610b70565b60006040518083038185875af1925050503d806000811461043a576040519150601f19603f3d011682016040523d82523d6000602084013e61043f565b606091505b5091509150600015158215150361048d57806040517fce13343d0000000000000000000000000000000000000000000000000000000081526004016104849190610c1e565b60405180910390fd5b600083111561054f578373ffffffffffffffffffffffffffffffffffffffff16836040516104ba90610b70565b60006040518083038185875af1925050503d80600081146104f7576040519150601f19603f3d011682016040523d82523d6000602084013e6104fc565b606091505b508092508193505050600015158215150361054e57806040517fe5ea83e70000000000000000000000000000000000000000000000000000000081526004016105459190610c1e565b60405180910390fd5b5b8373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fc2b4a290c20fb28939d29f102514fbffd2b73c059ffba8b78250c94161d5fcc6858c6105aa9190610a51565b866040516105b9929190610c4f565b60405180910390a3505050505050505050565b6000806105f87ff0fe62e71ff1ce44ef40d55534c386cf3d375849a5782af5d4e66df449ae3a51610821565b905060006106257f3476f6663ec5404c78a88d9d3888a160723367157bf82a873971deff16a7f3b161082c565b905060008273ffffffffffffffffffffffffffffffffffffffff1663a7400801836040518263ffffffff1660e01b815260040161066291906108c5565b602060405180830381865afa15801561067f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a39190610992565b905080935050505090565b60006106d97f3476f6663ec5404c78a88d9d3888a160723367157bf82a873971deff16a7f3b161082c565b905090565b60006107097ff0fe62e71ff1ce44ef40d55534c386cf3d375849a5782af5d4e66df449ae3a51610821565b905090565b60018061073a7f6081a8ce97ad8a3951bac5b885ad6097d6b55cb45a6dd62b5069939f8c95ffef610837565b6107449190610c78565b811461077c576040517f0dc149f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6107af817f6081a8ce97ad8a3951bac5b885ad6097d6b55cb45a6dd62b5069939f8c95ffef61081a90919063ffffffff16565b6107e2837ff0fe62e71ff1ce44ef40d55534c386cf3d375849a5782af5d4e66df449ae3a5161084290919063ffffffff16565b610815827f3476f6663ec5404c78a88d9d3888a160723367157bf82a873971deff16a7f3b161084990919063ffffffff16565b505050565b8082555050565b600081549050919050565b600081549050919050565b600081549050919050565b8082555050565b8082555050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061087b82610850565b9050919050565b61088b81610870565b82525050565b60006020820190506108a66000830184610882565b92915050565b6000819050919050565b6108bf816108ac565b82525050565b60006020820190506108da60008301846108b6565b92915050565b600080fd5b6108ee81610870565b81146108f957600080fd5b50565b60008135905061090b816108e5565b92915050565b61091a816108ac565b811461092557600080fd5b50565b60008135905061093781610911565b92915050565b60008060408385031215610954576109536108e0565b5b6000610962858286016108fc565b925050602061097385828601610928565b9150509250929050565b60008151905061098c816108e5565b92915050565b6000602082840312156109a8576109a76108e0565b5b60006109b68482850161097d565b91505092915050565b6000819050919050565b6109d2816109bf565b81146109dd57600080fd5b50565b6000815190506109ef816109c9565b92915050565b600060208284031215610a0b57610a0a6108e0565b5b6000610a19848285016109e0565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a5c826109bf565b9150610a67836109bf565b925082821015610a7a57610a79610a22565b5b828203905092915050565b6000610a90826109bf565b9150610a9b836109bf565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ad457610ad3610a22565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b19826109bf565b9150610b24836109bf565b925082610b3457610b33610adf565b5b828204905092915050565b600081905092915050565b50565b6000610b5a600083610b3f565b9150610b6582610b4a565b600082019050919050565b6000610b7b82610b4d565b9150819050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610bbf578082015181840152602081019050610ba4565b83811115610bce576000848401525b50505050565b6000601f19601f8301169050919050565b6000610bf082610b85565b610bfa8185610b90565b9350610c0a818560208601610ba1565b610c1381610bd4565b840191505092915050565b60006020820190508181036000830152610c388184610be5565b905092915050565b610c49816109bf565b82525050565b6000604082019050610c646000830185610c40565b610c716020830184610c40565b9392505050565b6000610c83826109bf565b9150610c8e836109bf565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610cc357610cc2610a22565b5b82820190509291505056fea26469706673582212208f46d368b80a7553f0965f08819cc3dc54518db11e423ce6ac04899aeec1e46564736f6c634300080d0033",
  "devdoc": {
    "author": "Kiln",
    "kind": "dev",
    "methods": {
      "initCLFR(address,bytes32)": {
        "params": {
          "_publicKeyRoot": "Hash of the public key linked to this fee recipient",
          "_stakingContract": "Address of the Staking Contract"
        }
      }
    },
    "title": "Consensus Layer Fee Recipient",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor method allowing us to prevent calls to initCLFR by setting the appropriate version"
      },
      "getPublicKeyRoot()": {
        "notice": "Retrieve the assigned public key root"
      },
      "getStakingContract()": {
        "notice": "Retrieve the staking contract address"
      },
      "getWithdrawer()": {
        "notice": "Retrieve the assigned withdrawer"
      },
      "initCLFR(address,bytes32)": {
        "notice": "Initialized the contract by storing the staking contract and the public key in storage"
      },
      "withdraw()": {
        "notice": "Performs a withdrawal on this contract's balance"
      }
    },
    "notice": "This contract can be used to receive fees from a validator and split them with a node operator",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}