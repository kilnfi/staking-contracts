{
  "address": "0x4526886FA76808485D620BB82FdA11472e2bBB5D",
  "abi": [
    {
      "inputs": [],
      "name": "AlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Deactivated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DepositFailure",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "DuplicateValidatorKey",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Forbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FundedValidatorDeletionAttempt",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidArgument",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDepositValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPublicKeys",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSignatures",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidValidatorCount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaximumOperatorCountAlreadyReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoOperators",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughValidators",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "keyCount",
          "type": "uint256"
        }
      ],
      "name": "OperatorLimitTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnsortedIndexes",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_operatorIndex",
          "type": "uint256"
        }
      ],
      "name": "ActivatedOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "ChangedAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newGlobalFee",
          "type": "uint256"
        }
      ],
      "name": "ChangedGlobalFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "operatorIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "operatorAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeRecipientAddress",
          "type": "address"
        }
      ],
      "name": "ChangedOperatorAddresses",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newOperatorFee",
          "type": "uint256"
        }
      ],
      "name": "ChangedOperatorFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "operatorIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "ChangedOperatorLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTreasury",
          "type": "address"
        }
      ],
      "name": "ChangedTreasury",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newWithdrawer",
          "type": "address"
        }
      ],
      "name": "ChangedWithdrawer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_operatorIndex",
          "type": "uint256"
        }
      ],
      "name": "DeactivatedOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "operatorAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeRecipientAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "NewOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "SetWithdrawerCustomizationStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "operatorIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        }
      ],
      "name": "ValidatorKeyRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "operatorIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "publicKeys",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "signatures",
          "type": "bytes"
        }
      ],
      "name": "ValidatorKeysAdded",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "DEPOSIT_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PUBLIC_KEY_LENGTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SIGNATURE_LENGTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_operatorIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_newFeeRecipient",
          "type": "address"
        }
      ],
      "name": "activateOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operatorAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeRecipientAddress",
          "type": "address"
        }
      ],
      "name": "addOperator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_operatorIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_keyCount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_publicKeys",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_signatures",
          "type": "bytes"
        }
      ],
      "name": "addValidators",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_operatorIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_temporaryFeeRecipient",
          "type": "address"
        }
      ],
      "name": "deactivateOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAvailableValidatorCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_publicKey",
          "type": "bytes"
        }
      ],
      "name": "getCLFeeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_publicKey",
          "type": "bytes"
        }
      ],
      "name": "getELFeeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGlobalFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_operatorIndex",
          "type": "uint256"
        }
      ],
      "name": "getOperator",
      "outputs": [
        {
          "internalType": "address",
          "name": "operatorAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feeRecipientAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "keys",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "funded",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "available",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "deactivated",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOperatorFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "pubKeyRoot",
          "type": "bytes32"
        }
      ],
      "name": "getOperatorFeeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPendingAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTreasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_operatorIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_validatorIndex",
          "type": "uint256"
        }
      ],
      "name": "getValidator",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "funded",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_publicKey",
          "type": "bytes"
        }
      ],
      "name": "getWithdrawer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_publicKeyRoot",
          "type": "bytes32"
        }
      ],
      "name": "getWithdrawerFromPublicKeyRoot",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_depositContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_elDispatcher",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_clDispatcher",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeRecipientImplementation",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_globalFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_operatorFee",
          "type": "uint256"
        }
      ],
      "name": "initialize_1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_operatorIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_indexes",
          "type": "uint256[]"
        }
      ],
      "name": "removeValidators",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_globalFee",
          "type": "uint256"
        }
      ],
      "name": "setGlobalFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_operatorIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_operatorAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeRecipientAddress",
          "type": "address"
        }
      ],
      "name": "setOperatorAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_operatorFee",
          "type": "uint256"
        }
      ],
      "name": "setOperatorFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_operatorIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "setOperatorLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newTreasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_publicKey",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_newWithdrawer",
          "type": "address"
        }
      ],
      "name": "setWithdrawer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_enabled",
          "type": "bool"
        }
      ],
      "name": "setWithdrawerCustomizationEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_publicKey",
          "type": "bytes"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_publicKey",
          "type": "bytes"
        }
      ],
      "name": "withdrawCLFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_publicKey",
          "type": "bytes"
        }
      ],
      "name": "withdrawELFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x9efb70a99d1bd964b56279a742d041344eb44f0c560146b5ffbf0a3a5aa97038",
  "receipt": {
    "to": null,
    "from": "0x81F5f7bf0AFE2aFb9D7d6a21F4FeA1FB888E79CF",
    "contractAddress": "0x4526886FA76808485D620BB82FdA11472e2bBB5D",
    "transactionIndex": 45,
    "gasUsed": "4462670",
    "logsBloom": "0x
    "blockHash": "0x2e41609d90e0ca00ab1a6299fd490049d1ec9ab4c3097bcd30bf859e4a0710ca",
    "transactionHash": "0x9efb70a99d1bd964b56279a742d041344eb44f0c560146b5ffbf0a3a5aa97038",
    "logs": [],
    "blockNumber": 17237503,
    "cumulativeGasUsed": "7475966",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "315819a395537674106fd08f5563edc9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Deactivated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositFailure\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"DuplicateValidatorKey\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Forbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundedValidatorDeletionAttempt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArgument\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDepositValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPublicKeys\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignatures\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidValidatorCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaximumOperatorCountAlreadyReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoOperators\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughValidators\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keyCount\",\"type\":\"uint256\"}],\"name\":\"OperatorLimitTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsortedIndexes\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_operatorIndex\",\"type\":\"uint256\"}],\"name\":\"ActivatedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"ChangedAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newGlobalFee\",\"type\":\"uint256\"}],\"name\":\"ChangedGlobalFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operatorIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operatorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeRecipientAddress\",\"type\":\"address\"}],\"name\":\"ChangedOperatorAddresses\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newOperatorFee\",\"type\":\"uint256\"}],\"name\":\"ChangedOperatorFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operatorIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"ChangedOperatorLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"ChangedTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newWithdrawer\",\"type\":\"address\"}],\"name\":\"ChangedWithdrawer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_operatorIndex\",\"type\":\"uint256\"}],\"name\":\"DeactivatedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operatorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeRecipientAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"NewOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"SetWithdrawerCustomizationStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"operatorIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"name\":\"ValidatorKeyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"operatorIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"publicKeys\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"}],\"name\":\"ValidatorKeysAdded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DEPOSIT_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_KEY_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIGNATURE_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operatorIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newFeeRecipient\",\"type\":\"address\"}],\"name\":\"activateOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRecipientAddress\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operatorIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_keyCount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_publicKeys\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signatures\",\"type\":\"bytes\"}],\"name\":\"addValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operatorIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_temporaryFeeRecipient\",\"type\":\"address\"}],\"name\":\"deactivateOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvailableValidatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"getCLFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"getELFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGlobalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operatorIndex\",\"type\":\"uint256\"}],\"name\":\"getOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipientAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keys\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"funded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deactivated\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperatorFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"pubKeyRoot\",\"type\":\"bytes32\"}],\"name\":\"getOperatorFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operatorIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validatorIndex\",\"type\":\"uint256\"}],\"name\":\"getValidator\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"funded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"getWithdrawer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_publicKeyRoot\",\"type\":\"bytes32\"}],\"name\":\"getWithdrawerFromPublicKeyRoot\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_depositContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_elDispatcher\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_clDispatcher\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRecipientImplementation\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_globalFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_operatorFee\",\"type\":\"uint256\"}],\"name\":\"initialize_1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operatorIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_indexes\",\"type\":\"uint256[]\"}],\"name\":\"removeValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_globalFee\",\"type\":\"uint256\"}],\"name\":\"setGlobalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operatorIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRecipientAddress\",\"type\":\"address\"}],\"name\":\"setOperatorAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operatorFee\",\"type\":\"uint256\"}],\"name\":\"setOperatorFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operatorIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setOperatorLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTreasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_newWithdrawer\",\"type\":\"address\"}],\"name\":\"setWithdrawer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setWithdrawerCustomizationEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"withdrawCLFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"withdrawELFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Kiln\",\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"Only callable by new admin\"},\"activateOperator(uint256,address)\":{\"params\":{\"_newFeeRecipient\":\"Sets the fee recipient address\",\"_operatorIndex\":\"Operator Index\"}},\"addOperator(address,address)\":{\"details\":\"Only callable by admin\",\"params\":{\"_feeRecipientAddress\":\"Operator address used to manage rewards\",\"_operatorAddress\":\"Operator address allowed to add / remove validators\"}},\"addValidators(uint256,uint256,bytes,bytes)\":{\"details\":\"Only callable by operator\",\"params\":{\"_keyCount\":\"Number of keys added\",\"_operatorIndex\":\"Operator Index\",\"_publicKeys\":\"Concatenated _keyCount public keys\",\"_signatures\":\"Concatenated _keyCount signatures\"}},\"deactivateOperator(uint256,address)\":{\"params\":{\"_operatorIndex\":\"Operator Index\",\"_temporaryFeeRecipient\":\"Temporary address to receive funds decided by the system admin\"}},\"deposit()\":{\"details\":\"A multiple of 32 ETH should be sent\"},\"getCLFeeRecipient(bytes)\":{\"params\":{\"_publicKey\":\"Validator to get the recipient\"}},\"getELFeeRecipient(bytes)\":{\"params\":{\"_publicKey\":\"Validator to get the recipient\"}},\"getOperator(uint256)\":{\"params\":{\"_operatorIndex\":\"Operator index\"}},\"getValidator(uint256,uint256)\":{\"params\":{\"_operatorIndex\":\"Index of the operator running the validator\",\"_validatorIndex\":\"Index of the validator\"}},\"getWithdrawer(bytes)\":{\"params\":{\"_publicKey\":\"Public Key to check\"}},\"getWithdrawerFromPublicKeyRoot(bytes32)\":{\"params\":{\"_publicKeyRoot\":\"Hash of the public key\"}},\"removeValidators(uint256,uint256[])\":{\"details\":\"Only callable by operatorIndexes should be provided in decreasing orderThe limit will be set to the lowest removed operator index to ensure all changes above the      lowest removed validator key are verified by the system administrator\",\"params\":{\"_indexes\":\"List of indexes to delete, in decreasing order\",\"_operatorIndex\":\"Operator Index\"}},\"setGlobalFee(uint256)\":{\"params\":{\"_globalFee\":\"Fee in Basis Point\"}},\"setOperatorAddresses(uint256,address,address)\":{\"details\":\"Only callable by fee recipient address manager\",\"params\":{\"_feeRecipientAddress\":\"New operator address for reward management\",\"_operatorAddress\":\"New operator address for operations management\",\"_operatorIndex\":\"Index of the operator to update\"}},\"setOperatorFee(uint256)\":{\"params\":{\"_operatorFee\":\"Fee in Basis Point\"}},\"setOperatorLimit(uint256,uint256)\":{\"details\":\"Only callable by adminLimit should not exceed the validator key count of the operatorKeys should be registered before limit is increasedAllows all keys to be verified by the system admin before limit is increased\",\"params\":{\"_limit\":\"New staking limit\",\"_operatorIndex\":\"Operator Index\"}},\"setTreasury(address)\":{\"details\":\"Only callable by admin\",\"params\":{\"_newTreasury\":\"New Treasury address\"}},\"setWithdrawer(bytes,address)\":{\"details\":\"Only callable by current public key withdrawer\",\"params\":{\"_newWithdrawer\":\"New withdrawer address\",\"_publicKey\":\"Public key to change withdrawer\"}},\"setWithdrawerCustomizationEnabled(bool)\":{\"params\":{\"_enabled\":\"True to allow users to customize the withdrawer\"}},\"transferOwnership(address)\":{\"details\":\"Only callable by admin\",\"params\":{\"_newAdmin\":\"New Administrator address\"}},\"withdraw(bytes)\":{\"details\":\"Reverts if any is null\",\"params\":{\"_publicKey\":\"Validator to withdraw Execution and Consensus Layer Fees from\"}},\"withdrawCLFee(bytes)\":{\"details\":\"Funds are sent to the withdrawer accountThis method is public on purpose\",\"params\":{\"_publicKey\":\"Validator to withdraw Consensus Layer Fees from\"}},\"withdrawELFee(bytes)\":{\"details\":\"Funds are sent to the withdrawer accountThis method is public on purpose\",\"params\":{\"_publicKey\":\"Validator to withdraw Execution Layer Fees from\"}}},\"title\":\"Ethereum Staking Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"New admin must accept its role by calling this method\"},\"activateOperator(uint256,address)\":{\"notice\":\"Activates an operator, without changing its 0 staking limit\"},\"addOperator(address,address)\":{\"notice\":\"Add new operator\"},\"addValidators(uint256,uint256,bytes,bytes)\":{\"notice\":\"Add new validator public keys and signatures\"},\"deactivateOperator(uint256,address)\":{\"notice\":\"Deactivates an operator and changes the fee recipient address and the staking limit\"},\"deposit()\":{\"notice\":\"Explicit deposit method using msg.sender\"},\"getAdmin()\":{\"notice\":\"Retrieve system admin\"},\"getAvailableValidatorCount()\":{\"notice\":\"Get the total available keys that are ready to be used for deposits\"},\"getCLFeeRecipient(bytes)\":{\"notice\":\"Compute the Consensus Layer Fee recipient address for a given validator public key\"},\"getELFeeRecipient(bytes)\":{\"notice\":\"Compute the Execution Layer Fee recipient address for a given validator public key\"},\"getGlobalFee()\":{\"notice\":\"Retrieve the global fee\"},\"getOperator(uint256)\":{\"notice\":\"Retrieve operator details\"},\"getOperatorFee()\":{\"notice\":\"Retrieve the operator fee\"},\"getOperatorFeeRecipient(bytes32)\":{\"notice\":\"Retrieve the Execution & Consensus Layer Fee operator recipient for a given public key\"},\"getPendingAdmin()\":{\"notice\":\"Get the new admin's address previously set for an ownership transfer\"},\"getTreasury()\":{\"notice\":\"Retrieve system treasury\"},\"getValidator(uint256,uint256)\":{\"notice\":\"Get details about a validator\"},\"getWithdrawer(bytes)\":{\"notice\":\"Retrieve withdrawer of public key\"},\"getWithdrawerFromPublicKeyRoot(bytes32)\":{\"notice\":\"Retrieve withdrawer of public key root\"},\"removeValidators(uint256,uint256[])\":{\"notice\":\"Remove unfunded validators\"},\"setGlobalFee(uint256)\":{\"notice\":\"Change the Global fee\"},\"setOperatorAddresses(uint256,address,address)\":{\"notice\":\"Set new operator addresses (operations and reward management)\"},\"setOperatorFee(uint256)\":{\"notice\":\"Change the Operator fee\"},\"setOperatorLimit(uint256,uint256)\":{\"notice\":\"Set operator staking limits\"},\"setTreasury(address)\":{\"notice\":\"Set new treasury\"},\"setWithdrawer(bytes,address)\":{\"notice\":\"Set withdrawer for public key\"},\"setWithdrawerCustomizationEnabled(bool)\":{\"notice\":\"Changes the behavior of the withdrawer customization logic\"},\"transferOwnership(address)\":{\"notice\":\"Set new admin\"},\"withdraw(bytes)\":{\"notice\":\"Withdraw both Consensus and Execution Layer Fee for a given validator public key\"},\"withdrawCLFee(bytes)\":{\"notice\":\"Withdraw the Consensus Layer Fee for a given validator public key\"},\"withdrawELFee(bytes)\":{\"notice\":\"Withdraw the Execution Layer Fee for a given validator public key\"}},\"notice\":\"You can use this contract to store validator keys and have users fund them and trigger deposits.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/StakingContract.sol\":\"StakingContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x1cc0efb01cbf008b768fd7b334786a6e358809198bb7e67f1c530af4957c6a21\",\"license\":\"MIT\"},\"src/contracts/StakingContract.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.10;\\n\\nimport \\\"./libs/UintLib.sol\\\";\\nimport \\\"./libs/BytesLib.sol\\\";\\nimport \\\"./interfaces/IFeeRecipient.sol\\\";\\nimport \\\"./interfaces/IDepositContract.sol\\\";\\nimport \\\"./libs/StakingContractStorageLib.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\n/// @title Ethereum Staking Contract\\n/// @author Kiln\\n/// @notice You can use this contract to store validator keys and have users fund them and trigger deposits.\\ncontract StakingContract {\\n    using StakingContractStorageLib for bytes32;\\n\\n    uint256 internal constant EXECUTION_LAYER_SALT_PREFIX = 0;\\n    uint256 internal constant CONSENSUS_LAYER_SALT_PREFIX = 1;\\n    uint256 public constant SIGNATURE_LENGTH = 96;\\n    uint256 public constant PUBLIC_KEY_LENGTH = 48;\\n    uint256 public constant DEPOSIT_SIZE = 32 ether;\\n    uint256 internal constant BASIS_POINTS = 10_000;\\n\\n    error Forbidden();\\n    error InvalidFee();\\n    error Deactivated();\\n    error NoOperators();\\n    error InvalidCall();\\n    error Unauthorized();\\n    error DepositFailure();\\n    error InvalidArgument();\\n    error UnsortedIndexes();\\n    error InvalidPublicKeys();\\n    error InvalidSignatures();\\n    error AlreadyInitialized();\\n    error InvalidDepositValue();\\n    error NotEnoughValidators();\\n    error InvalidValidatorCount();\\n    error DuplicateValidatorKey(bytes);\\n    error FundedValidatorDeletionAttempt();\\n    error OperatorLimitTooHigh(uint256 limit, uint256 keyCount);\\n    error MaximumOperatorCountAlreadyReached();\\n\\n    struct ValidatorAllocationCache {\\n        bool used;\\n        uint8 operatorIndex;\\n        uint32 funded;\\n        uint32 toDeposit;\\n        uint32 available;\\n    }\\n\\n    event Deposit(address indexed caller, address indexed withdrawer, bytes publicKey, bytes signature);\\n    event ValidatorKeysAdded(uint256 indexed operatorIndex, bytes publicKeys, bytes signatures);\\n    event ValidatorKeyRemoved(uint256 indexed operatorIndex, bytes publicKey);\\n    event ChangedWithdrawer(bytes publicKey, address newWithdrawer);\\n    event ChangedOperatorLimit(uint256 operatorIndex, uint256 limit);\\n    event ChangedTreasury(address newTreasury);\\n    event ChangedGlobalFee(uint256 newGlobalFee);\\n    event ChangedOperatorFee(uint256 newOperatorFee);\\n    event ChangedAdmin(address newAdmin);\\n    event NewOperator(address operatorAddress, address feeRecipientAddress, uint256 index);\\n    event ChangedOperatorAddresses(uint256 operatorIndex, address operatorAddress, address feeRecipientAddress);\\n    event DeactivatedOperator(uint256 _operatorIndex);\\n    event ActivatedOperator(uint256 _operatorIndex);\\n    event SetWithdrawerCustomizationStatus(bool _status);\\n\\n    /// @notice Ensures an initialisation call has been called only once per _version value\\n    /// @param _version The current initialisation value\\n    modifier init(uint256 _version) {\\n        if (_version != StakingContractStorageLib.getVersion() + 1) {\\n            revert AlreadyInitialized();\\n        }\\n\\n        StakingContractStorageLib.setVersion(_version);\\n        _;\\n    }\\n\\n    /// @notice Ensures that the caller is the admin\\n    modifier onlyAdmin() {\\n        if (msg.sender != StakingContractStorageLib.getAdmin()) {\\n            revert Unauthorized();\\n        }\\n\\n        _;\\n    }\\n\\n    /// @notice Ensures that the caller is the admin or the operator\\n    modifier onlyActiveOperatorOrAdmin(uint256 _operatorIndex) {\\n        if (msg.sender == StakingContractStorageLib.getAdmin()) {\\n            _;\\n        } else {\\n            _onlyActiveOperator(_operatorIndex);\\n            _;\\n        }\\n    }\\n\\n    /// @notice Ensures that the caller is the admin\\n    modifier onlyActiveOperator(uint256 _operatorIndex) {\\n        _onlyActiveOperator(_operatorIndex);\\n        _;\\n    }\\n\\n    /// @notice Ensures that the caller is the operator fee recipient\\n    modifier onlyOperatorFeeRecipient(uint256 _operatorIndex) {\\n        StakingContractStorageLib.OperatorInfo storage operatorInfo = StakingContractStorageLib.getOperators().value[\\n            _operatorIndex\\n        ];\\n\\n        if (operatorInfo.deactivated) {\\n            revert Deactivated();\\n        }\\n\\n        if (msg.sender != operatorInfo.feeRecipient) {\\n            revert Unauthorized();\\n        }\\n\\n        _;\\n    }\\n\\n    /// @notice Explicit deposit method using msg.sender\\n    /// @dev A multiple of 32 ETH should be sent\\n    function deposit() external payable {\\n        _deposit(msg.sender);\\n    }\\n\\n    /// @notice Implicit deposit method\\n    /// @dev A multiple of 32 ETH should be sent\\n    /// @dev The withdrawer is set to the message sender address\\n    receive() external payable {\\n        _deposit(msg.sender);\\n    }\\n\\n    /// @notice Fallback detection\\n    /// @dev Fails on any call that fallbacks\\n    fallback() external payable {\\n        revert InvalidCall();\\n    }\\n\\n    function initialize_1(\\n        address _admin,\\n        address _treasury,\\n        address _depositContract,\\n        address _elDispatcher,\\n        address _clDispatcher,\\n        address _feeRecipientImplementation,\\n        uint256 _globalFee,\\n        uint256 _operatorFee\\n    ) external init(1) {\\n        StakingContractStorageLib.setAdmin(_admin);\\n        StakingContractStorageLib.setTreasury(_treasury);\\n\\n        if (_globalFee > BASIS_POINTS) {\\n            revert InvalidFee();\\n        }\\n        StakingContractStorageLib.setGlobalFee(_globalFee);\\n        if (_operatorFee > BASIS_POINTS) {\\n            revert InvalidFee();\\n        }\\n        StakingContractStorageLib.setOperatorFee(_operatorFee);\\n\\n        StakingContractStorageLib.setELDispatcher(_elDispatcher);\\n        StakingContractStorageLib.setCLDispatcher(_clDispatcher);\\n        StakingContractStorageLib.setDepositContract(_depositContract);\\n        StakingContractStorageLib.setFeeRecipientImplementation(_feeRecipientImplementation);\\n    }\\n\\n    /// @notice Changes the behavior of the withdrawer customization logic\\n    /// @param _enabled True to allow users to customize the withdrawer\\n    function setWithdrawerCustomizationEnabled(bool _enabled) external onlyAdmin {\\n        StakingContractStorageLib.setWithdrawerCustomizationEnabled(_enabled);\\n        emit SetWithdrawerCustomizationStatus(_enabled);\\n    }\\n\\n    /// @notice Retrieve system admin\\n    function getAdmin() external view returns (address) {\\n        return StakingContractStorageLib.getAdmin();\\n    }\\n\\n    /// @notice Set new treasury\\n    /// @dev Only callable by admin\\n    /// @param _newTreasury New Treasury address\\n    function setTreasury(address _newTreasury) external onlyAdmin {\\n        emit ChangedTreasury(_newTreasury);\\n        StakingContractStorageLib.setTreasury(_newTreasury);\\n    }\\n\\n    /// @notice Retrieve system treasury\\n    function getTreasury() external view returns (address) {\\n        return StakingContractStorageLib.getTreasury();\\n    }\\n\\n    /// @notice Retrieve the global fee\\n    function getGlobalFee() external view returns (uint256) {\\n        return StakingContractStorageLib.getGlobalFee();\\n    }\\n\\n    /// @notice Retrieve the operator fee\\n    function getOperatorFee() external view returns (uint256) {\\n        return StakingContractStorageLib.getOperatorFee();\\n    }\\n\\n    /// @notice Compute the Execution Layer Fee recipient address for a given validator public key\\n    /// @param _publicKey Validator to get the recipient\\n    function getELFeeRecipient(bytes calldata _publicKey) external view returns (address) {\\n        return _getDeterministicReceiver(_publicKey, EXECUTION_LAYER_SALT_PREFIX);\\n    }\\n\\n    /// @notice Compute the Consensus Layer Fee recipient address for a given validator public key\\n    /// @param _publicKey Validator to get the recipient\\n    function getCLFeeRecipient(bytes calldata _publicKey) external view returns (address) {\\n        return _getDeterministicReceiver(_publicKey, CONSENSUS_LAYER_SALT_PREFIX);\\n    }\\n\\n    /// @notice Retrieve the Execution & Consensus Layer Fee operator recipient for a given public key\\n    function getOperatorFeeRecipient(bytes32 pubKeyRoot) external view returns (address) {\\n        return\\n            StakingContractStorageLib\\n                .getOperators()\\n                .value[StakingContractStorageLib.getOperatorIndexPerValidator().value[pubKeyRoot].operatorIndex]\\n                .feeRecipient;\\n    }\\n\\n    /// @notice Retrieve withdrawer of public key\\n    /// @param _publicKey Public Key to check\\n    function getWithdrawer(bytes calldata _publicKey) external view returns (address) {\\n        return _getWithdrawer(_getPubKeyRoot(_publicKey));\\n    }\\n\\n    /// @notice Retrieve withdrawer of public key root\\n    /// @param _publicKeyRoot Hash of the public key\\n    function getWithdrawerFromPublicKeyRoot(bytes32 _publicKeyRoot) external view returns (address) {\\n        return _getWithdrawer(_publicKeyRoot);\\n    }\\n\\n    /// @notice Retrieve operator details\\n    /// @param _operatorIndex Operator index\\n    function getOperator(uint256 _operatorIndex)\\n        external\\n        view\\n        returns (\\n            address operatorAddress,\\n            address feeRecipientAddress,\\n            uint256 limit,\\n            uint256 keys,\\n            uint256 funded,\\n            uint256 available,\\n            bool deactivated\\n        )\\n    {\\n        StakingContractStorageLib.OperatorsSlot storage operators = StakingContractStorageLib.getOperators();\\n        if (_operatorIndex < operators.value.length) {\\n            StakingContractStorageLib.ValidatorsFundingInfo memory _operatorInfo = StakingContractStorageLib\\n                .getValidatorsFundingInfo(_operatorIndex);\\n            StakingContractStorageLib.OperatorInfo storage _operator = operators.value[_operatorIndex];\\n\\n            (operatorAddress, feeRecipientAddress, limit, keys, deactivated) = (\\n                _operator.operator,\\n                _operator.feeRecipient,\\n                _operator.limit,\\n                _operator.publicKeys.length,\\n                _operator.deactivated\\n            );\\n            (funded, available) = (_operatorInfo.funded, _operatorInfo.availableKeys);\\n        }\\n    }\\n\\n    /// @notice Get details about a validator\\n    /// @param _operatorIndex Index of the operator running the validator\\n    /// @param _validatorIndex Index of the validator\\n    function getValidator(uint256 _operatorIndex, uint256 _validatorIndex)\\n        external\\n        view\\n        returns (\\n            bytes memory publicKey,\\n            bytes memory signature,\\n            address withdrawer,\\n            bool funded\\n        )\\n    {\\n        StakingContractStorageLib.OperatorsSlot storage operators = StakingContractStorageLib.getOperators();\\n        publicKey = operators.value[_operatorIndex].publicKeys[_validatorIndex];\\n        signature = operators.value[_operatorIndex].signatures[_validatorIndex];\\n        withdrawer = _getWithdrawer(_getPubKeyRoot(publicKey));\\n        funded = _validatorIndex < StakingContractStorageLib.getValidatorsFundingInfo(_operatorIndex).funded;\\n    }\\n\\n    /// @notice Get the total available keys that are ready to be used for deposits\\n    function getAvailableValidatorCount() external view returns (uint256) {\\n        return StakingContractStorageLib.getTotalAvailableValidators();\\n    }\\n\\n    /// @notice Set new admin\\n    /// @dev Only callable by admin\\n    /// @param _newAdmin New Administrator address\\n    function transferOwnership(address _newAdmin) external onlyAdmin {\\n        StakingContractStorageLib.setPendingAdmin(_newAdmin);\\n    }\\n\\n    /// @notice New admin must accept its role by calling this method\\n    /// @dev Only callable by new admin\\n    function acceptOwnership() external {\\n        address newAdmin = StakingContractStorageLib.getPendingAdmin();\\n\\n        if (msg.sender != newAdmin) {\\n            revert Unauthorized();\\n        }\\n        StakingContractStorageLib.setAdmin(newAdmin);\\n        emit ChangedAdmin(newAdmin);\\n    }\\n\\n    /// @notice Get the new admin's address previously set for an ownership transfer\\n    function getPendingAdmin() external view returns (address) {\\n        return StakingContractStorageLib.getPendingAdmin();\\n    }\\n\\n    /// @notice Add new operator\\n    /// @dev Only callable by admin\\n    /// @param _operatorAddress Operator address allowed to add / remove validators\\n    /// @param _feeRecipientAddress Operator address used to manage rewards\\n    function addOperator(address _operatorAddress, address _feeRecipientAddress) external onlyAdmin returns (uint256) {\\n        StakingContractStorageLib.OperatorsSlot storage operators = StakingContractStorageLib.getOperators();\\n        StakingContractStorageLib.OperatorInfo memory newOperator;\\n\\n        if (operators.value.length == 251) {\\n            revert MaximumOperatorCountAlreadyReached();\\n        }\\n        newOperator.operator = _operatorAddress;\\n        newOperator.feeRecipient = _feeRecipientAddress;\\n        operators.value.push(newOperator);\\n        uint256 operatorIndex = operators.value.length - 1;\\n        emit NewOperator(_operatorAddress, _feeRecipientAddress, operatorIndex);\\n        return operatorIndex;\\n    }\\n\\n    /// @notice Set new operator addresses (operations and reward management)\\n    /// @dev Only callable by fee recipient address manager\\n    /// @param _operatorIndex Index of the operator to update\\n    /// @param _operatorAddress New operator address for operations management\\n    /// @param _feeRecipientAddress New operator address for reward management\\n    function setOperatorAddresses(\\n        uint256 _operatorIndex,\\n        address _operatorAddress,\\n        address _feeRecipientAddress\\n    ) external onlyOperatorFeeRecipient(_operatorIndex) {\\n        StakingContractStorageLib.OperatorsSlot storage operators = StakingContractStorageLib.getOperators();\\n\\n        operators.value[_operatorIndex].operator = _operatorAddress;\\n        operators.value[_operatorIndex].feeRecipient = _feeRecipientAddress;\\n        emit ChangedOperatorAddresses(_operatorIndex, _operatorAddress, _feeRecipientAddress);\\n    }\\n\\n    /// @notice Set withdrawer for public key\\n    /// @dev Only callable by current public key withdrawer\\n    /// @param _publicKey Public key to change withdrawer\\n    /// @param _newWithdrawer New withdrawer address\\n    function setWithdrawer(bytes calldata _publicKey, address _newWithdrawer) external {\\n        if (!StakingContractStorageLib.getWithdrawerCustomizationEnabled()) {\\n            revert Forbidden();\\n        }\\n        bytes32 pubkeyRoot = sha256(BytesLib.pad64(_publicKey));\\n        StakingContractStorageLib.WithdrawersSlot storage withdrawers = StakingContractStorageLib.getWithdrawers();\\n\\n        if (withdrawers.value[pubkeyRoot] != msg.sender) {\\n            revert Unauthorized();\\n        }\\n\\n        emit ChangedWithdrawer(_publicKey, _newWithdrawer);\\n\\n        withdrawers.value[pubkeyRoot] = _newWithdrawer;\\n    }\\n\\n    /// @notice Set operator staking limits\\n    /// @dev Only callable by admin\\n    /// @dev Limit should not exceed the validator key count of the operator\\n    /// @dev Keys should be registered before limit is increased\\n    /// @dev Allows all keys to be verified by the system admin before limit is increased\\n    /// @param _operatorIndex Operator Index\\n    /// @param _limit New staking limit\\n    function setOperatorLimit(uint256 _operatorIndex, uint256 _limit) external onlyAdmin {\\n        StakingContractStorageLib.OperatorsSlot storage operators = StakingContractStorageLib.getOperators();\\n        if (operators.value[_operatorIndex].deactivated) {\\n            revert Deactivated();\\n        }\\n        uint256 publicKeyCount = operators.value[_operatorIndex].publicKeys.length;\\n        if (publicKeyCount < _limit) {\\n            revert OperatorLimitTooHigh(_limit, publicKeyCount);\\n        }\\n        operators.value[_operatorIndex].limit = _limit;\\n        _updateAvailableValidatorCount(_operatorIndex);\\n        emit ChangedOperatorLimit(_operatorIndex, _limit);\\n    }\\n\\n    /// @notice Deactivates an operator and changes the fee recipient address and the staking limit\\n    /// @param _operatorIndex Operator Index\\n    /// @param _temporaryFeeRecipient Temporary address to receive funds decided by the system admin\\n    function deactivateOperator(uint256 _operatorIndex, address _temporaryFeeRecipient) external onlyAdmin {\\n        StakingContractStorageLib.OperatorsSlot storage operators = StakingContractStorageLib.getOperators();\\n        operators.value[_operatorIndex].limit = 0;\\n        emit ChangedOperatorLimit(_operatorIndex, 0);\\n        operators.value[_operatorIndex].deactivated = true;\\n        emit DeactivatedOperator(_operatorIndex);\\n        operators.value[_operatorIndex].feeRecipient = _temporaryFeeRecipient;\\n        emit ChangedOperatorAddresses(_operatorIndex, operators.value[_operatorIndex].operator, _temporaryFeeRecipient);\\n        _updateAvailableValidatorCount(_operatorIndex);\\n    }\\n\\n    /// @notice Activates an operator, without changing its 0 staking limit\\n    /// @param _operatorIndex Operator Index\\n    /// @param _newFeeRecipient Sets the fee recipient address\\n    function activateOperator(uint256 _operatorIndex, address _newFeeRecipient) external onlyAdmin {\\n        StakingContractStorageLib.OperatorsSlot storage operators = StakingContractStorageLib.getOperators();\\n        operators.value[_operatorIndex].deactivated = false;\\n        emit ActivatedOperator(_operatorIndex);\\n        operators.value[_operatorIndex].feeRecipient = _newFeeRecipient;\\n        emit ChangedOperatorAddresses(_operatorIndex, operators.value[_operatorIndex].operator, _newFeeRecipient);\\n    }\\n\\n    /// @notice Change the Operator fee\\n    /// @param _operatorFee Fee in Basis Point\\n    function setOperatorFee(uint256 _operatorFee) external onlyAdmin {\\n        if (_operatorFee > BASIS_POINTS) {\\n            revert InvalidFee();\\n        }\\n        StakingContractStorageLib.setOperatorFee(_operatorFee);\\n        emit ChangedOperatorFee(_operatorFee);\\n    }\\n\\n    /// @notice Change the Global fee\\n    /// @param _globalFee Fee in Basis Point\\n    function setGlobalFee(uint256 _globalFee) external onlyAdmin {\\n        if (_globalFee > BASIS_POINTS) {\\n            revert InvalidFee();\\n        }\\n        StakingContractStorageLib.setGlobalFee(_globalFee);\\n        emit ChangedGlobalFee(_globalFee);\\n    }\\n\\n    /// @notice Add new validator public keys and signatures\\n    /// @dev Only callable by operator\\n    /// @param _operatorIndex Operator Index\\n    /// @param _keyCount Number of keys added\\n    /// @param _publicKeys Concatenated _keyCount public keys\\n    /// @param _signatures Concatenated _keyCount signatures\\n    function addValidators(\\n        uint256 _operatorIndex,\\n        uint256 _keyCount,\\n        bytes calldata _publicKeys,\\n        bytes calldata _signatures\\n    ) external onlyActiveOperator(_operatorIndex) {\\n        if (_keyCount == 0) {\\n            revert InvalidArgument();\\n        }\\n\\n        if (_publicKeys.length % PUBLIC_KEY_LENGTH != 0 || _publicKeys.length / PUBLIC_KEY_LENGTH != _keyCount) {\\n            revert InvalidPublicKeys();\\n        }\\n\\n        if (_signatures.length % SIGNATURE_LENGTH != 0 || _signatures.length / SIGNATURE_LENGTH != _keyCount) {\\n            revert InvalidSignatures();\\n        }\\n\\n        StakingContractStorageLib.OperatorsSlot storage operators = StakingContractStorageLib.getOperators();\\n        StakingContractStorageLib.OperatorIndexPerValidatorSlot\\n            storage operatorIndexPerValidator = StakingContractStorageLib.getOperatorIndexPerValidator();\\n\\n        for (uint256 i; i < _keyCount; ) {\\n            bytes memory publicKey = BytesLib.slice(_publicKeys, i * PUBLIC_KEY_LENGTH, PUBLIC_KEY_LENGTH);\\n            bytes memory signature = BytesLib.slice(_signatures, i * SIGNATURE_LENGTH, SIGNATURE_LENGTH);\\n\\n            operators.value[_operatorIndex].publicKeys.push(publicKey);\\n            operators.value[_operatorIndex].signatures.push(signature);\\n\\n            bytes32 pubKeyRoot = _getPubKeyRoot(publicKey);\\n\\n            if (operatorIndexPerValidator.value[pubKeyRoot].enabled) {\\n                revert DuplicateValidatorKey(publicKey);\\n            }\\n\\n            operatorIndexPerValidator.value[pubKeyRoot] = StakingContractStorageLib.OperatorIndex({\\n                enabled: true,\\n                operatorIndex: uint32(_operatorIndex)\\n            });\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit ValidatorKeysAdded(_operatorIndex, _publicKeys, _signatures);\\n\\n        _updateAvailableValidatorCount(_operatorIndex);\\n    }\\n\\n    /// @notice Remove unfunded validators\\n    /// @dev Only callable by operator\\n    /// @dev Indexes should be provided in decreasing order\\n    /// @dev The limit will be set to the lowest removed operator index to ensure all changes above the\\n    ///      lowest removed validator key are verified by the system administrator\\n    /// @param _operatorIndex Operator Index\\n    /// @param _indexes List of indexes to delete, in decreasing order\\n    function removeValidators(uint256 _operatorIndex, uint256[] calldata _indexes)\\n        external\\n        onlyActiveOperatorOrAdmin(_operatorIndex)\\n    {\\n        if (_indexes.length == 0) {\\n            revert InvalidArgument();\\n        }\\n\\n        StakingContractStorageLib.ValidatorsFundingInfo memory operatorInfo = StakingContractStorageLib\\n            .getValidatorsFundingInfo(_operatorIndex);\\n        StakingContractStorageLib.OperatorsSlot storage operators = StakingContractStorageLib.getOperators();\\n\\n        if (_indexes[_indexes.length - 1] < operatorInfo.funded) {\\n            revert FundedValidatorDeletionAttempt();\\n        }\\n        for (uint256 i; i < _indexes.length; ) {\\n            if (i > 0 && _indexes[i] >= _indexes[i - 1]) {\\n                revert UnsortedIndexes();\\n            }\\n\\n            emit ValidatorKeyRemoved(_operatorIndex, operators.value[_operatorIndex].publicKeys[_indexes[i]]);\\n            if (_indexes[i] == operators.value[_operatorIndex].publicKeys.length - 1) {\\n                operators.value[_operatorIndex].publicKeys.pop();\\n                operators.value[_operatorIndex].signatures.pop();\\n            } else {\\n                operators.value[_operatorIndex].publicKeys[_indexes[i]] = operators.value[_operatorIndex].publicKeys[\\n                    operators.value[_operatorIndex].publicKeys.length - 1\\n                ];\\n                operators.value[_operatorIndex].publicKeys.pop();\\n                operators.value[_operatorIndex].signatures[_indexes[i]] = operators.value[_operatorIndex].signatures[\\n                    operators.value[_operatorIndex].signatures.length - 1\\n                ];\\n                operators.value[_operatorIndex].signatures.pop();\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        if (_indexes[_indexes.length - 1] < operators.value[_operatorIndex].limit) {\\n            operators.value[_operatorIndex].limit = _indexes[_indexes.length - 1];\\n            emit ChangedOperatorLimit(_operatorIndex, _indexes[_indexes.length - 1]);\\n        }\\n\\n        _updateAvailableValidatorCount(_operatorIndex);\\n    }\\n\\n    /// @notice Withdraw the Execution Layer Fee for a given validator public key\\n    /// @dev Funds are sent to the withdrawer account\\n    /// @dev This method is public on purpose\\n    /// @param _publicKey Validator to withdraw Execution Layer Fees from\\n    function withdrawELFee(bytes calldata _publicKey) external {\\n        _deployAndWithdraw(_publicKey, EXECUTION_LAYER_SALT_PREFIX, StakingContractStorageLib.getELDispatcher());\\n    }\\n\\n    /// @notice Withdraw the Consensus Layer Fee for a given validator public key\\n    /// @dev Funds are sent to the withdrawer account\\n    /// @dev This method is public on purpose\\n    /// @param _publicKey Validator to withdraw Consensus Layer Fees from\\n    function withdrawCLFee(bytes calldata _publicKey) external {\\n        _deployAndWithdraw(_publicKey, CONSENSUS_LAYER_SALT_PREFIX, StakingContractStorageLib.getCLDispatcher());\\n    }\\n\\n    /// @notice Withdraw both Consensus and Execution Layer Fee for a given validator public key\\n    /// @dev Reverts if any is null\\n    /// @param _publicKey Validator to withdraw Execution and Consensus Layer Fees from\\n    function withdraw(bytes calldata _publicKey) external {\\n        _deployAndWithdraw(_publicKey, EXECUTION_LAYER_SALT_PREFIX, StakingContractStorageLib.getELDispatcher());\\n        _deployAndWithdraw(_publicKey, CONSENSUS_LAYER_SALT_PREFIX, StakingContractStorageLib.getCLDispatcher());\\n    }\\n\\n    /// \\u2588\\u2588 \\u2588\\u2588\\u2588    \\u2588\\u2588 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588  \\u2588\\u2588\\u2588    \\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588  \\u2588\\u2588\\n    /// \\u2588\\u2588 \\u2588\\u2588\\u2588\\u2588   \\u2588\\u2588    \\u2588\\u2588    \\u2588\\u2588      \\u2588\\u2588   \\u2588\\u2588 \\u2588\\u2588\\u2588\\u2588   \\u2588\\u2588 \\u2588\\u2588   \\u2588\\u2588 \\u2588\\u2588\\n    /// \\u2588\\u2588 \\u2588\\u2588 \\u2588\\u2588  \\u2588\\u2588    \\u2588\\u2588    \\u2588\\u2588\\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588  \\u2588\\u2588 \\u2588\\u2588  \\u2588\\u2588 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588 \\u2588\\u2588\\n    /// \\u2588\\u2588 \\u2588\\u2588  \\u2588\\u2588 \\u2588\\u2588    \\u2588\\u2588    \\u2588\\u2588      \\u2588\\u2588   \\u2588\\u2588 \\u2588\\u2588  \\u2588\\u2588 \\u2588\\u2588 \\u2588\\u2588   \\u2588\\u2588 \\u2588\\u2588\\n    /// \\u2588\\u2588 \\u2588\\u2588   \\u2588\\u2588\\u2588\\u2588    \\u2588\\u2588    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588 \\u2588\\u2588   \\u2588\\u2588 \\u2588\\u2588   \\u2588\\u2588\\u2588\\u2588 \\u2588\\u2588   \\u2588\\u2588 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n\\n    function _onlyActiveOperator(uint256 _operatorIndex) internal view {\\n        StakingContractStorageLib.OperatorInfo storage operatorInfo = StakingContractStorageLib.getOperators().value[\\n            _operatorIndex\\n        ];\\n\\n        if (operatorInfo.deactivated) {\\n            revert Deactivated();\\n        }\\n\\n        if (msg.sender != operatorInfo.operator) {\\n            revert Unauthorized();\\n        }\\n    }\\n\\n    function _getPubKeyRoot(bytes memory _publicKey) internal pure returns (bytes32) {\\n        return sha256(BytesLib.pad64(_publicKey));\\n    }\\n\\n    function _getWithdrawer(bytes32 _publicKeyRoot) internal view returns (address) {\\n        return StakingContractStorageLib.getWithdrawers().value[_publicKeyRoot];\\n    }\\n\\n    function _updateAvailableValidatorCount(uint256 _operatorIndex) internal {\\n        StakingContractStorageLib.ValidatorsFundingInfo memory validatorFundingInfo = StakingContractStorageLib\\n            .getValidatorsFundingInfo(_operatorIndex);\\n        StakingContractStorageLib.OperatorsSlot storage operators = StakingContractStorageLib.getOperators();\\n\\n        uint32 oldAvailableCount = validatorFundingInfo.availableKeys;\\n        uint32 newAvailableCount = 0;\\n        uint256 cap = _min(operators.value[_operatorIndex].limit, operators.value[_operatorIndex].publicKeys.length);\\n\\n        if (cap <= validatorFundingInfo.funded) {\\n            StakingContractStorageLib.setValidatorsFundingInfo(_operatorIndex, 0, validatorFundingInfo.funded);\\n        } else {\\n            newAvailableCount = uint32(cap - validatorFundingInfo.funded);\\n            StakingContractStorageLib.setValidatorsFundingInfo(\\n                _operatorIndex,\\n                newAvailableCount,\\n                validatorFundingInfo.funded\\n            );\\n        }\\n\\n        if (oldAvailableCount != newAvailableCount) {\\n            StakingContractStorageLib.setTotalAvailableValidators(\\n                (StakingContractStorageLib.getTotalAvailableValidators() - oldAvailableCount) + newAvailableCount\\n            );\\n        }\\n    }\\n\\n    function _addressToWithdrawalCredentials(address _recipient) internal pure returns (bytes32) {\\n        return\\n            bytes32(uint256(uint160(_recipient)) + 0x0100000000000000000000000000000000000000000000000000000000000000);\\n    }\\n\\n    function _depositValidatorsOfOperator(\\n        uint256 _operatorIndex,\\n        uint256 _validatorCount,\\n        address _withdrawer\\n    ) internal {\\n        StakingContractStorageLib.OperatorsSlot storage operators = StakingContractStorageLib.getOperators();\\n        StakingContractStorageLib.OperatorInfo storage operator = operators.value[_operatorIndex];\\n        StakingContractStorageLib.ValidatorsFundingInfo memory vfi = StakingContractStorageLib.getValidatorsFundingInfo(\\n            _operatorIndex\\n        );\\n\\n        for (uint256 i = vfi.funded; i < vfi.funded + _validatorCount; ) {\\n            bytes memory publicKey = operator.publicKeys[i];\\n            bytes memory signature = operator.signatures[i];\\n            address consensusLayerRecipient = _getDeterministicReceiver(publicKey, CONSENSUS_LAYER_SALT_PREFIX);\\n            bytes32 withdrawalCredentials = _addressToWithdrawalCredentials(consensusLayerRecipient);\\n            _depositValidator(publicKey, signature, withdrawalCredentials);\\n            bytes32 pubkeyRoot = _getPubKeyRoot(publicKey);\\n            StakingContractStorageLib.getWithdrawers().value[pubkeyRoot] = _withdrawer;\\n            emit Deposit(msg.sender, _withdrawer, publicKey, signature);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        StakingContractStorageLib.setValidatorsFundingInfo(\\n            _operatorIndex,\\n            uint32(vfi.availableKeys - _validatorCount),\\n            uint32(vfi.funded + _validatorCount)\\n        );\\n    }\\n\\n    /// @notice Internal utility to deposit a public key, its signature and 32 ETH to the consensus layer\\n    /// @param _publicKey The Public Key to deposit\\n    /// @param _signature The Signature to deposit\\n    /// @param _withdrawalCredentials The Withdrawal Credentials to deposit\\n    function _depositValidator(\\n        bytes memory _publicKey,\\n        bytes memory _signature,\\n        bytes32 _withdrawalCredentials\\n    ) internal {\\n        bytes32 pubkeyRoot = _getPubKeyRoot(_publicKey);\\n        bytes32 signatureRoot = sha256(\\n            abi.encodePacked(\\n                sha256(BytesLib.slice(_signature, 0, 64)),\\n                sha256(BytesLib.pad64(BytesLib.slice(_signature, 64, SIGNATURE_LENGTH - 64)))\\n            )\\n        );\\n\\n        uint256 depositAmount = DEPOSIT_SIZE / 1000000000 wei;\\n        assert(depositAmount * 1000000000 wei == DEPOSIT_SIZE);\\n\\n        bytes32 depositDataRoot = sha256(\\n            abi.encodePacked(\\n                sha256(abi.encodePacked(pubkeyRoot, _withdrawalCredentials)),\\n                sha256(abi.encodePacked(Uint256Lib.toLittleEndian64(depositAmount), signatureRoot))\\n            )\\n        );\\n\\n        uint256 targetBalance = address(this).balance - DEPOSIT_SIZE;\\n\\n        IDepositContract(StakingContractStorageLib.getDepositContract()).deposit{value: DEPOSIT_SIZE}(\\n            _publicKey,\\n            abi.encodePacked(_withdrawalCredentials),\\n            _signature,\\n            depositDataRoot\\n        );\\n\\n        if (address(this).balance != targetBalance) {\\n            revert DepositFailure();\\n        }\\n    }\\n\\n    function _depositOnOneOperator(\\n        address _withdrawer,\\n        uint256 _depositCount,\\n        uint256 _totalAvailableValidators\\n    ) internal {\\n        _depositValidatorsOfOperator(0, _depositCount, _withdrawer);\\n        StakingContractStorageLib.setTotalAvailableValidators(_totalAvailableValidators - _depositCount);\\n    }\\n\\n    function _depositOnTwoOperators(\\n        address _withdrawer,\\n        uint256 _depositCount,\\n        uint256 _totalAvailableValidators\\n    ) internal {\\n        StakingContractStorageLib.ValidatorsFundingInfo memory oneOsi = StakingContractStorageLib\\n            .getValidatorsFundingInfo(0);\\n        StakingContractStorageLib.ValidatorsFundingInfo memory twoOsi = StakingContractStorageLib\\n            .getValidatorsFundingInfo(1);\\n\\n        uint256 oneDepositCount;\\n        uint256 twoDepositCount;\\n\\n        // using this tactic to prevent deposits of 1 validator to always go to operator 2\\n        if (block.number % 2 == 0) {\\n            oneDepositCount = _depositCount / 2;\\n            twoDepositCount = _depositCount - oneDepositCount;\\n        } else {\\n            twoDepositCount = _depositCount / 2;\\n            oneDepositCount = _depositCount - twoDepositCount;\\n        }\\n\\n        if (oneDepositCount > oneOsi.availableKeys) {\\n            twoDepositCount = _depositCount - oneOsi.availableKeys;\\n            oneDepositCount = oneOsi.availableKeys;\\n        } else if (twoDepositCount > twoOsi.availableKeys) {\\n            oneDepositCount = _depositCount - twoOsi.availableKeys;\\n            twoDepositCount = twoOsi.availableKeys;\\n        }\\n\\n        if (oneDepositCount > 0) {\\n            _depositValidatorsOfOperator(0, oneDepositCount, _withdrawer);\\n        }\\n        if (twoDepositCount > 0) {\\n            _depositValidatorsOfOperator(1, twoDepositCount, _withdrawer);\\n        }\\n        StakingContractStorageLib.setTotalAvailableValidators(\\n            _totalAvailableValidators - (oneDepositCount + twoDepositCount)\\n        );\\n    }\\n\\n    function _getBaseSkip(\\n        bytes32 blockHash,\\n        uint256 index,\\n        uint8 prime\\n    ) internal pure returns (uint8 base, uint8 skip) {\\n        base = uint8(blockHash[(index * 2) % 32]) % prime;\\n        skip = (uint8(blockHash[((index * 2) + 1) % 32]) % (prime - 1)) + 1;\\n    }\\n\\n    function _getOperatorFundedCount(uint8 operatorIndex, ValidatorAllocationCache[] memory vd)\\n        internal\\n        view\\n        returns (uint32)\\n    {\\n        if (operatorIndex >= vd.length) {\\n            return 0;\\n        }\\n        if (vd[operatorIndex].used == false) {\\n            StakingContractStorageLib.ValidatorsFundingInfo memory osi = StakingContractStorageLib\\n                .getValidatorsFundingInfo(operatorIndex);\\n            vd[operatorIndex].used = true;\\n            vd[operatorIndex].funded = osi.funded;\\n            vd[operatorIndex].available = osi.availableKeys;\\n        }\\n        return vd[operatorIndex].funded + vd[operatorIndex].toDeposit;\\n    }\\n\\n    function _getOperatorAvailableCount(uint8 operatorIndex, ValidatorAllocationCache[] memory vd)\\n        internal\\n        view\\n        returns (uint32)\\n    {\\n        if (operatorIndex >= vd.length) {\\n            return 0;\\n        }\\n        if (vd[operatorIndex].used == false) {\\n            StakingContractStorageLib.ValidatorsFundingInfo memory osi = StakingContractStorageLib\\n                .getValidatorsFundingInfo(operatorIndex);\\n            vd[operatorIndex].used = true;\\n            vd[operatorIndex].funded = osi.funded;\\n            vd[operatorIndex].available = osi.availableKeys;\\n        }\\n        return vd[operatorIndex].available - vd[operatorIndex].toDeposit;\\n    }\\n\\n    function _assignTemporaryDeposit(uint8 operatorIndex, ValidatorAllocationCache[] memory vd) internal pure {\\n        vd[operatorIndex].toDeposit += 1;\\n    }\\n\\n    function _getBestOperator(\\n        uint8 alphaIndex,\\n        uint8 betaIndex,\\n        bytes32 blockHash,\\n        ValidatorAllocationCache[] memory vd\\n    ) internal view returns (uint8) {\\n        uint256 alphaFundedCount = _getOperatorFundedCount(alphaIndex, vd);\\n        uint256 betaFundedCount = _getOperatorFundedCount(betaIndex, vd);\\n        if (alphaFundedCount < betaFundedCount) {\\n            return alphaIndex;\\n        } else if (alphaFundedCount > betaFundedCount) {\\n            return betaIndex;\\n        } else {\\n            bool coinToss = (uint8(blockHash[(alphaIndex + betaIndex) % 32]) % 2) == 1;\\n            if (coinToss == false) {\\n                return betaIndex;\\n            } else {\\n                return alphaIndex;\\n            }\\n        }\\n    }\\n\\n    function _getElligibleOperators(\\n        uint8 base,\\n        uint8 skip,\\n        uint8 prime,\\n        ValidatorAllocationCache[] memory vd\\n    ) internal view returns (uint8, uint8) {\\n        int16 alphaIndex = -1;\\n        int16 betaIndex = -1;\\n        uint8 index = base;\\n        while (alphaIndex == -1 || betaIndex == -1) {\\n            if (_getOperatorAvailableCount(index, vd) > 0) {\\n                if (alphaIndex == -1) {\\n                    alphaIndex = int8(index);\\n                } else {\\n                    betaIndex = int8(index);\\n                }\\n            }\\n            index = uint8((uint256(index) + skip) % prime);\\n            if (index == base && betaIndex == -1) {\\n                betaIndex = alphaIndex;\\n            }\\n        }\\n        return (uint8(int8(alphaIndex)), uint8(int8(betaIndex)));\\n    }\\n\\n    function _depositOnThreeOrMoreOperators(\\n        address _withdrawer,\\n        uint256 _depositCount,\\n        uint256 _totalAvailableValidators,\\n        StakingContractStorageLib.OperatorsSlot storage _operators\\n    ) internal {\\n        uint256 operatorCount = _operators.value.length;\\n        uint8 optimusPrime = _getClosestPrimeAbove(uint8(operatorCount));\\n        bytes32 blockHash = blockhash(block.number - 1); // weak random number as it's not a security issue\\n\\n        ValidatorAllocationCache[] memory vd = new ValidatorAllocationCache[](operatorCount);\\n\\n        for (uint256 index; index < _depositCount; ) {\\n            // Retrieve base index and skip value based on block hash and current loop index\\n            (uint8 base, uint8 skip) = _getBaseSkip(blockHash, index, optimusPrime);\\n            // Retrieve two operator indexes pointing to two (or the same) operator(s) that have at least one available\\n            // validator key to be used for a deposit. This method takes into account possible pending deposits from\\n            // previous loop rounds.\\n            (uint8 alphaIndex, uint8 betaIndex) = _getElligibleOperators(base, skip, optimusPrime, vd);\\n\\n            if (alphaIndex == betaIndex) {\\n                // Assign the deposit to the only operator having available keys\\n                _assignTemporaryDeposit(alphaIndex, vd);\\n            } else {\\n                // Assign the deposit to the operator having the lowest amount of funded keys\\n                _assignTemporaryDeposit(_getBestOperator(alphaIndex, betaIndex, blockHash, vd), vd);\\n            }\\n\\n            unchecked {\\n                ++index;\\n            }\\n        }\\n\\n        // Loop through the cached operator values and deposit any pending deposits\\n        for (uint256 index; index < vd.length; ) {\\n            if (vd[index].toDeposit > 0) {\\n                _depositValidatorsOfOperator(index, vd[index].toDeposit, _withdrawer);\\n            }\\n            unchecked {\\n                ++index;\\n            }\\n        }\\n\\n        StakingContractStorageLib.setTotalAvailableValidators(_totalAvailableValidators - _depositCount);\\n    }\\n\\n    function _deposit(address _withdrawer) internal {\\n        if (msg.value == 0 || msg.value % DEPOSIT_SIZE != 0) {\\n            revert InvalidDepositValue();\\n        }\\n        uint256 totalAvailableValidators = StakingContractStorageLib.getTotalAvailableValidators();\\n        uint256 depositCount = msg.value / DEPOSIT_SIZE;\\n        if (depositCount > totalAvailableValidators) {\\n            revert NotEnoughValidators();\\n        }\\n        StakingContractStorageLib.OperatorsSlot storage operators = StakingContractStorageLib.getOperators();\\n        if (operators.value.length == 0) {\\n            revert NoOperators();\\n        } else if (operators.value.length == 1) {\\n            _depositOnOneOperator(_withdrawer, depositCount, totalAvailableValidators);\\n        } else if (operators.value.length == 2) {\\n            _depositOnTwoOperators(_withdrawer, depositCount, totalAvailableValidators);\\n        } else {\\n            _depositOnThreeOrMoreOperators(_withdrawer, depositCount, totalAvailableValidators, operators);\\n        }\\n    }\\n\\n    function _primes() internal pure returns (uint8[54] memory primes) {\\n        primes = [\\n            2,\\n            3,\\n            5,\\n            7,\\n            11,\\n            13,\\n            17,\\n            19,\\n            23,\\n            29,\\n            31,\\n            37,\\n            41,\\n            43,\\n            47,\\n            53,\\n            59,\\n            61,\\n            67,\\n            71,\\n            73,\\n            79,\\n            83,\\n            89,\\n            97,\\n            101,\\n            103,\\n            107,\\n            109,\\n            113,\\n            127,\\n            131,\\n            137,\\n            139,\\n            149,\\n            151,\\n            157,\\n            163,\\n            167,\\n            173,\\n            179,\\n            181,\\n            191,\\n            193,\\n            197,\\n            199,\\n            211,\\n            223,\\n            227,\\n            229,\\n            233,\\n            239,\\n            241,\\n            251\\n        ];\\n    }\\n\\n    function _getClosestPrimeAbove(uint8 _count) internal pure returns (uint8) {\\n        uint8[54] memory primes = _primes();\\n        for (uint256 i; i < primes.length; ) {\\n            if (primes[i] >= _count) {\\n                return primes[i];\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        revert InvalidValidatorCount();\\n    }\\n\\n    function _min(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        if (_a < _b) {\\n            return _a;\\n        }\\n        return _b;\\n    }\\n\\n    /// @notice Internal utility to compute the receiver deterministic address\\n    /// @param _publicKey Public Key assigned to the receiver\\n    /// @param _prefix Prefix used to generate multiple receivers per public key\\n    function _getDeterministicReceiver(bytes memory _publicKey, uint256 _prefix) internal view returns (address) {\\n        bytes32 publicKeyRoot = _getPubKeyRoot(_publicKey);\\n        bytes32 salt = sha256(abi.encodePacked(_prefix, publicKeyRoot));\\n        address implementation = StakingContractStorageLib.getFeeRecipientImplementation();\\n        return Clones.predictDeterministicAddress(implementation, salt);\\n    }\\n\\n    /// @notice Internal utility to deploy and withdraw the fees from a receiver\\n    /// @param _publicKey Public Key assigned to the receiver\\n    /// @param _prefix Prefix used to generate multiple receivers per public key\\n    /// @param _dispatcher Address of the dispatcher contract\\n    function _deployAndWithdraw(\\n        bytes calldata _publicKey,\\n        uint256 _prefix,\\n        address _dispatcher\\n    ) internal {\\n        bytes32 publicKeyRoot = _getPubKeyRoot(_publicKey);\\n        bytes32 feeRecipientSalt = sha256(abi.encodePacked(_prefix, publicKeyRoot));\\n        address implementation = StakingContractStorageLib.getFeeRecipientImplementation();\\n        address feeRecipientAddress = Clones.predictDeterministicAddress(implementation, feeRecipientSalt);\\n        if (feeRecipientAddress.code.length == 0) {\\n            Clones.cloneDeterministic(implementation, feeRecipientSalt);\\n            IFeeRecipient(feeRecipientAddress).init(_dispatcher, publicKeyRoot);\\n        }\\n        IFeeRecipient(feeRecipientAddress).withdraw();\\n    }\\n}\\n\",\"keccak256\":\"0x02f38137edace9b69667228cc40a65ad8ba39c727a35d4334aa72936537c2288\",\"license\":\"BUSL-1.1\"},\"src/contracts/interfaces/IDepositContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10;\\n\\ninterface IDepositContract {\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawalCredentials,\\n        bytes calldata signature,\\n        bytes32 depositDataRoot\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x10ced526f2842c879ff63bf37a47d121d56898609456f98df1f3cff0a768b2c9\",\"license\":\"MIT\"},\"src/contracts/interfaces/IFeeRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10;\\n\\ninterface IFeeRecipient {\\n    function init(address _dispatcher, bytes32 _publicKeyRoot) external;\\n\\n    function withdraw() external;\\n}\\n\",\"keccak256\":\"0x2448a6378aa26099508ce00bf1eff7ea293ae97eece97d931a6f500256a2c475\",\"license\":\"MIT\"},\"src/contracts/libs/BytesLib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10;\\n\\nlibrary BytesLib {\\n    function pad64(bytes memory _b) internal pure returns (bytes memory) {\\n        assert(_b.length >= 32 && _b.length <= 64);\\n        if (64 == _b.length) {\\n            return _b;\\n        }\\n\\n        bytes memory zero32 = new bytes(32);\\n        assembly {\\n            mstore(add(zero32, 0x20), 0)\\n        }\\n\\n        if (32 == _b.length) {\\n            return BytesLib.concat(_b, zero32);\\n        } else {\\n            return BytesLib.concat(_b, BytesLib.slice(zero32, 0, uint256(64) - _b.length));\\n        }\\n    }\\n\\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(\\n                0x40,\\n                and(\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                    not(31) // Round down to the nearest 32 bytes.\\n                )\\n            )\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n}\\n\",\"keccak256\":\"0x39916de22a26a29e6381a046e29a409fbc779a508563c872fc09f0c3dae07d88\",\"license\":\"MIT\"},\"src/contracts/libs/StakingContractStorageLib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10;\\n\\nlibrary StakingContractStorageLib {\\n    function getUint256(bytes32 position) internal view returns (uint256 data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function setUint256(bytes32 position, uint256 data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function getAddress(bytes32 position) internal view returns (address data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function setAddress(bytes32 position, address data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function getBool(bytes32 position) internal view returns (bool data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function setBool(bytes32 position, bool data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    /* ========================================\\n    ===========================================\\n    =========================================*/\\n\\n    bytes32 internal constant VERSION_SLOT = keccak256(\\\"StakingContract.version\\\");\\n\\n    function getVersion() internal view returns (uint256) {\\n        return getUint256(VERSION_SLOT);\\n    }\\n\\n    function setVersion(uint256 _newVersion) internal {\\n        setUint256(VERSION_SLOT, _newVersion);\\n    }\\n\\n    /* ========================================\\n    ===========================================\\n    =========================================*/\\n\\n    bytes32 internal constant ADMIN_SLOT = keccak256(\\\"StakingContract.admin\\\");\\n    bytes32 internal constant PENDING_ADMIN_SLOT = keccak256(\\\"StakingContract.pendingAdmin\\\");\\n\\n    function getAdmin() internal view returns (address) {\\n        return getAddress(ADMIN_SLOT);\\n    }\\n\\n    function setAdmin(address _newAdmin) internal {\\n        setAddress(ADMIN_SLOT, _newAdmin);\\n    }\\n\\n    function getPendingAdmin() internal view returns (address) {\\n        return getAddress(PENDING_ADMIN_SLOT);\\n    }\\n\\n    function setPendingAdmin(address _newPendingAdmin) internal {\\n        setAddress(PENDING_ADMIN_SLOT, _newPendingAdmin);\\n    }\\n\\n    /* ========================================\\n    ===========================================\\n    =========================================*/\\n\\n    bytes32 internal constant TREASURY_SLOT = keccak256(\\\"StakingContract.treasury\\\");\\n\\n    function getTreasury() internal view returns (address) {\\n        return getAddress(TREASURY_SLOT);\\n    }\\n\\n    function setTreasury(address _newTreasury) internal {\\n        setAddress(TREASURY_SLOT, _newTreasury);\\n    }\\n\\n    /* ========================================\\n    ===========================================\\n    =========================================*/\\n\\n    bytes32 internal constant DEPOSIT_CONTRACT_SLOT = keccak256(\\\"StakingContract.depositContract\\\");\\n\\n    function getDepositContract() internal view returns (address) {\\n        return getAddress(DEPOSIT_CONTRACT_SLOT);\\n    }\\n\\n    function setDepositContract(address _newDepositContract) internal {\\n        setAddress(DEPOSIT_CONTRACT_SLOT, _newDepositContract);\\n    }\\n\\n    /* ========================================\\n    ===========================================\\n    =========================================*/\\n\\n    bytes32 internal constant OPERATORS_SLOT = keccak256(\\\"StakingContract.operators\\\");\\n\\n    struct OperatorInfo {\\n        address operator;\\n        address feeRecipient;\\n        uint256 limit;\\n        bytes[] publicKeys;\\n        bytes[] signatures;\\n        bool deactivated;\\n    }\\n\\n    struct OperatorsSlot {\\n        OperatorInfo[] value;\\n    }\\n\\n    function getOperators() internal pure returns (OperatorsSlot storage p) {\\n        bytes32 slot = OPERATORS_SLOT;\\n        assembly {\\n            p.slot := slot\\n        }\\n    }\\n\\n    /* ========================================\\n    ===========================================\\n    =========================================*/\\n\\n    bytes32 internal constant VALIDATORS_FUNDING_INFO_SLOT = keccak256(\\\"StakingContract.validatorsFundingInfo\\\");\\n\\n    struct ValidatorsFundingInfo {\\n        uint32 availableKeys;\\n        uint32 funded;\\n    }\\n\\n    struct UintToUintMappingSlot {\\n        mapping(uint256 => uint256) value;\\n    }\\n\\n    function getValidatorsFundingInfo(uint256 _index) internal view returns (ValidatorsFundingInfo memory vfi) {\\n        UintToUintMappingSlot storage p;\\n        bytes32 slot = VALIDATORS_FUNDING_INFO_SLOT;\\n\\n        assembly {\\n            p.slot := slot\\n        }\\n\\n        uint256 slotIndex = _index >> 2;\\n        uint256 innerIndex = (_index & 3) << 6;\\n        uint256 value = p.value[slotIndex] >> innerIndex;\\n        vfi.availableKeys = uint32(value);\\n        vfi.funded = uint32(value >> 32);\\n    }\\n\\n    function setValidatorsFundingInfo(\\n        uint256 _index,\\n        uint32 _availableKeys,\\n        uint32 _funded\\n    ) internal {\\n        UintToUintMappingSlot storage p;\\n        bytes32 slot = VALIDATORS_FUNDING_INFO_SLOT;\\n\\n        assembly {\\n            p.slot := slot\\n        }\\n\\n        uint256 slotIndex = _index >> 2;\\n        uint256 innerIndex = (_index & 3) << 6;\\n        p.value[slotIndex] =\\n            (p.value[slotIndex] & (~(uint256(0xFFFFFFFFFFFFFFFF) << innerIndex))) |\\n            ((uint256(_availableKeys) | (uint256(_funded) << 32)) << innerIndex);\\n    }\\n\\n    /* ========================================\\n    ===========================================\\n    =========================================*/\\n\\n    bytes32 internal constant TOTAL_AVAILABLE_VALIDATORS_SLOT = keccak256(\\\"StakingContract.totalAvailableValidators\\\");\\n\\n    function getTotalAvailableValidators() internal view returns (uint256) {\\n        return getUint256(TOTAL_AVAILABLE_VALIDATORS_SLOT);\\n    }\\n\\n    function setTotalAvailableValidators(uint256 _newTotal) internal {\\n        setUint256(TOTAL_AVAILABLE_VALIDATORS_SLOT, _newTotal);\\n    }\\n\\n    /* ========================================\\n    ===========================================\\n    =========================================*/\\n\\n    bytes32 internal constant WITHDRAWERS_SLOT = keccak256(\\\"StakingContract.withdrawers\\\");\\n\\n    struct WithdrawersSlot {\\n        mapping(bytes32 => address) value;\\n    }\\n\\n    function getWithdrawers() internal pure returns (WithdrawersSlot storage p) {\\n        bytes32 slot = WITHDRAWERS_SLOT;\\n        assembly {\\n            p.slot := slot\\n        }\\n    }\\n\\n    /* ========================================\\n    ===========================================\\n    =========================================*/\\n\\n    struct OperatorIndex {\\n        bool enabled;\\n        uint32 operatorIndex;\\n    }\\n\\n    struct OperatorIndexPerValidatorSlot {\\n        mapping(bytes32 => OperatorIndex) value;\\n    }\\n\\n    bytes32 internal constant OPERATOR_INDEX_PER_VALIDATOR_SLOT =\\n        keccak256(\\\"StakingContract.operatorIndexPerValidator\\\");\\n\\n    function getOperatorIndexPerValidator() internal pure returns (OperatorIndexPerValidatorSlot storage p) {\\n        bytes32 slot = OPERATOR_INDEX_PER_VALIDATOR_SLOT;\\n        assembly {\\n            p.slot := slot\\n        }\\n    }\\n\\n    /* ========================================\\n    ===========================================\\n    =========================================*/\\n\\n    bytes32 internal constant GLOBAL_FEE_SLOT = keccak256(\\\"StakingContract.globalFee\\\");\\n\\n    function getGlobalFee() internal view returns (uint256) {\\n        return getUint256(GLOBAL_FEE_SLOT);\\n    }\\n\\n    function setGlobalFee(uint256 _newTreasuryFee) internal {\\n        setUint256(GLOBAL_FEE_SLOT, _newTreasuryFee);\\n    }\\n\\n    /* ========================================\\n    ===========================================\\n    =========================================*/\\n\\n    bytes32 internal constant OPERATOR_FEE_SLOT = keccak256(\\\"StakingContract.operatorFee\\\");\\n\\n    function getOperatorFee() internal view returns (uint256) {\\n        return getUint256(OPERATOR_FEE_SLOT);\\n    }\\n\\n    function setOperatorFee(uint256 _newOperatorFee) internal {\\n        setUint256(OPERATOR_FEE_SLOT, _newOperatorFee);\\n    }\\n\\n    /* ========================================\\n    ===========================================\\n    =========================================*/\\n\\n    bytes32 internal constant EL_DISPATCHER_SLOT = keccak256(\\\"StakingContract.executionLayerDispatcher\\\");\\n\\n    function getELDispatcher() internal view returns (address) {\\n        return getAddress(EL_DISPATCHER_SLOT);\\n    }\\n\\n    function setELDispatcher(address _newElDispatcher) internal {\\n        setAddress(EL_DISPATCHER_SLOT, _newElDispatcher);\\n    }\\n\\n    /* ========================================\\n    ===========================================\\n    =========================================*/\\n\\n    bytes32 internal constant CL_DISPATCHER_SLOT = keccak256(\\\"StakingContract.consensusLayerDispatcher\\\");\\n\\n    function getCLDispatcher() internal view returns (address) {\\n        return getAddress(CL_DISPATCHER_SLOT);\\n    }\\n\\n    function setCLDispatcher(address _newClDispatcher) internal {\\n        setAddress(CL_DISPATCHER_SLOT, _newClDispatcher);\\n    }\\n\\n    /* ========================================\\n    ===========================================\\n    =========================================*/\\n\\n    bytes32 internal constant FEE_RECIPIENT_IMPLEMENTATION_SLOT =\\n        keccak256(\\\"StakingContract.feeRecipientImplementation\\\");\\n\\n    function getFeeRecipientImplementation() internal view returns (address) {\\n        return getAddress(FEE_RECIPIENT_IMPLEMENTATION_SLOT);\\n    }\\n\\n    function setFeeRecipientImplementation(address _newFeeRecipientImplementation) internal {\\n        setAddress(FEE_RECIPIENT_IMPLEMENTATION_SLOT, _newFeeRecipientImplementation);\\n    }\\n\\n    /* ========================================\\n    ===========================================\\n    =========================================*/\\n\\n    bytes32 internal constant WITHDRAWER_CUSTOMIZATION_ENABLED_SLOT =\\n        keccak256(\\\"StakingContract.withdrawerCustomizationEnabled\\\");\\n\\n    function getWithdrawerCustomizationEnabled() internal view returns (bool) {\\n        return getBool(WITHDRAWER_CUSTOMIZATION_ENABLED_SLOT);\\n    }\\n\\n    function setWithdrawerCustomizationEnabled(bool _enabled) internal {\\n        setBool(WITHDRAWER_CUSTOMIZATION_ENABLED_SLOT, _enabled);\\n    }\\n}\\n\",\"keccak256\":\"0x065668e865542aecc64aaf4b94b05cbd1e70deb4439ade08916782997e14745d\",\"license\":\"MIT\"},\"src/contracts/libs/UintLib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10;\\n\\nlibrary Uint256Lib {\\n    function toLittleEndian64(uint256 _value) internal pure returns (uint256 result) {\\n        result = 0;\\n        uint256 temp_value = _value;\\n        for (uint256 i = 0; i < 8; ++i) {\\n            result = (result << 8) | (temp_value & 0xFF);\\n            temp_value >>= 8;\\n        }\\n\\n        assert(0 == temp_value); // fully converted\\n        result <<= (24 * 8);\\n    }\\n}\\n\",\"keccak256\":\"0x452fa01e7c7dbf60df6d9d12f79645183d66f5a8ca3d673742eb4960a1952b73\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614fc3806100206000396000f3fe6080604052600436106102085760003560e01c806379ba509711610118578063bf509bd4116100a0578063d2a427471161006f578063d2a42747146105f0578063e00cb6ca14610610578063e99454f514610630578063f0f4426014610650578063f2fde38b1461067057610218565b8063bf509bd414610593578063d0468156146105b3578063d0e30db0146105c8578063d243d69d146105d057610218565b8063a4d8d2c4116100e7578063a4d8d2c414610509578063a740080114610529578063b4336b8414610549578063b747e7dd1461055e578063bf15af561461057e57610218565b806379ba5097146104945780638a1af4c4146104a95780638df4e474146104c95780639adf91ee146104e957610218565b8063286966081161019b5780633b19e84a1161016a5780633b19e84a14610405578063540bc5ea1461041a57806363b4118f1461042f5780636e9960c31461045f578063714b55b21461047457610218565b80632869660814610393578063291206f6146103a85780632ba03a79146103c857806336bf3325146103e857610218565b80631bcbfaba116101d75780631bcbfaba146102f85780631d0958051461031b5780631ee133431461033b578063227e80fa1461037357610218565b806305f63c8a1461023157806308b3a073146102985780630968f264146102b85780631864636c146102d857610218565b366102185761021633610690565b005b60405163574b16a760e11b815260040160405180910390fd5b34801561023d57600080fd5b5061025161024c36600461473a565b610780565b604080516001600160a01b039889168152979096166020880152948601939093526060850191909152608084015260a0830152151560c082015260e0015b60405180910390f35b3480156102a457600080fd5b506102166102b336600461476f565b610832565b3480156102c457600080fd5b506102166102d3366004614841565b610907565b3480156102e457600080fd5b506102166102f3366004614883565b61092e565b34801561030457600080fd5b5061030d61156c565b60405190815260200161028f565b34801561032757600080fd5b5061021661033636600461473a565b61157b565b34801561034757600080fd5b5061035b610356366004614841565b611616565b6040516001600160a01b03909116815260200161028f565b34801561037f57600080fd5b5061021661038e366004614902565b611663565b34801561039f57600080fd5b5061030d6117da565b3480156103b457600080fd5b506102166103c336600461473a565b6117e4565b3480156103d457600080fd5b506102166103e3366004614841565b61091b565b3480156103f457600080fd5b5061030d6801bc16d674ec80000081565b34801561041157600080fd5b5061035b611878565b34801561042657600080fd5b5061030d606081565b34801561043b57600080fd5b5061044f61044a36600461492e565b611882565b60405161028f94939291906149a8565b34801561046b57600080fd5b5061035b611a66565b34801561048057600080fd5b5061021661048f36600461492e565b611a70565b3480156104a057600080fd5b50610216611bbf565b3480156104b557600080fd5b5061030d6104c43660046149ef565b611c35565b3480156104d557600080fd5b506102166104e4366004614a19565b611dee565b3480156104f557600080fd5b5061035b61050436600461473a565b611e61565b34801561051557600080fd5b50610216610524366004614a3b565b611edf565b34801561053557600080fd5b5061035b61054436600461473a565b612054565b34801561055557600080fd5b5061030d61205f565b34801561056a57600080fd5b50610216610579366004614a77565b612069565b34801561058a57600080fd5b5061030d603081565b34801561059f57600080fd5b506102166105ae366004614841565b6123a2565b3480156105bf57600080fd5b5061035b6123b1565b6102166123bb565b3480156105dc57600080fd5b5061035b6105eb366004614841565b6123c6565b3480156105fc57600080fd5b5061021661060b366004614902565b612407565b34801561061c57600080fd5b5061035b61062b366004614841565b6125e4565b34801561063c57600080fd5b5061021661064b366004614afa565b612628565b34801561065c57600080fd5b5061021661066b366004614b45565b6127a4565b34801561067c57600080fd5b5061021661068b366004614b45565b612824565b3415806106ae57506106ab6801bc16d674ec80000034614b76565b15155b156106cc5760405163214121f160e11b815260040160405180910390fd5b60006106d6612865565b905060006106ed6801bc16d674ec80000034614ba0565b905081811115610710576040516315caeb5160e31b815260040160405180910390fd5b600080516020614f4e83398151915280546000036107415760405163ddf9d24560e01b815260040160405180910390fd5b805460010361075a5761075584838561288f565b61077a565b805460020361076e576107558483856128ad565b61077a848385846129bb565b50505050565b600080808080808080600080516020614f4e83398151915280549091508910156108265760006107af8a612b48565b90506000826000018b815481106107c8576107c8614bb4565b600091825260209182902060069091020180546001820154600283015460038401546005909401549487015196516001600160a01b039384169f50919092169c50909a5090985063ffffffff93841697509290921694505060ff1691505b50919395979092949650565b600161083c612bae565b610847906001614bca565b81146108655760405162dc149f60e41b815260040160405180910390fd5b61086e81612bd8565b61087789612c01565b61088088612c2a565b6127108311156108a3576040516358d620b360e01b815260040160405180910390fd5b6108ac83612c53565b6127108211156108cf576040516358d620b360e01b815260040160405180910390fd5b6108d882612c7c565b6108e186612ca5565b6108ea85612cce565b6108f387612cf7565b6108fc84612d20565b505050505050505050565b61091b82826000610916612d49565b612d73565b61092a82826001610916612f29565b5050565b82610937612f53565b6001600160a01b03163303610f545760008290036109685760405163a9cb9e0d60e01b815260040160405180910390fd5b600061097385612b48565b6020810151909150600080516020614f4e8339815191529063ffffffff16858561099e600182614be2565b8181106109ad576109ad614bb4565b9050602002013510156109d3576040516334947ea160e01b815260040160405180910390fd5b60005b84811015610e5257600081118015610a28575085856109f6600184614be2565b818110610a0557610a05614bb4565b90506020020135868683818110610a1e57610a1e614bb4565b9050602002013510155b15610a46576040516335061dff60e01b815260040160405180910390fd5b867f794aacb42d1ea2e7f72809b74e3ce124325a51c3715b873c36807d3ca37e4fd0836000018981548110610a7d57610a7d614bb4565b9060005260206000209060060201600301888885818110610aa057610aa0614bb4565b9050602002013581548110610ab757610ab7614bb4565b90600052602060002001604051610ace9190614c2d565b60405180910390a26001826000018881548110610aed57610aed614bb4565b906000526020600020906006020160030180549050610b0c9190614be2565b868683818110610b1e57610b1e614bb4565b9050602002013503610bd557816000018781548110610b3f57610b3f614bb4565b9060005260206000209060060201600301805480610b5f57610b5f614cd4565b600190038181906000526020600020016000610b7b9190614557565b9055816000018781548110610b9257610b92614bb4565b9060005260206000209060060201600401805480610bb257610bb2614cd4565b600190038181906000526020600020016000610bce9190614557565b9055610e4a565b816000018781548110610bea57610bea614bb4565b90600052602060002090600602016003016001836000018981548110610c1257610c12614bb4565b906000526020600020906006020160030180549050610c319190614be2565b81548110610c4157610c41614bb4565b90600052602060002001826000018881548110610c6057610c60614bb4565b9060005260206000209060060201600301878784818110610c8357610c83614bb4565b9050602002013581548110610c9a57610c9a614bb4565b90600052602060002001908054610cb090614bf9565b610cbb929190614591565b50816000018781548110610cd157610cd1614bb4565b9060005260206000209060060201600301805480610cf157610cf1614cd4565b600190038181906000526020600020016000610d0d9190614557565b9055816000018781548110610d2457610d24614bb4565b90600052602060002090600602016004016001836000018981548110610d4c57610d4c614bb4565b906000526020600020906006020160040180549050610d6b9190614be2565b81548110610d7b57610d7b614bb4565b90600052602060002001826000018881548110610d9a57610d9a614bb4565b9060005260206000209060060201600401878784818110610dbd57610dbd614bb4565b9050602002013581548110610dd457610dd4614bb4565b90600052602060002001908054610dea90614bf9565b610df5929190614591565b50816000018781548110610e0b57610e0b614bb4565b9060005260206000209060060201600401805480610e2b57610e2b614cd4565b600190038181906000526020600020016000610e479190614557565b90555b6001016109d6565b50806000018681548110610e6857610e68614bb4565b60009182526020909120600260069092020101548585610e89600182614be2565b818110610e9857610e98614bb4565b905060200201351015610f44578484610eb2600182614be2565b818110610ec157610ec1614bb4565b90506020020135816000018781548110610edd57610edd614bb4565b6000918252602090912060026006909202010155600080516020614f6e833981519152868686610f0e600182614be2565b818110610f1d57610f1d614bb4565b90506020020135604051610f3b929190918252602082015260400190565b60405180910390a15b610f4d86612f7d565b505061077a565b610f5d81613089565b6000829003610f7f5760405163a9cb9e0d60e01b815260040160405180910390fd5b6000610f8a85612b48565b6020810151909150600080516020614f4e8339815191529063ffffffff168585610fb5600182614be2565b818110610fc457610fc4614bb4565b905060200201351015610fea576040516334947ea160e01b815260040160405180910390fd5b60005b848110156114695760008111801561103f5750858561100d600184614be2565b81811061101c5761101c614bb4565b9050602002013586868381811061103557611035614bb4565b9050602002013510155b1561105d576040516335061dff60e01b815260040160405180910390fd5b867f794aacb42d1ea2e7f72809b74e3ce124325a51c3715b873c36807d3ca37e4fd083600001898154811061109457611094614bb4565b90600052602060002090600602016003018888858181106110b7576110b7614bb4565b90506020020135815481106110ce576110ce614bb4565b906000526020600020016040516110e59190614c2d565b60405180910390a2600182600001888154811061110457611104614bb4565b9060005260206000209060060201600301805490506111239190614be2565b86868381811061113557611135614bb4565b90506020020135036111ec5781600001878154811061115657611156614bb4565b906000526020600020906006020160030180548061117657611176614cd4565b6001900381819060005260206000200160006111929190614557565b90558160000187815481106111a9576111a9614bb4565b90600052602060002090600602016004018054806111c9576111c9614cd4565b6001900381819060005260206000200160006111e59190614557565b9055611461565b81600001878154811061120157611201614bb4565b9060005260206000209060060201600301600183600001898154811061122957611229614bb4565b9060005260206000209060060201600301805490506112489190614be2565b8154811061125857611258614bb4565b9060005260206000200182600001888154811061127757611277614bb4565b906000526020600020906006020160030187878481811061129a5761129a614bb4565b90506020020135815481106112b1576112b1614bb4565b906000526020600020019080546112c790614bf9565b6112d2929190614591565b508160000187815481106112e8576112e8614bb4565b906000526020600020906006020160030180548061130857611308614cd4565b6001900381819060005260206000200160006113249190614557565b905581600001878154811061133b5761133b614bb4565b9060005260206000209060060201600401600183600001898154811061136357611363614bb4565b9060005260206000209060060201600401805490506113829190614be2565b8154811061139257611392614bb4565b906000526020600020018260000188815481106113b1576113b1614bb4565b90600052602060002090600602016004018787848181106113d4576113d4614bb4565b90506020020135815481106113eb576113eb614bb4565b9060005260206000200190805461140190614bf9565b61140c929190614591565b5081600001878154811061142257611422614bb4565b906000526020600020906006020160040180548061144257611442614cd4565b60019003818190600052602060002001600061145e9190614557565b90555b600101610fed565b5080600001868154811061147f5761147f614bb4565b600091825260209091206002600690920201015485856114a0600182614be2565b8181106114af576114af614bb4565b90506020020135101561155b5784846114c9600182614be2565b8181106114d8576114d8614bb4565b905060200201358160000187815481106114f4576114f4614bb4565b6000918252602090912060026006909202010155600080516020614f6e833981519152868686611525600182614be2565b81811061153457611534614bb4565b90506020020135604051611552929190918252602082015260400190565b60405180910390a15b61156486612f7d565b505050505050565b600061157661310e565b905090565b611583612f53565b6001600160a01b0316336001600160a01b0316146115b3576040516282b42960e81b815260040160405180910390fd5b6127108111156115d6576040516358d620b360e01b815260040160405180910390fd5b6115df81612c7c565b6040518181527fd894096cd1f7e89d9b748c7c2358cb699a790a05e97dcde228fe5949b4e80743906020015b60405180910390a150565b600061165a83838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525060019250613138915050565b90505b92915050565b61166b612f53565b6001600160a01b0316336001600160a01b03161461169b576040516282b42960e81b815260040160405180910390fd5b600080516020614f4e83398151915280546000908290859081106116c1576116c1614bb4565b600091825260209182902060069190910201600501805460ff1916921515929092179091556040518481527f8d0ba049731b0417f85546bc7503de241522c61e7464e87cceff56d3f2586dbc910160405180910390a18181600001848154811061172d5761172d614bb4565b906000526020600020906006020160010160006101000a8154816001600160a01b0302191690836001600160a01b031602179055507f97568892aa9e69db7c72b9f32e6d4fe3c0e53b9728a8c0a0f1c2a7eb47c48ad38382600001858154811061179957611799614bb4565b600091825260209182902060069091020154604080519384526001600160a01b039182169284019290925285169082015260600160405180910390a1505050565b60006115766131e2565b6117ec612f53565b6001600160a01b0316336001600160a01b03161461181c576040516282b42960e81b815260040160405180910390fd5b61271081111561183f576040516358d620b360e01b815260040160405180910390fd5b61184881612c53565b6040518181527fecd6fc650620aa722cafc3c3e871fa813947eae6f856982d7510a8ff101a50789060200161160b565b600061157661320c565b60608060008080600080516020614f4e83398151915290508060000187815481106118af576118af614bb4565b906000526020600020906006020160030186815481106118d1576118d1614bb4565b9060005260206000200180546118e690614bf9565b80601f016020809104026020016040519081016040528092919081815260200182805461191290614bf9565b801561195f5780601f106119345761010080835404028352916020019161195f565b820191906000526020600020905b81548152906001019060200180831161194257829003601f168201915b5050505050945080600001878154811061197b5761197b614bb4565b9060005260206000209060060201600401868154811061199d5761199d614bb4565b9060005260206000200180546119b290614bf9565b80601f01602080910402602001604051908101604052809291908181526020018280546119de90614bf9565b8015611a2b5780601f10611a0057610100808354040283529160200191611a2b565b820191906000526020600020905b815481529060010190602001808311611a0e57829003601f168201915b50505050509350611a43611a3e86613236565b613290565b9250611a4e87612b48565b6020015163ffffffff16861091505092959194509250565b6000611576612f53565b611a78612f53565b6001600160a01b0316336001600160a01b031614611aa8576040516282b42960e81b815260040160405180910390fd5b600080516020614f4e8339815191528054819084908110611acb57611acb614bb4565b600091825260209091206005600690920201015460ff1615611b0057604051630450a9a360e21b815260040160405180910390fd5b6000816000018481548110611b1757611b17614bb4565b906000526020600020906006020160030180549050905082811015611b5e576040516362106cb360e01b815260048101849052602481018290526044015b60405180910390fd5b82826000018581548110611b7457611b74614bb4565b906000526020600020906006020160020181905550611b9284612f7d565b6040805185815260208101859052600080516020614f6e833981519152910160405180910390a150505050565b6000611bc96132ca565b9050336001600160a01b03821614611bf3576040516282b42960e81b815260040160405180910390fd5b611bfc81612c01565b6040516001600160a01b03821681527ff29c1089a9594c030706593e345bd8f70a26125bfb7bf4c54e757e20f456fd1c9060200161160b565b6000611c3f612f53565b6001600160a01b0316336001600160a01b031614611c6f576040516282b42960e81b815260040160405180910390fd5b6040805160c0810182526000808252602082018190529181018290526060808201819052608082015260a0810191909152600080516020614f4e833981519152805490919060fb03611cd45760405163a20c741360e01b815260040160405180910390fd5b6001600160a01b03808616825284811660208084019182528454600181810187556000878152839020865160069093020180549286166001600160a01b0319938416178155935190840180549190951691161790925560408301516002820155606083015180518493611d4e92600385019291019061461c565b5060808201518051611d6a91600484019160209091019061461c565b5060a091909101516005909101805460ff19169115159190911790558154600090611d9790600190614be2565b604080516001600160a01b03808a168252881660208201529081018290529091507f2b3c4db2c0f4f51da09c2510a63e1d90235e486e8f075a609103a5c7a07422179060600160405180910390a195945050505050565b611df6612f53565b6001600160a01b0316336001600160a01b031614611e26576040516282b42960e81b815260040160405180910390fd5b611e2f816132f3565b60405181151581527f96639403db35a7ef32b25543bec54f73278d8c5ca82883ef1385ddcb27afa7dc9060200161160b565b60008181527fc58a51931c529c2a8796a8fad2ae789ee504643b4b567f2c0c97e809cec939026020526040812054600080516020614f4e83398151915280549091610100900463ffffffff16908110611ebc57611ebc614bb4565b60009182526020909120600160069092020101546001600160a01b031692915050565b826000600080516020614f4e833981519152805483908110611f0357611f03614bb4565b60009182526020909120600690910201600581015490915060ff1615611f3c57604051630450a9a360e21b815260040160405180910390fd5b60018101546001600160a01b03163314611f68576040516282b42960e81b815260040160405180910390fd5b600080516020614f4e83398151915280548590829088908110611f8d57611f8d614bb4565b906000526020600020906006020160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555083816000018781548110611fd857611fd8614bb4565b60009182526020918290206006919091020160010180546001600160a01b0319166001600160a01b0393841617905560408051898152888416928101929092529186168183015290517f97568892aa9e69db7c72b9f32e6d4fe3c0e53b9728a8c0a0f1c2a7eb47c48ad3916060908290030190a1505050505050565b600061165d82613290565b6000611576612865565b8561207381613089565b856000036120945760405163a9cb9e0d60e01b815260040160405180910390fd5b61209f603085614b76565b1515806120b65750856120b3603086614ba0565b14155b156120d45760405163337d0f4160e01b815260040160405180910390fd5b6120df606083614b76565b1515806120f65750856120f3606084614ba0565b14155b156121145760405163274cf40160e01b815260040160405180910390fd5b600080516020614f4e8339815191527fc58a51931c529c2a8796a8fad2ae789ee504643b4b567f2c0c97e809cec9390260005b8881101561235a57600061219f89898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612198925060309150869050614cea565b603061331c565b905060006121f188888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506121ea925060609150879050614cea565b606061331c565b9050846000018c8154811061220857612208614bb4565b600091825260208083206003600690930201919091018054600181018255908352918190208451612240939190910191850190614675565b50846000018c8154811061225657612256614bb4565b60009182526020808320600460069093020191909101805460018101825590835291819020835161228e939190910191840190614675565b50600061229a83613236565b60008181526020879052604090205490915060ff16156122cf5782604051635a303adb60e01b8152600401611b559190614d09565b60405180604001604052806001151581526020018e63ffffffff1681525085600001600083815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548163ffffffff021916908363ffffffff160217905550905050836001019350505050612147565b50887fb82c87b84f76f39d5f61ed59b411352603805dda6080a2c44b4a86eab141ff1b888888886040516123919493929190614d45565b60405180910390a26108fc89612f7d565b61092a82826000610916612d49565b60006115766132ca565b6123c433610690565b565b600061165a83838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250613138915050565b61240f612f53565b6001600160a01b0316336001600160a01b03161461243f576040516282b42960e81b815260040160405180910390fd5b600080516020614f4e833981519152805460009082908590811061246557612465614bb4565b906000526020600020906006020160020181905550600080516020614f6e8339815191528360006040516124a3929190918252602082015260400190565b60405180910390a160018160000184815481106124c2576124c2614bb4565b600091825260209182902060069190910201600501805460ff1916921515929092179091556040518481527f4c644bb0e171ba9e5cf08f5d66836528c3947c3512b34dd8e27da30e803527b3910160405180910390a18181600001848154811061252e5761252e614bb4565b906000526020600020906006020160010160006101000a8154816001600160a01b0302191690836001600160a01b031602179055507f97568892aa9e69db7c72b9f32e6d4fe3c0e53b9728a8c0a0f1c2a7eb47c48ad38382600001858154811061259a5761259a614bb4565b600091825260209182902060069091020154604080519384526001600160a01b039182169284019290925285169082015260600160405180910390a16125df83612f7d565b505050565b600061165a611a3e84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061323692505050565b612630613429565b61264d57604051631dd2188d60e31b815260040160405180910390fd5b6000600261269085858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061345392505050565b60405161269d9190614d77565b602060405180830381855afa1580156126ba573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906126dd9190614d93565b905060007f86647fdbbdb534026d3e0f93a551cecf651c2b40fcdfef4b9fd9ed826133e2656000838152602082905260409020549091506001600160a01b0316331461273b576040516282b42960e81b815260040160405180910390fd5b7f833a0d0704fbdc6a0f748ebec819c31dde0b532ca9e3e29f56a5c4e8f3cbc0c985858560405161276e93929190614dac565b60405180910390a160009182526020526040902080546001600160a01b0319166001600160a01b03929092169190911790555050565b6127ac612f53565b6001600160a01b0316336001600160a01b0316146127dc576040516282b42960e81b815260040160405180910390fd5b6040516001600160a01b03821681527f63cc689e9d3377465b51fb094ea4ca5e0a1436b21f1ad30d707c696111c665009060200160405180910390a161282181612c2a565b50565b61282c612f53565b6001600160a01b0316336001600160a01b03161461285c576040516282b42960e81b815260040160405180910390fd5b612821816134ec565b60006115767f559ad51499ae00ca2e9d9d95aab46737c8904ab7da276613fefda282b2c2ac065490565b61289b60008385613514565b6125df6128a88383614be2565b6137db565b60006128b96000612b48565b905060006128c76001612b48565b90506000806128d7600243614b76565b6000036128fc576128e9600287614ba0565b91506128f58287614be2565b9050612916565b612907600287614ba0565b90506129138187614be2565b91505b835163ffffffff168211156129485783516129379063ffffffff1687614be2565b845163ffffffff1692509050612977565b825163ffffffff168111156129775782516129699063ffffffff1687614be2565b835190925063ffffffff1690505b81156129895761298960008389613514565b801561299b5761299b60018289613514565b6129b26129a88284614bca565b6128a89087614be2565b50505050505050565b805460006129c882613804565b905060006129d7600143614be2565b40905060008367ffffffffffffffff8111156129f5576129f5614dd8565b604051908082528060200260200182016040528015612a4e57816020015b6040805160a081018252600080825260208083018290529282018190526060820181905260808201528252600019909201910181612a135790505b50905060005b87811015612ac157600080612a6a858488613881565b91509150600080612a7d84848a8961391a565b915091508060ff168260ff1603612a9d57612a9882876139cc565b612ab2565b612ab2612aac83838a8a613a08565b876139cc565b84600101945050505050612a54565b5060005b8151811015612b30576000828281518110612ae257612ae2614bb4565b60200260200101516060015163ffffffff161115612b2857612b2881838381518110612b1057612b10614bb4565b60200260200101516060015163ffffffff168b613514565b600101612ac5565b50612b3e6128a88888614be2565b5050505050505050565b60408051808201825260008082526020808301828152600286901c83527f37e2c371bbf1c7a1326d52e30855e9c8b6cac15eda4475320e427b948813a9f08252939091205463ffffffff60c060069690961b959095161c8481168352901c909216905290565b60006115767fd5c553085b8382c47128ae7612257fd5dc3b4fc4d3a108925604d3c8700c025b5490565b6128217fd5c553085b8382c47128ae7612257fd5dc3b4fc4d3a108925604d3c8700c025b829055565b6128217ffbeda9bc03875013b12a1ec161efb8e5bf7e58e3cec96a1ea9efd3e264d26e64829055565b6128217f10c92bb459c0223bf996150f2fb702a8288fb8354a33d5b0212e8e6b8273f55e829055565b6128217fb88142a0318e2b174876bceb4db9dc318011849c83fb8a8bb2997386d562324a829055565b6128217f41118591c19026bdc7a484e34f80a8e7e632600aff1c72460e9c7dfe94a2dda6829055565b6128217faa81344d5857c875349bc4a95d531a580c46bdd94c41b35b1e072e4d627079f8829055565b6128217fb6d5e19fdd6cde5f03ed4f17c2670deffa47975541fd270b0b17e803297d7608829055565b6128217fbc8b9852d17d50256bb221fdf6ee12d78dd493d807e907f7d223c40d65abd6b9829055565b6128217fd1c64973da70267569571a091966834c1a36bdba47f2a112b6a95bf41fc9c24e829055565b60006115767faa81344d5857c875349bc4a95d531a580c46bdd94c41b35b1e072e4d627079f85490565b6000612db485858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061323692505050565b9050600060028483604051602001612dd6929190918252602082015260400190565b60408051601f1981840301815290829052612df091614d77565b602060405180830381855afa158015612e0d573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612e309190614d93565b90506000612e3c613abd565b90506000612e4a8284613ae7565b9050806001600160a01b03163b600003612ecc57612e688284613b4d565b50604051630b302c9560e21b81526001600160a01b03868116600483015260248201869052821690632cc0b25490604401600060405180830381600087803b158015612eb357600080fd5b505af1158015612ec7573d6000803e3d6000fd5b505050505b806001600160a01b0316633ccfd60b6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612f0757600080fd5b505af1158015612f1b573d6000803e3d6000fd5b505050505050505050505050565b60006115767fb6d5e19fdd6cde5f03ed4f17c2670deffa47975541fd270b0b17e803297d76085490565b60006115767ffbeda9bc03875013b12a1ec161efb8e5bf7e58e3cec96a1ea9efd3e264d26e645490565b6000612f8882612b48565b8051600080516020614f4e8339815191528054929350916000908190612ffb90859088908110612fba57612fba614bb4565b906000526020600020906006020160020154856000018881548110612fe157612fe1614bb4565b906000526020600020906006020160030180549050613bed565b9050846020015163ffffffff1681116130235761301e8660008760200151613bfe565b613049565b60208501516130389063ffffffff1682614be2565b915061304986838760200151613bfe565b8163ffffffff168363ffffffff1614611564576115648263ffffffff168463ffffffff16613075612865565b61307f9190614be2565b6128a89190614bca565b6000600080516020614f4e8339815191528054839081106130ac576130ac614bb4565b60009182526020909120600690910201600581015490915060ff16156130e557604051630450a9a360e21b815260040160405180910390fd5b80546001600160a01b0316331461092a576040516282b42960e81b815260040160405180910390fd5b60006115767fb88142a0318e2b174876bceb4db9dc318011849c83fb8a8bb2997386d562324a5490565b60008061314484613236565b9050600060028483604051602001613166929190918252602082015260400190565b60408051601f198184030181529082905261318091614d77565b602060405180830381855afa15801561319d573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906131c09190614d93565b905060006131cc613abd565b90506131d88183613ae7565b9695505050505050565b60006115767f41118591c19026bdc7a484e34f80a8e7e632600aff1c72460e9c7dfe94a2dda65490565b60006115767f10c92bb459c0223bf996150f2fb702a8288fb8354a33d5b0212e8e6b8273f55e5490565b6000600261324383613453565b6040516132509190614d77565b602060405180830381855afa15801561326d573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061165d9190614d93565b60009081527f86647fdbbdb534026d3e0f93a551cecf651c2b40fcdfef4b9fd9ed826133e26560205260409020546001600160a01b031690565b60006115767e595eca1f8b39945ff4c404827bfa5fd1e295ef3f7d59d120a8ce3bae4e37a05490565b6128217fce3b5bd42ef5aae9d7b01cd806ce2a8b66f0a48f2e8b5a15f77dfbbdbbf5144f829055565b60608161332a81601f614bca565b10156133695760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606401611b55565b6133738284614bca565b845110156133b75760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606401611b55565b6060821580156133d65760405191506000825260208201604052613420565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561340f5780518352602092830192016133f7565b5050858452601f01601f1916604052505b50949350505050565b60006115767fce3b5bd42ef5aae9d7b01cd806ce2a8b66f0a48f2e8b5a15f77dfbbdbbf5144f5490565b6060602082511015801561346957506040825111155b61347557613475614dee565b8151604003613482575090565b6040805160208082528183019092526000916020820181803683370190505090506000602082015282516020036134c4576134bd8382613c72565b9392505050565b6134bd836134e1836000875160406134dc9190614be2565b61331c565b613c72565b50919050565b6128217e595eca1f8b39945ff4c404827bfa5fd1e295ef3f7d59d120a8ce3bae4e37a0829055565b600080516020614f4e833981519152805460009082908690811061353a5761353a614bb4565b90600052602060002090600602019050600061355586612b48565b602081015190915063ffffffff165b85826020015163ffffffff1661357a9190614bca565b8110156137a557600083600301828154811061359857613598614bb4565b9060005260206000200180546135ad90614bf9565b80601f01602080910402602001604051908101604052809291908181526020018280546135d990614bf9565b80156136265780601f106135fb57610100808354040283529160200191613626565b820191906000526020600020905b81548152906001019060200180831161360957829003601f168201915b50505050509050600084600401838154811061364457613644614bb4565b90600052602060002001805461365990614bf9565b80601f016020809104026020016040519081016040528092919081815260200182805461368590614bf9565b80156136d25780601f106136a7576101008083540402835291602001916136d2565b820191906000526020600020905b8154815290600101906020018083116136b557829003601f168201915b5050505050905060006136e6836001613138565b905060006136f382613cef565b9050613700848483613d08565b600061370b85613236565b60008181527f86647fdbbdb534026d3e0f93a551cecf651c2b40fcdfef4b9fd9ed826133e26560205260409081902080546001600160a01b0319166001600160a01b038e1690811790915590519192509033907fac1020908b5f7134d59c1580838eba6fc42dd8c28bae65bf345676bba1913f8e9061378d9089908990614e04565b60405180910390a38560010195505050505050613564565b506115648686836000015163ffffffff166137c09190614be2565b87846020015163ffffffff166137d69190614bca565b613bfe565b6128217f559ad51499ae00ca2e9d9d95aab46737c8904ab7da276613fefda282b2c2ac06829055565b60008061380f6140b9565b905060005b6036811015613867578360ff1682826036811061383357613833614bb4565b602002015160ff161061385f5781816036811061385257613852614bb4565b6020020151949350505050565b600101613814565b50604051631470905f60e01b815260040160405180910390fd5b60008082856020613893876002614cea565b61389d9190614b76565b602081106138ad576138ad614bb4565b6138b99291901a614e32565b91506138c6600184614e54565b8560206138d4876002614cea565b6138df906001614bca565b6138e99190614b76565b602081106138f9576138f9614bb4565b6139059291901a614e32565b613910906001614e77565b9050935093915050565b60008060001980875b8260010b600019148061393a57508160010b600019145b156139be57600061394b8288614277565b63ffffffff161115613975578260010b6000190361396e578060000b9250613975565b8060000b91505b8660ff168860ff168260ff1661398b9190614bca565b6139959190614b76565b90508860ff168160ff161480156139b057508160010b600019145b156139b9578291505b613923565b509097909650945050505050565b6001818360ff16815181106139e3576139e3614bb4565b60200260200101516060018181516139fb9190614e9c565b63ffffffff169052505050565b600080613a1586846143af565b63ffffffff1690506000613a2986856143af565b63ffffffff16905080821015613a43578692505050613ab5565b80821115613a55578592505050613ab5565b60006002866020613a668a8c614e77565b613a709190614e32565b60ff1660208110613a8357613a83614bb4565b613a8f9291901a614e32565b60ff1660011490508015156000151503613aae57869350505050613ab5565b8793505050505b949350505050565b60006115767fd1c64973da70267569571a091966834c1a36bdba47f2a112b6a95bf41fc9c24e5490565b600061165a838330604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b8152606093841b60148201526f5af43d82803e903d91602b57fd5bf3ff60801b6028820152921b6038830152604c8201526037808220606c830152605591012090565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528360601b60148201526e5af43d82803e903d91602b57fd5bf360881b6028820152826037826000f59150506001600160a01b03811661165d5760405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c65640000000000000000006044820152606401611b55565b6000818310156134e657508161165d565b600283901c60009081527f37e2c371bbf1c7a1326d52e30855e9c8b6cac15eda4475320e427b948813a9f060209081526040909120805467ffffffffffffffff60c060069790971b9690961695861b191663ffffffff9490941667ffffffff000000009390921b929092161790921b179055565b6060806040519050835180825260208201818101602087015b81831015613ca3578051835260209283019201613c8b565b50855184518101855292509050808201602086015b81831015613cd0578051835260209283019201613cb8565b508651929092011591909101601f01601f191660405250905092915050565b600061165d6001600160a01b038316600160f81b614bca565b6000613d1384613236565b90506000600280613d27866000604061331c565b604051613d349190614d77565b602060405180830381855afa158015613d51573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190613d749190614d93565b6002613d8f613d8a8860406134dc816060614be2565b613453565b604051613d9c9190614d77565b602060405180830381855afa158015613db9573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190613ddc9190614d93565b60408051602081019390935282015260600160408051601f1981840301815290829052613e0891614d77565b602060405180830381855afa158015613e25573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190613e489190614d93565b90506000613e63633b9aca006801bc16d674ec800000614ba0565b90506801bc16d674ec800000613e7d82633b9aca00614cea565b14613e8a57613e8a614dee565b60006002808587604051602001613eab929190918252602082015260400190565b60408051601f1981840301815290829052613ec591614d77565b602060405180830381855afa158015613ee2573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190613f059190614d93565b6002613f10856144e7565b604080516020810192909252810187905260600160408051601f1981840301815290829052613f3e91614d77565b602060405180830381855afa158015613f5b573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190613f7e9190614d93565b60408051602081019390935282015260600160408051601f1981840301815290829052613faa91614d77565b602060405180830381855afa158015613fc7573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190613fea9190614d93565b905060006140016801bc16d674ec80000047614be2565b905061400b61452d565b6001600160a01b031663228951186801bc16d674ec8000008a8960405160200161403791815260200190565b6040516020818303038152906040528b876040518663ffffffff1660e01b81526004016140679493929190614ec4565b6000604051808303818588803b15801561408057600080fd5b505af1158015614094573d6000803e3d6000fd5b5050505050804714612b3e57604051636596d2b760e01b815260040160405180910390fd5b6140c16146e9565b50604080516106c081018252600281526003602082015260059181019190915260076060820152600b6080820152600d60a0820152601160c0820152601360e08201526017610100820152601d610120820152601f61014082015260256101608201526029610180820152602b6101a0820152602f6101c082015260356101e0820152603b610200820152603d610220820152604361024082015260476102608201526049610280820152604f6102a082015260536102c082015260596102e0820152606161030082015260656103208201526067610340820152606b610360820152606d61038082015260716103a0820152607f6103c082015260836103e08201526089610400820152608b61042082015260956104408201526097610460820152609d61048082015260a36104a082015260a76104c082015260ad6104e082015260b361050082015260b561052082015260bf61054082015260c161056082015260c561058082015260c76105a082015260d36105c082015260df6105e082015260e361060082015260e561062082015260e961064082015260ef61066082015260f161068082015260fb6106a082015290565b600081518360ff161061428c5750600061165d565b818360ff16815181106142a1576142a1614bb4565b602002602001015160000151151560001515036143635760006142c68460ff16612b48565b90506001838560ff16815181106142df576142df614bb4565b6020908102919091018101519115159091528101518351849060ff871690811061430b5761430b614bb4565b60200260200101516040019063ffffffff16908163ffffffff16815250508060000151838560ff168151811061434357614343614bb4565b60200260200101516080019063ffffffff16908163ffffffff1681525050505b818360ff168151811061437857614378614bb4565b602002602001015160600151828460ff168151811061439957614399614bb4565b60200260200101516080015161165a9190614f0f565b600081518360ff16106143c45750600061165d565b818360ff16815181106143d9576143d9614bb4565b6020026020010151600001511515600015150361449b5760006143fe8460ff16612b48565b90506001838560ff168151811061441757614417614bb4565b6020908102919091018101519115159091528101518351849060ff871690811061444357614443614bb4565b60200260200101516040019063ffffffff16908163ffffffff16815250508060000151838560ff168151811061447b5761447b614bb4565b60200260200101516080019063ffffffff16908163ffffffff1681525050505b818360ff16815181106144b0576144b0614bb4565b602002602001015160600151828460ff16815181106144d1576144d1614bb4565b60200260200101516040015161165a9190614e9c565b600081815b600881101561451557600892831b60ff831617929190911c9061450e81614f34565b90506144ec565b50801561452457614524614dee565b5060c01b919050565b60006115767fbc8b9852d17d50256bb221fdf6ee12d78dd493d807e907f7d223c40d65abd6b95490565b50805461456390614bf9565b6000825580601f10614573575050565b601f0160209004906000526020600020908101906128219190614708565b82805461459d90614bf9565b90600052602060002090601f0160209004810192826145bf576000855561460c565b82601f106145d0578054855561460c565b8280016001018555821561460c57600052602060002091601f016020900482015b8281111561460c5782548255916001019190600101906145f1565b50614618929150614708565b5090565b828054828255906000526020600020908101928215614669579160200282015b828111156146695782518051614659918491602090910190614675565b509160200191906001019061463c565b5061461892915061471d565b82805461468190614bf9565b90600052602060002090601f0160209004810192826146a3576000855561460c565b82601f106146bc57805160ff191683800117855561460c565b8280016001018555821561460c579182015b8281111561460c5782518255916020019190600101906146ce565b604051806106c001604052806036906020820280368337509192915050565b5b808211156146185760008155600101614709565b808211156146185760006147318282614557565b5060010161471d565b60006020828403121561474c57600080fd5b5035919050565b80356001600160a01b038116811461476a57600080fd5b919050565b600080600080600080600080610100898b03121561478c57600080fd5b61479589614753565b97506147a360208a01614753565b96506147b160408a01614753565b95506147bf60608a01614753565b94506147cd60808a01614753565b93506147db60a08a01614753565b925060c0890135915060e089013590509295985092959890939650565b60008083601f84011261480a57600080fd5b50813567ffffffffffffffff81111561482257600080fd5b60208301915083602082850101111561483a57600080fd5b9250929050565b6000806020838503121561485457600080fd5b823567ffffffffffffffff81111561486b57600080fd5b614877858286016147f8565b90969095509350505050565b60008060006040848603121561489857600080fd5b83359250602084013567ffffffffffffffff808211156148b757600080fd5b818601915086601f8301126148cb57600080fd5b8135818111156148da57600080fd5b8760208260051b85010111156148ef57600080fd5b6020830194508093505050509250925092565b6000806040838503121561491557600080fd5b8235915061492560208401614753565b90509250929050565b6000806040838503121561494157600080fd5b50508035926020909101359150565b60005b8381101561496b578181015183820152602001614953565b8381111561077a5750506000910152565b60008151808452614994816020860160208601614950565b601f01601f19169290920160200192915050565b6080815260006149bb608083018761497c565b82810360208401526149cd818761497c565b6001600160a01b03959095166040840152505090151560609091015292915050565b60008060408385031215614a0257600080fd5b614a0b83614753565b915061492560208401614753565b600060208284031215614a2b57600080fd5b813580151581146134bd57600080fd5b600080600060608486031215614a5057600080fd5b83359250614a6060208501614753565b9150614a6e60408501614753565b90509250925092565b60008060008060008060808789031215614a9057600080fd5b8635955060208701359450604087013567ffffffffffffffff80821115614ab657600080fd5b614ac28a838b016147f8565b90965094506060890135915080821115614adb57600080fd5b50614ae889828a016147f8565b979a9699509497509295939492505050565b600080600060408486031215614b0f57600080fd5b833567ffffffffffffffff811115614b2657600080fd5b614b32868287016147f8565b9094509250614a6e905060208501614753565b600060208284031215614b5757600080fd5b61165a82614753565b634e487b7160e01b600052601260045260246000fd5b600082614b8557614b85614b60565b500690565b634e487b7160e01b600052601160045260246000fd5b600082614baf57614baf614b60565b500490565b634e487b7160e01b600052603260045260246000fd5b60008219821115614bdd57614bdd614b8a565b500190565b600082821015614bf457614bf4614b8a565b500390565b600181811c90821680614c0d57607f821691505b6020821081036134e657634e487b7160e01b600052602260045260246000fd5b600060208083526000845481600182811c915080831680614c4f57607f831692505b8583108103614c6c57634e487b7160e01b85526022600452602485fd5b878601838152602001818015614c895760018114614c9a57614cc5565b60ff19861682528782019650614cc5565b60008b81526020902060005b86811015614cbf57815484820152908501908901614ca6565b83019750505b50949998505050505050505050565b634e487b7160e01b600052603160045260246000fd5b6000816000190483118215151615614d0457614d04614b8a565b500290565b60208152600061165a602083018461497c565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b604081526000614d59604083018688614d1c565b8281036020840152614d6c818587614d1c565b979650505050505050565b60008251614d89818460208701614950565b9190910192915050565b600060208284031215614da557600080fd5b5051919050565b604081526000614dc0604083018587614d1c565b905060018060a01b0383166020830152949350505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052600160045260246000fd5b604081526000614e17604083018561497c565b8281036020840152614e29818561497c565b95945050505050565b600060ff831680614e4557614e45614b60565b8060ff84160691505092915050565b600060ff821660ff841680821015614e6e57614e6e614b8a565b90039392505050565b600060ff821660ff84168060ff03821115614e9457614e94614b8a565b019392505050565b600063ffffffff808316818516808303821115614ebb57614ebb614b8a565b01949350505050565b608081526000614ed7608083018761497c565b8281036020840152614ee9818761497c565b90508281036040840152614efd818661497c565b91505082606083015295945050505050565b600063ffffffff83811690831681811015614f2c57614f2c614b8a565b039392505050565b600060018201614f4657614f46614b8a565b506001019056fed2a2f1f08ad325daf72af0169949ae210065d6916750ff03abd83510331b7b39a4dcee8ff224c7cfd53b1f2cd1f5afd98927d079b4152d639c5e523a52bf1e03a2646970667358221220a3173c3ee9c6d6cd2322bd8d6e484ab2c1095a7f69e0e8ec39b73bf39ce01e6564736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106102085760003560e01c806379ba509711610118578063bf509bd4116100a0578063d2a427471161006f578063d2a42747146105f0578063e00cb6ca14610610578063e99454f514610630578063f0f4426014610650578063f2fde38b1461067057610218565b8063bf509bd414610593578063d0468156146105b3578063d0e30db0146105c8578063d243d69d146105d057610218565b8063a4d8d2c4116100e7578063a4d8d2c414610509578063a740080114610529578063b4336b8414610549578063b747e7dd1461055e578063bf15af561461057e57610218565b806379ba5097146104945780638a1af4c4146104a95780638df4e474146104c95780639adf91ee146104e957610218565b8063286966081161019b5780633b19e84a1161016a5780633b19e84a14610405578063540bc5ea1461041a57806363b4118f1461042f5780636e9960c31461045f578063714b55b21461047457610218565b80632869660814610393578063291206f6146103a85780632ba03a79146103c857806336bf3325146103e857610218565b80631bcbfaba116101d75780631bcbfaba146102f85780631d0958051461031b5780631ee133431461033b578063227e80fa1461037357610218565b806305f63c8a1461023157806308b3a073146102985780630968f264146102b85780631864636c146102d857610218565b366102185761021633610690565b005b60405163574b16a760e11b815260040160405180910390fd5b34801561023d57600080fd5b5061025161024c36600461473a565b610780565b604080516001600160a01b039889168152979096166020880152948601939093526060850191909152608084015260a0830152151560c082015260e0015b60405180910390f35b3480156102a457600080fd5b506102166102b336600461476f565b610832565b3480156102c457600080fd5b506102166102d3366004614841565b610907565b3480156102e457600080fd5b506102166102f3366004614883565b61092e565b34801561030457600080fd5b5061030d61156c565b60405190815260200161028f565b34801561032757600080fd5b5061021661033636600461473a565b61157b565b34801561034757600080fd5b5061035b610356366004614841565b611616565b6040516001600160a01b03909116815260200161028f565b34801561037f57600080fd5b5061021661038e366004614902565b611663565b34801561039f57600080fd5b5061030d6117da565b3480156103b457600080fd5b506102166103c336600461473a565b6117e4565b3480156103d457600080fd5b506102166103e3366004614841565b61091b565b3480156103f457600080fd5b5061030d6801bc16d674ec80000081565b34801561041157600080fd5b5061035b611878565b34801561042657600080fd5b5061030d606081565b34801561043b57600080fd5b5061044f61044a36600461492e565b611882565b60405161028f94939291906149a8565b34801561046b57600080fd5b5061035b611a66565b34801561048057600080fd5b5061021661048f36600461492e565b611a70565b3480156104a057600080fd5b50610216611bbf565b3480156104b557600080fd5b5061030d6104c43660046149ef565b611c35565b3480156104d557600080fd5b506102166104e4366004614a19565b611dee565b3480156104f557600080fd5b5061035b61050436600461473a565b611e61565b34801561051557600080fd5b50610216610524366004614a3b565b611edf565b34801561053557600080fd5b5061035b61054436600461473a565b612054565b34801561055557600080fd5b5061030d61205f565b34801561056a57600080fd5b50610216610579366004614a77565b612069565b34801561058a57600080fd5b5061030d603081565b34801561059f57600080fd5b506102166105ae366004614841565b6123a2565b3480156105bf57600080fd5b5061035b6123b1565b6102166123bb565b3480156105dc57600080fd5b5061035b6105eb366004614841565b6123c6565b3480156105fc57600080fd5b5061021661060b366004614902565b612407565b34801561061c57600080fd5b5061035b61062b366004614841565b6125e4565b34801561063c57600080fd5b5061021661064b366004614afa565b612628565b34801561065c57600080fd5b5061021661066b366004614b45565b6127a4565b34801561067c57600080fd5b5061021661068b366004614b45565b612824565b3415806106ae57506106ab6801bc16d674ec80000034614b76565b15155b156106cc5760405163214121f160e11b815260040160405180910390fd5b60006106d6612865565b905060006106ed6801bc16d674ec80000034614ba0565b905081811115610710576040516315caeb5160e31b815260040160405180910390fd5b600080516020614f4e83398151915280546000036107415760405163ddf9d24560e01b815260040160405180910390fd5b805460010361075a5761075584838561288f565b61077a565b805460020361076e576107558483856128ad565b61077a848385846129bb565b50505050565b600080808080808080600080516020614f4e83398151915280549091508910156108265760006107af8a612b48565b90506000826000018b815481106107c8576107c8614bb4565b600091825260209182902060069091020180546001820154600283015460038401546005909401549487015196516001600160a01b039384169f50919092169c50909a5090985063ffffffff93841697509290921694505060ff1691505b50919395979092949650565b600161083c612bae565b610847906001614bca565b81146108655760405162dc149f60e41b815260040160405180910390fd5b61086e81612bd8565b61087789612c01565b61088088612c2a565b6127108311156108a3576040516358d620b360e01b815260040160405180910390fd5b6108ac83612c53565b6127108211156108cf576040516358d620b360e01b815260040160405180910390fd5b6108d882612c7c565b6108e186612ca5565b6108ea85612cce565b6108f387612cf7565b6108fc84612d20565b505050505050505050565b61091b82826000610916612d49565b612d73565b61092a82826001610916612f29565b5050565b82610937612f53565b6001600160a01b03163303610f545760008290036109685760405163a9cb9e0d60e01b815260040160405180910390fd5b600061097385612b48565b6020810151909150600080516020614f4e8339815191529063ffffffff16858561099e600182614be2565b8181106109ad576109ad614bb4565b9050602002013510156109d3576040516334947ea160e01b815260040160405180910390fd5b60005b84811015610e5257600081118015610a28575085856109f6600184614be2565b818110610a0557610a05614bb4565b90506020020135868683818110610a1e57610a1e614bb4565b9050602002013510155b15610a46576040516335061dff60e01b815260040160405180910390fd5b867f794aacb42d1ea2e7f72809b74e3ce124325a51c3715b873c36807d3ca37e4fd0836000018981548110610a7d57610a7d614bb4565b9060005260206000209060060201600301888885818110610aa057610aa0614bb4565b9050602002013581548110610ab757610ab7614bb4565b90600052602060002001604051610ace9190614c2d565b60405180910390a26001826000018881548110610aed57610aed614bb4565b906000526020600020906006020160030180549050610b0c9190614be2565b868683818110610b1e57610b1e614bb4565b9050602002013503610bd557816000018781548110610b3f57610b3f614bb4565b9060005260206000209060060201600301805480610b5f57610b5f614cd4565b600190038181906000526020600020016000610b7b9190614557565b9055816000018781548110610b9257610b92614bb4565b9060005260206000209060060201600401805480610bb257610bb2614cd4565b600190038181906000526020600020016000610bce9190614557565b9055610e4a565b816000018781548110610bea57610bea614bb4565b90600052602060002090600602016003016001836000018981548110610c1257610c12614bb4565b906000526020600020906006020160030180549050610c319190614be2565b81548110610c4157610c41614bb4565b90600052602060002001826000018881548110610c6057610c60614bb4565b9060005260206000209060060201600301878784818110610c8357610c83614bb4565b9050602002013581548110610c9a57610c9a614bb4565b90600052602060002001908054610cb090614bf9565b610cbb929190614591565b50816000018781548110610cd157610cd1614bb4565b9060005260206000209060060201600301805480610cf157610cf1614cd4565b600190038181906000526020600020016000610d0d9190614557565b9055816000018781548110610d2457610d24614bb4565b90600052602060002090600602016004016001836000018981548110610d4c57610d4c614bb4565b906000526020600020906006020160040180549050610d6b9190614be2565b81548110610d7b57610d7b614bb4565b90600052602060002001826000018881548110610d9a57610d9a614bb4565b9060005260206000209060060201600401878784818110610dbd57610dbd614bb4565b9050602002013581548110610dd457610dd4614bb4565b90600052602060002001908054610dea90614bf9565b610df5929190614591565b50816000018781548110610e0b57610e0b614bb4565b9060005260206000209060060201600401805480610e2b57610e2b614cd4565b600190038181906000526020600020016000610e479190614557565b90555b6001016109d6565b50806000018681548110610e6857610e68614bb4565b60009182526020909120600260069092020101548585610e89600182614be2565b818110610e9857610e98614bb4565b905060200201351015610f44578484610eb2600182614be2565b818110610ec157610ec1614bb4565b90506020020135816000018781548110610edd57610edd614bb4565b6000918252602090912060026006909202010155600080516020614f6e833981519152868686610f0e600182614be2565b818110610f1d57610f1d614bb4565b90506020020135604051610f3b929190918252602082015260400190565b60405180910390a15b610f4d86612f7d565b505061077a565b610f5d81613089565b6000829003610f7f5760405163a9cb9e0d60e01b815260040160405180910390fd5b6000610f8a85612b48565b6020810151909150600080516020614f4e8339815191529063ffffffff168585610fb5600182614be2565b818110610fc457610fc4614bb4565b905060200201351015610fea576040516334947ea160e01b815260040160405180910390fd5b60005b848110156114695760008111801561103f5750858561100d600184614be2565b81811061101c5761101c614bb4565b9050602002013586868381811061103557611035614bb4565b9050602002013510155b1561105d576040516335061dff60e01b815260040160405180910390fd5b867f794aacb42d1ea2e7f72809b74e3ce124325a51c3715b873c36807d3ca37e4fd083600001898154811061109457611094614bb4565b90600052602060002090600602016003018888858181106110b7576110b7614bb4565b90506020020135815481106110ce576110ce614bb4565b906000526020600020016040516110e59190614c2d565b60405180910390a2600182600001888154811061110457611104614bb4565b9060005260206000209060060201600301805490506111239190614be2565b86868381811061113557611135614bb4565b90506020020135036111ec5781600001878154811061115657611156614bb4565b906000526020600020906006020160030180548061117657611176614cd4565b6001900381819060005260206000200160006111929190614557565b90558160000187815481106111a9576111a9614bb4565b90600052602060002090600602016004018054806111c9576111c9614cd4565b6001900381819060005260206000200160006111e59190614557565b9055611461565b81600001878154811061120157611201614bb4565b9060005260206000209060060201600301600183600001898154811061122957611229614bb4565b9060005260206000209060060201600301805490506112489190614be2565b8154811061125857611258614bb4565b9060005260206000200182600001888154811061127757611277614bb4565b906000526020600020906006020160030187878481811061129a5761129a614bb4565b90506020020135815481106112b1576112b1614bb4565b906000526020600020019080546112c790614bf9565b6112d2929190614591565b508160000187815481106112e8576112e8614bb4565b906000526020600020906006020160030180548061130857611308614cd4565b6001900381819060005260206000200160006113249190614557565b905581600001878154811061133b5761133b614bb4565b9060005260206000209060060201600401600183600001898154811061136357611363614bb4565b9060005260206000209060060201600401805490506113829190614be2565b8154811061139257611392614bb4565b906000526020600020018260000188815481106113b1576113b1614bb4565b90600052602060002090600602016004018787848181106113d4576113d4614bb4565b90506020020135815481106113eb576113eb614bb4565b9060005260206000200190805461140190614bf9565b61140c929190614591565b5081600001878154811061142257611422614bb4565b906000526020600020906006020160040180548061144257611442614cd4565b60019003818190600052602060002001600061145e9190614557565b90555b600101610fed565b5080600001868154811061147f5761147f614bb4565b600091825260209091206002600690920201015485856114a0600182614be2565b8181106114af576114af614bb4565b90506020020135101561155b5784846114c9600182614be2565b8181106114d8576114d8614bb4565b905060200201358160000187815481106114f4576114f4614bb4565b6000918252602090912060026006909202010155600080516020614f6e833981519152868686611525600182614be2565b81811061153457611534614bb4565b90506020020135604051611552929190918252602082015260400190565b60405180910390a15b61156486612f7d565b505050505050565b600061157661310e565b905090565b611583612f53565b6001600160a01b0316336001600160a01b0316146115b3576040516282b42960e81b815260040160405180910390fd5b6127108111156115d6576040516358d620b360e01b815260040160405180910390fd5b6115df81612c7c565b6040518181527fd894096cd1f7e89d9b748c7c2358cb699a790a05e97dcde228fe5949b4e80743906020015b60405180910390a150565b600061165a83838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525060019250613138915050565b90505b92915050565b61166b612f53565b6001600160a01b0316336001600160a01b03161461169b576040516282b42960e81b815260040160405180910390fd5b600080516020614f4e83398151915280546000908290859081106116c1576116c1614bb4565b600091825260209182902060069190910201600501805460ff1916921515929092179091556040518481527f8d0ba049731b0417f85546bc7503de241522c61e7464e87cceff56d3f2586dbc910160405180910390a18181600001848154811061172d5761172d614bb4565b906000526020600020906006020160010160006101000a8154816001600160a01b0302191690836001600160a01b031602179055507f97568892aa9e69db7c72b9f32e6d4fe3c0e53b9728a8c0a0f1c2a7eb47c48ad38382600001858154811061179957611799614bb4565b600091825260209182902060069091020154604080519384526001600160a01b039182169284019290925285169082015260600160405180910390a1505050565b60006115766131e2565b6117ec612f53565b6001600160a01b0316336001600160a01b03161461181c576040516282b42960e81b815260040160405180910390fd5b61271081111561183f576040516358d620b360e01b815260040160405180910390fd5b61184881612c53565b6040518181527fecd6fc650620aa722cafc3c3e871fa813947eae6f856982d7510a8ff101a50789060200161160b565b600061157661320c565b60608060008080600080516020614f4e83398151915290508060000187815481106118af576118af614bb4565b906000526020600020906006020160030186815481106118d1576118d1614bb4565b9060005260206000200180546118e690614bf9565b80601f016020809104026020016040519081016040528092919081815260200182805461191290614bf9565b801561195f5780601f106119345761010080835404028352916020019161195f565b820191906000526020600020905b81548152906001019060200180831161194257829003601f168201915b5050505050945080600001878154811061197b5761197b614bb4565b9060005260206000209060060201600401868154811061199d5761199d614bb4565b9060005260206000200180546119b290614bf9565b80601f01602080910402602001604051908101604052809291908181526020018280546119de90614bf9565b8015611a2b5780601f10611a0057610100808354040283529160200191611a2b565b820191906000526020600020905b815481529060010190602001808311611a0e57829003601f168201915b50505050509350611a43611a3e86613236565b613290565b9250611a4e87612b48565b6020015163ffffffff16861091505092959194509250565b6000611576612f53565b611a78612f53565b6001600160a01b0316336001600160a01b031614611aa8576040516282b42960e81b815260040160405180910390fd5b600080516020614f4e8339815191528054819084908110611acb57611acb614bb4565b600091825260209091206005600690920201015460ff1615611b0057604051630450a9a360e21b815260040160405180910390fd5b6000816000018481548110611b1757611b17614bb4565b906000526020600020906006020160030180549050905082811015611b5e576040516362106cb360e01b815260048101849052602481018290526044015b60405180910390fd5b82826000018581548110611b7457611b74614bb4565b906000526020600020906006020160020181905550611b9284612f7d565b6040805185815260208101859052600080516020614f6e833981519152910160405180910390a150505050565b6000611bc96132ca565b9050336001600160a01b03821614611bf3576040516282b42960e81b815260040160405180910390fd5b611bfc81612c01565b6040516001600160a01b03821681527ff29c1089a9594c030706593e345bd8f70a26125bfb7bf4c54e757e20f456fd1c9060200161160b565b6000611c3f612f53565b6001600160a01b0316336001600160a01b031614611c6f576040516282b42960e81b815260040160405180910390fd5b6040805160c0810182526000808252602082018190529181018290526060808201819052608082015260a0810191909152600080516020614f4e833981519152805490919060fb03611cd45760405163a20c741360e01b815260040160405180910390fd5b6001600160a01b03808616825284811660208084019182528454600181810187556000878152839020865160069093020180549286166001600160a01b0319938416178155935190840180549190951691161790925560408301516002820155606083015180518493611d4e92600385019291019061461c565b5060808201518051611d6a91600484019160209091019061461c565b5060a091909101516005909101805460ff19169115159190911790558154600090611d9790600190614be2565b604080516001600160a01b03808a168252881660208201529081018290529091507f2b3c4db2c0f4f51da09c2510a63e1d90235e486e8f075a609103a5c7a07422179060600160405180910390a195945050505050565b611df6612f53565b6001600160a01b0316336001600160a01b031614611e26576040516282b42960e81b815260040160405180910390fd5b611e2f816132f3565b60405181151581527f96639403db35a7ef32b25543bec54f73278d8c5ca82883ef1385ddcb27afa7dc9060200161160b565b60008181527fc58a51931c529c2a8796a8fad2ae789ee504643b4b567f2c0c97e809cec939026020526040812054600080516020614f4e83398151915280549091610100900463ffffffff16908110611ebc57611ebc614bb4565b60009182526020909120600160069092020101546001600160a01b031692915050565b826000600080516020614f4e833981519152805483908110611f0357611f03614bb4565b60009182526020909120600690910201600581015490915060ff1615611f3c57604051630450a9a360e21b815260040160405180910390fd5b60018101546001600160a01b03163314611f68576040516282b42960e81b815260040160405180910390fd5b600080516020614f4e83398151915280548590829088908110611f8d57611f8d614bb4565b906000526020600020906006020160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555083816000018781548110611fd857611fd8614bb4565b60009182526020918290206006919091020160010180546001600160a01b0319166001600160a01b0393841617905560408051898152888416928101929092529186168183015290517f97568892aa9e69db7c72b9f32e6d4fe3c0e53b9728a8c0a0f1c2a7eb47c48ad3916060908290030190a1505050505050565b600061165d82613290565b6000611576612865565b8561207381613089565b856000036120945760405163a9cb9e0d60e01b815260040160405180910390fd5b61209f603085614b76565b1515806120b65750856120b3603086614ba0565b14155b156120d45760405163337d0f4160e01b815260040160405180910390fd5b6120df606083614b76565b1515806120f65750856120f3606084614ba0565b14155b156121145760405163274cf40160e01b815260040160405180910390fd5b600080516020614f4e8339815191527fc58a51931c529c2a8796a8fad2ae789ee504643b4b567f2c0c97e809cec9390260005b8881101561235a57600061219f89898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612198925060309150869050614cea565b603061331c565b905060006121f188888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506121ea925060609150879050614cea565b606061331c565b9050846000018c8154811061220857612208614bb4565b600091825260208083206003600690930201919091018054600181018255908352918190208451612240939190910191850190614675565b50846000018c8154811061225657612256614bb4565b60009182526020808320600460069093020191909101805460018101825590835291819020835161228e939190910191840190614675565b50600061229a83613236565b60008181526020879052604090205490915060ff16156122cf5782604051635a303adb60e01b8152600401611b559190614d09565b60405180604001604052806001151581526020018e63ffffffff1681525085600001600083815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548163ffffffff021916908363ffffffff160217905550905050836001019350505050612147565b50887fb82c87b84f76f39d5f61ed59b411352603805dda6080a2c44b4a86eab141ff1b888888886040516123919493929190614d45565b60405180910390a26108fc89612f7d565b61092a82826000610916612d49565b60006115766132ca565b6123c433610690565b565b600061165a83838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250613138915050565b61240f612f53565b6001600160a01b0316336001600160a01b03161461243f576040516282b42960e81b815260040160405180910390fd5b600080516020614f4e833981519152805460009082908590811061246557612465614bb4565b906000526020600020906006020160020181905550600080516020614f6e8339815191528360006040516124a3929190918252602082015260400190565b60405180910390a160018160000184815481106124c2576124c2614bb4565b600091825260209182902060069190910201600501805460ff1916921515929092179091556040518481527f4c644bb0e171ba9e5cf08f5d66836528c3947c3512b34dd8e27da30e803527b3910160405180910390a18181600001848154811061252e5761252e614bb4565b906000526020600020906006020160010160006101000a8154816001600160a01b0302191690836001600160a01b031602179055507f97568892aa9e69db7c72b9f32e6d4fe3c0e53b9728a8c0a0f1c2a7eb47c48ad38382600001858154811061259a5761259a614bb4565b600091825260209182902060069091020154604080519384526001600160a01b039182169284019290925285169082015260600160405180910390a16125df83612f7d565b505050565b600061165a611a3e84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061323692505050565b612630613429565b61264d57604051631dd2188d60e31b815260040160405180910390fd5b6000600261269085858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061345392505050565b60405161269d9190614d77565b602060405180830381855afa1580156126ba573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906126dd9190614d93565b905060007f86647fdbbdb534026d3e0f93a551cecf651c2b40fcdfef4b9fd9ed826133e2656000838152602082905260409020549091506001600160a01b0316331461273b576040516282b42960e81b815260040160405180910390fd5b7f833a0d0704fbdc6a0f748ebec819c31dde0b532ca9e3e29f56a5c4e8f3cbc0c985858560405161276e93929190614dac565b60405180910390a160009182526020526040902080546001600160a01b0319166001600160a01b03929092169190911790555050565b6127ac612f53565b6001600160a01b0316336001600160a01b0316146127dc576040516282b42960e81b815260040160405180910390fd5b6040516001600160a01b03821681527f63cc689e9d3377465b51fb094ea4ca5e0a1436b21f1ad30d707c696111c665009060200160405180910390a161282181612c2a565b50565b61282c612f53565b6001600160a01b0316336001600160a01b03161461285c576040516282b42960e81b815260040160405180910390fd5b612821816134ec565b60006115767f559ad51499ae00ca2e9d9d95aab46737c8904ab7da276613fefda282b2c2ac065490565b61289b60008385613514565b6125df6128a88383614be2565b6137db565b60006128b96000612b48565b905060006128c76001612b48565b90506000806128d7600243614b76565b6000036128fc576128e9600287614ba0565b91506128f58287614be2565b9050612916565b612907600287614ba0565b90506129138187614be2565b91505b835163ffffffff168211156129485783516129379063ffffffff1687614be2565b845163ffffffff1692509050612977565b825163ffffffff168111156129775782516129699063ffffffff1687614be2565b835190925063ffffffff1690505b81156129895761298960008389613514565b801561299b5761299b60018289613514565b6129b26129a88284614bca565b6128a89087614be2565b50505050505050565b805460006129c882613804565b905060006129d7600143614be2565b40905060008367ffffffffffffffff8111156129f5576129f5614dd8565b604051908082528060200260200182016040528015612a4e57816020015b6040805160a081018252600080825260208083018290529282018190526060820181905260808201528252600019909201910181612a135790505b50905060005b87811015612ac157600080612a6a858488613881565b91509150600080612a7d84848a8961391a565b915091508060ff168260ff1603612a9d57612a9882876139cc565b612ab2565b612ab2612aac83838a8a613a08565b876139cc565b84600101945050505050612a54565b5060005b8151811015612b30576000828281518110612ae257612ae2614bb4565b60200260200101516060015163ffffffff161115612b2857612b2881838381518110612b1057612b10614bb4565b60200260200101516060015163ffffffff168b613514565b600101612ac5565b50612b3e6128a88888614be2565b5050505050505050565b60408051808201825260008082526020808301828152600286901c83527f37e2c371bbf1c7a1326d52e30855e9c8b6cac15eda4475320e427b948813a9f08252939091205463ffffffff60c060069690961b959095161c8481168352901c909216905290565b60006115767fd5c553085b8382c47128ae7612257fd5dc3b4fc4d3a108925604d3c8700c025b5490565b6128217fd5c553085b8382c47128ae7612257fd5dc3b4fc4d3a108925604d3c8700c025b829055565b6128217ffbeda9bc03875013b12a1ec161efb8e5bf7e58e3cec96a1ea9efd3e264d26e64829055565b6128217f10c92bb459c0223bf996150f2fb702a8288fb8354a33d5b0212e8e6b8273f55e829055565b6128217fb88142a0318e2b174876bceb4db9dc318011849c83fb8a8bb2997386d562324a829055565b6128217f41118591c19026bdc7a484e34f80a8e7e632600aff1c72460e9c7dfe94a2dda6829055565b6128217faa81344d5857c875349bc4a95d531a580c46bdd94c41b35b1e072e4d627079f8829055565b6128217fb6d5e19fdd6cde5f03ed4f17c2670deffa47975541fd270b0b17e803297d7608829055565b6128217fbc8b9852d17d50256bb221fdf6ee12d78dd493d807e907f7d223c40d65abd6b9829055565b6128217fd1c64973da70267569571a091966834c1a36bdba47f2a112b6a95bf41fc9c24e829055565b60006115767faa81344d5857c875349bc4a95d531a580c46bdd94c41b35b1e072e4d627079f85490565b6000612db485858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061323692505050565b9050600060028483604051602001612dd6929190918252602082015260400190565b60408051601f1981840301815290829052612df091614d77565b602060405180830381855afa158015612e0d573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612e309190614d93565b90506000612e3c613abd565b90506000612e4a8284613ae7565b9050806001600160a01b03163b600003612ecc57612e688284613b4d565b50604051630b302c9560e21b81526001600160a01b03868116600483015260248201869052821690632cc0b25490604401600060405180830381600087803b158015612eb357600080fd5b505af1158015612ec7573d6000803e3d6000fd5b505050505b806001600160a01b0316633ccfd60b6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612f0757600080fd5b505af1158015612f1b573d6000803e3d6000fd5b505050505050505050505050565b60006115767fb6d5e19fdd6cde5f03ed4f17c2670deffa47975541fd270b0b17e803297d76085490565b60006115767ffbeda9bc03875013b12a1ec161efb8e5bf7e58e3cec96a1ea9efd3e264d26e645490565b6000612f8882612b48565b8051600080516020614f4e8339815191528054929350916000908190612ffb90859088908110612fba57612fba614bb4565b906000526020600020906006020160020154856000018881548110612fe157612fe1614bb4565b906000526020600020906006020160030180549050613bed565b9050846020015163ffffffff1681116130235761301e8660008760200151613bfe565b613049565b60208501516130389063ffffffff1682614be2565b915061304986838760200151613bfe565b8163ffffffff168363ffffffff1614611564576115648263ffffffff168463ffffffff16613075612865565b61307f9190614be2565b6128a89190614bca565b6000600080516020614f4e8339815191528054839081106130ac576130ac614bb4565b60009182526020909120600690910201600581015490915060ff16156130e557604051630450a9a360e21b815260040160405180910390fd5b80546001600160a01b0316331461092a576040516282b42960e81b815260040160405180910390fd5b60006115767fb88142a0318e2b174876bceb4db9dc318011849c83fb8a8bb2997386d562324a5490565b60008061314484613236565b9050600060028483604051602001613166929190918252602082015260400190565b60408051601f198184030181529082905261318091614d77565b602060405180830381855afa15801561319d573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906131c09190614d93565b905060006131cc613abd565b90506131d88183613ae7565b9695505050505050565b60006115767f41118591c19026bdc7a484e34f80a8e7e632600aff1c72460e9c7dfe94a2dda65490565b60006115767f10c92bb459c0223bf996150f2fb702a8288fb8354a33d5b0212e8e6b8273f55e5490565b6000600261324383613453565b6040516132509190614d77565b602060405180830381855afa15801561326d573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061165d9190614d93565b60009081527f86647fdbbdb534026d3e0f93a551cecf651c2b40fcdfef4b9fd9ed826133e26560205260409020546001600160a01b031690565b60006115767e595eca1f8b39945ff4c404827bfa5fd1e295ef3f7d59d120a8ce3bae4e37a05490565b6128217fce3b5bd42ef5aae9d7b01cd806ce2a8b66f0a48f2e8b5a15f77dfbbdbbf5144f829055565b60608161332a81601f614bca565b10156133695760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606401611b55565b6133738284614bca565b845110156133b75760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606401611b55565b6060821580156133d65760405191506000825260208201604052613420565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561340f5780518352602092830192016133f7565b5050858452601f01601f1916604052505b50949350505050565b60006115767fce3b5bd42ef5aae9d7b01cd806ce2a8b66f0a48f2e8b5a15f77dfbbdbbf5144f5490565b6060602082511015801561346957506040825111155b61347557613475614dee565b8151604003613482575090565b6040805160208082528183019092526000916020820181803683370190505090506000602082015282516020036134c4576134bd8382613c72565b9392505050565b6134bd836134e1836000875160406134dc9190614be2565b61331c565b613c72565b50919050565b6128217e595eca1f8b39945ff4c404827bfa5fd1e295ef3f7d59d120a8ce3bae4e37a0829055565b600080516020614f4e833981519152805460009082908690811061353a5761353a614bb4565b90600052602060002090600602019050600061355586612b48565b602081015190915063ffffffff165b85826020015163ffffffff1661357a9190614bca565b8110156137a557600083600301828154811061359857613598614bb4565b9060005260206000200180546135ad90614bf9565b80601f01602080910402602001604051908101604052809291908181526020018280546135d990614bf9565b80156136265780601f106135fb57610100808354040283529160200191613626565b820191906000526020600020905b81548152906001019060200180831161360957829003601f168201915b50505050509050600084600401838154811061364457613644614bb4565b90600052602060002001805461365990614bf9565b80601f016020809104026020016040519081016040528092919081815260200182805461368590614bf9565b80156136d25780601f106136a7576101008083540402835291602001916136d2565b820191906000526020600020905b8154815290600101906020018083116136b557829003601f168201915b5050505050905060006136e6836001613138565b905060006136f382613cef565b9050613700848483613d08565b600061370b85613236565b60008181527f86647fdbbdb534026d3e0f93a551cecf651c2b40fcdfef4b9fd9ed826133e26560205260409081902080546001600160a01b0319166001600160a01b038e1690811790915590519192509033907fac1020908b5f7134d59c1580838eba6fc42dd8c28bae65bf345676bba1913f8e9061378d9089908990614e04565b60405180910390a38560010195505050505050613564565b506115648686836000015163ffffffff166137c09190614be2565b87846020015163ffffffff166137d69190614bca565b613bfe565b6128217f559ad51499ae00ca2e9d9d95aab46737c8904ab7da276613fefda282b2c2ac06829055565b60008061380f6140b9565b905060005b6036811015613867578360ff1682826036811061383357613833614bb4565b602002015160ff161061385f5781816036811061385257613852614bb4565b6020020151949350505050565b600101613814565b50604051631470905f60e01b815260040160405180910390fd5b60008082856020613893876002614cea565b61389d9190614b76565b602081106138ad576138ad614bb4565b6138b99291901a614e32565b91506138c6600184614e54565b8560206138d4876002614cea565b6138df906001614bca565b6138e99190614b76565b602081106138f9576138f9614bb4565b6139059291901a614e32565b613910906001614e77565b9050935093915050565b60008060001980875b8260010b600019148061393a57508160010b600019145b156139be57600061394b8288614277565b63ffffffff161115613975578260010b6000190361396e578060000b9250613975565b8060000b91505b8660ff168860ff168260ff1661398b9190614bca565b6139959190614b76565b90508860ff168160ff161480156139b057508160010b600019145b156139b9578291505b613923565b509097909650945050505050565b6001818360ff16815181106139e3576139e3614bb4565b60200260200101516060018181516139fb9190614e9c565b63ffffffff169052505050565b600080613a1586846143af565b63ffffffff1690506000613a2986856143af565b63ffffffff16905080821015613a43578692505050613ab5565b80821115613a55578592505050613ab5565b60006002866020613a668a8c614e77565b613a709190614e32565b60ff1660208110613a8357613a83614bb4565b613a8f9291901a614e32565b60ff1660011490508015156000151503613aae57869350505050613ab5565b8793505050505b949350505050565b60006115767fd1c64973da70267569571a091966834c1a36bdba47f2a112b6a95bf41fc9c24e5490565b600061165a838330604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b8152606093841b60148201526f5af43d82803e903d91602b57fd5bf3ff60801b6028820152921b6038830152604c8201526037808220606c830152605591012090565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528360601b60148201526e5af43d82803e903d91602b57fd5bf360881b6028820152826037826000f59150506001600160a01b03811661165d5760405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c65640000000000000000006044820152606401611b55565b6000818310156134e657508161165d565b600283901c60009081527f37e2c371bbf1c7a1326d52e30855e9c8b6cac15eda4475320e427b948813a9f060209081526040909120805467ffffffffffffffff60c060069790971b9690961695861b191663ffffffff9490941667ffffffff000000009390921b929092161790921b179055565b6060806040519050835180825260208201818101602087015b81831015613ca3578051835260209283019201613c8b565b50855184518101855292509050808201602086015b81831015613cd0578051835260209283019201613cb8565b508651929092011591909101601f01601f191660405250905092915050565b600061165d6001600160a01b038316600160f81b614bca565b6000613d1384613236565b90506000600280613d27866000604061331c565b604051613d349190614d77565b602060405180830381855afa158015613d51573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190613d749190614d93565b6002613d8f613d8a8860406134dc816060614be2565b613453565b604051613d9c9190614d77565b602060405180830381855afa158015613db9573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190613ddc9190614d93565b60408051602081019390935282015260600160408051601f1981840301815290829052613e0891614d77565b602060405180830381855afa158015613e25573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190613e489190614d93565b90506000613e63633b9aca006801bc16d674ec800000614ba0565b90506801bc16d674ec800000613e7d82633b9aca00614cea565b14613e8a57613e8a614dee565b60006002808587604051602001613eab929190918252602082015260400190565b60408051601f1981840301815290829052613ec591614d77565b602060405180830381855afa158015613ee2573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190613f059190614d93565b6002613f10856144e7565b604080516020810192909252810187905260600160408051601f1981840301815290829052613f3e91614d77565b602060405180830381855afa158015613f5b573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190613f7e9190614d93565b60408051602081019390935282015260600160408051601f1981840301815290829052613faa91614d77565b602060405180830381855afa158015613fc7573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190613fea9190614d93565b905060006140016801bc16d674ec80000047614be2565b905061400b61452d565b6001600160a01b031663228951186801bc16d674ec8000008a8960405160200161403791815260200190565b6040516020818303038152906040528b876040518663ffffffff1660e01b81526004016140679493929190614ec4565b6000604051808303818588803b15801561408057600080fd5b505af1158015614094573d6000803e3d6000fd5b5050505050804714612b3e57604051636596d2b760e01b815260040160405180910390fd5b6140c16146e9565b50604080516106c081018252600281526003602082015260059181019190915260076060820152600b6080820152600d60a0820152601160c0820152601360e08201526017610100820152601d610120820152601f61014082015260256101608201526029610180820152602b6101a0820152602f6101c082015260356101e0820152603b610200820152603d610220820152604361024082015260476102608201526049610280820152604f6102a082015260536102c082015260596102e0820152606161030082015260656103208201526067610340820152606b610360820152606d61038082015260716103a0820152607f6103c082015260836103e08201526089610400820152608b61042082015260956104408201526097610460820152609d61048082015260a36104a082015260a76104c082015260ad6104e082015260b361050082015260b561052082015260bf61054082015260c161056082015260c561058082015260c76105a082015260d36105c082015260df6105e082015260e361060082015260e561062082015260e961064082015260ef61066082015260f161068082015260fb6106a082015290565b600081518360ff161061428c5750600061165d565b818360ff16815181106142a1576142a1614bb4565b602002602001015160000151151560001515036143635760006142c68460ff16612b48565b90506001838560ff16815181106142df576142df614bb4565b6020908102919091018101519115159091528101518351849060ff871690811061430b5761430b614bb4565b60200260200101516040019063ffffffff16908163ffffffff16815250508060000151838560ff168151811061434357614343614bb4565b60200260200101516080019063ffffffff16908163ffffffff1681525050505b818360ff168151811061437857614378614bb4565b602002602001015160600151828460ff168151811061439957614399614bb4565b60200260200101516080015161165a9190614f0f565b600081518360ff16106143c45750600061165d565b818360ff16815181106143d9576143d9614bb4565b6020026020010151600001511515600015150361449b5760006143fe8460ff16612b48565b90506001838560ff168151811061441757614417614bb4565b6020908102919091018101519115159091528101518351849060ff871690811061444357614443614bb4565b60200260200101516040019063ffffffff16908163ffffffff16815250508060000151838560ff168151811061447b5761447b614bb4565b60200260200101516080019063ffffffff16908163ffffffff1681525050505b818360ff16815181106144b0576144b0614bb4565b602002602001015160600151828460ff16815181106144d1576144d1614bb4565b60200260200101516040015161165a9190614e9c565b600081815b600881101561451557600892831b60ff831617929190911c9061450e81614f34565b90506144ec565b50801561452457614524614dee565b5060c01b919050565b60006115767fbc8b9852d17d50256bb221fdf6ee12d78dd493d807e907f7d223c40d65abd6b95490565b50805461456390614bf9565b6000825580601f10614573575050565b601f0160209004906000526020600020908101906128219190614708565b82805461459d90614bf9565b90600052602060002090601f0160209004810192826145bf576000855561460c565b82601f106145d0578054855561460c565b8280016001018555821561460c57600052602060002091601f016020900482015b8281111561460c5782548255916001019190600101906145f1565b50614618929150614708565b5090565b828054828255906000526020600020908101928215614669579160200282015b828111156146695782518051614659918491602090910190614675565b509160200191906001019061463c565b5061461892915061471d565b82805461468190614bf9565b90600052602060002090601f0160209004810192826146a3576000855561460c565b82601f106146bc57805160ff191683800117855561460c565b8280016001018555821561460c579182015b8281111561460c5782518255916020019190600101906146ce565b604051806106c001604052806036906020820280368337509192915050565b5b808211156146185760008155600101614709565b808211156146185760006147318282614557565b5060010161471d565b60006020828403121561474c57600080fd5b5035919050565b80356001600160a01b038116811461476a57600080fd5b919050565b600080600080600080600080610100898b03121561478c57600080fd5b61479589614753565b97506147a360208a01614753565b96506147b160408a01614753565b95506147bf60608a01614753565b94506147cd60808a01614753565b93506147db60a08a01614753565b925060c0890135915060e089013590509295985092959890939650565b60008083601f84011261480a57600080fd5b50813567ffffffffffffffff81111561482257600080fd5b60208301915083602082850101111561483a57600080fd5b9250929050565b6000806020838503121561485457600080fd5b823567ffffffffffffffff81111561486b57600080fd5b614877858286016147f8565b90969095509350505050565b60008060006040848603121561489857600080fd5b83359250602084013567ffffffffffffffff808211156148b757600080fd5b818601915086601f8301126148cb57600080fd5b8135818111156148da57600080fd5b8760208260051b85010111156148ef57600080fd5b6020830194508093505050509250925092565b6000806040838503121561491557600080fd5b8235915061492560208401614753565b90509250929050565b6000806040838503121561494157600080fd5b50508035926020909101359150565b60005b8381101561496b578181015183820152602001614953565b8381111561077a5750506000910152565b60008151808452614994816020860160208601614950565b601f01601f19169290920160200192915050565b6080815260006149bb608083018761497c565b82810360208401526149cd818761497c565b6001600160a01b03959095166040840152505090151560609091015292915050565b60008060408385031215614a0257600080fd5b614a0b83614753565b915061492560208401614753565b600060208284031215614a2b57600080fd5b813580151581146134bd57600080fd5b600080600060608486031215614a5057600080fd5b83359250614a6060208501614753565b9150614a6e60408501614753565b90509250925092565b60008060008060008060808789031215614a9057600080fd5b8635955060208701359450604087013567ffffffffffffffff80821115614ab657600080fd5b614ac28a838b016147f8565b90965094506060890135915080821115614adb57600080fd5b50614ae889828a016147f8565b979a9699509497509295939492505050565b600080600060408486031215614b0f57600080fd5b833567ffffffffffffffff811115614b2657600080fd5b614b32868287016147f8565b9094509250614a6e905060208501614753565b600060208284031215614b5757600080fd5b61165a82614753565b634e487b7160e01b600052601260045260246000fd5b600082614b8557614b85614b60565b500690565b634e487b7160e01b600052601160045260246000fd5b600082614baf57614baf614b60565b500490565b634e487b7160e01b600052603260045260246000fd5b60008219821115614bdd57614bdd614b8a565b500190565b600082821015614bf457614bf4614b8a565b500390565b600181811c90821680614c0d57607f821691505b6020821081036134e657634e487b7160e01b600052602260045260246000fd5b600060208083526000845481600182811c915080831680614c4f57607f831692505b8583108103614c6c57634e487b7160e01b85526022600452602485fd5b878601838152602001818015614c895760018114614c9a57614cc5565b60ff19861682528782019650614cc5565b60008b81526020902060005b86811015614cbf57815484820152908501908901614ca6565b83019750505b50949998505050505050505050565b634e487b7160e01b600052603160045260246000fd5b6000816000190483118215151615614d0457614d04614b8a565b500290565b60208152600061165a602083018461497c565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b604081526000614d59604083018688614d1c565b8281036020840152614d6c818587614d1c565b979650505050505050565b60008251614d89818460208701614950565b9190910192915050565b600060208284031215614da557600080fd5b5051919050565b604081526000614dc0604083018587614d1c565b905060018060a01b0383166020830152949350505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052600160045260246000fd5b604081526000614e17604083018561497c565b8281036020840152614e29818561497c565b95945050505050565b600060ff831680614e4557614e45614b60565b8060ff84160691505092915050565b600060ff821660ff841680821015614e6e57614e6e614b8a565b90039392505050565b600060ff821660ff84168060ff03821115614e9457614e94614b8a565b019392505050565b600063ffffffff808316818516808303821115614ebb57614ebb614b8a565b01949350505050565b608081526000614ed7608083018761497c565b8281036020840152614ee9818761497c565b90508281036040840152614efd818661497c565b91505082606083015295945050505050565b600063ffffffff83811690831681811015614f2c57614f2c614b8a565b039392505050565b600060018201614f4657614f46614b8a565b506001019056fed2a2f1f08ad325daf72af0169949ae210065d6916750ff03abd83510331b7b39a4dcee8ff224c7cfd53b1f2cd1f5afd98927d079b4152d639c5e523a52bf1e03a2646970667358221220a3173c3ee9c6d6cd2322bd8d6e484ab2c1095a7f69e0e8ec39b73bf39ce01e6564736f6c634300080d0033",
  "devdoc": {
    "author": "Kiln",
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "Only callable by new admin"
      },
      "activateOperator(uint256,address)": {
        "params": {
          "_newFeeRecipient": "Sets the fee recipient address",
          "_operatorIndex": "Operator Index"
        }
      },
      "addOperator(address,address)": {
        "details": "Only callable by admin",
        "params": {
          "_feeRecipientAddress": "Operator address used to manage rewards",
          "_operatorAddress": "Operator address allowed to add / remove validators"
        }
      },
      "addValidators(uint256,uint256,bytes,bytes)": {
        "details": "Only callable by operator",
        "params": {
          "_keyCount": "Number of keys added",
          "_operatorIndex": "Operator Index",
          "_publicKeys": "Concatenated _keyCount public keys",
          "_signatures": "Concatenated _keyCount signatures"
        }
      },
      "deactivateOperator(uint256,address)": {
        "params": {
          "_operatorIndex": "Operator Index",
          "_temporaryFeeRecipient": "Temporary address to receive funds decided by the system admin"
        }
      },
      "deposit()": {
        "details": "A multiple of 32 ETH should be sent"
      },
      "getCLFeeRecipient(bytes)": {
        "params": {
          "_publicKey": "Validator to get the recipient"
        }
      },
      "getELFeeRecipient(bytes)": {
        "params": {
          "_publicKey": "Validator to get the recipient"
        }
      },
      "getOperator(uint256)": {
        "params": {
          "_operatorIndex": "Operator index"
        }
      },
      "getValidator(uint256,uint256)": {
        "params": {
          "_operatorIndex": "Index of the operator running the validator",
          "_validatorIndex": "Index of the validator"
        }
      },
      "getWithdrawer(bytes)": {
        "params": {
          "_publicKey": "Public Key to check"
        }
      },
      "getWithdrawerFromPublicKeyRoot(bytes32)": {
        "params": {
          "_publicKeyRoot": "Hash of the public key"
        }
      },
      "removeValidators(uint256,uint256[])": {
        "details": "Only callable by operatorIndexes should be provided in decreasing orderThe limit will be set to the lowest removed operator index to ensure all changes above the      lowest removed validator key are verified by the system administrator",
        "params": {
          "_indexes": "List of indexes to delete, in decreasing order",
          "_operatorIndex": "Operator Index"
        }
      },
      "setGlobalFee(uint256)": {
        "params": {
          "_globalFee": "Fee in Basis Point"
        }
      },
      "setOperatorAddresses(uint256,address,address)": {
        "details": "Only callable by fee recipient address manager",
        "params": {
          "_feeRecipientAddress": "New operator address for reward management",
          "_operatorAddress": "New operator address for operations management",
          "_operatorIndex": "Index of the operator to update"
        }
      },
      "setOperatorFee(uint256)": {
        "params": {
          "_operatorFee": "Fee in Basis Point"
        }
      },
      "setOperatorLimit(uint256,uint256)": {
        "details": "Only callable by adminLimit should not exceed the validator key count of the operatorKeys should be registered before limit is increasedAllows all keys to be verified by the system admin before limit is increased",
        "params": {
          "_limit": "New staking limit",
          "_operatorIndex": "Operator Index"
        }
      },
      "setTreasury(address)": {
        "details": "Only callable by admin",
        "params": {
          "_newTreasury": "New Treasury address"
        }
      },
      "setWithdrawer(bytes,address)": {
        "details": "Only callable by current public key withdrawer",
        "params": {
          "_newWithdrawer": "New withdrawer address",
          "_publicKey": "Public key to change withdrawer"
        }
      },
      "setWithdrawerCustomizationEnabled(bool)": {
        "params": {
          "_enabled": "True to allow users to customize the withdrawer"
        }
      },
      "transferOwnership(address)": {
        "details": "Only callable by admin",
        "params": {
          "_newAdmin": "New Administrator address"
        }
      },
      "withdraw(bytes)": {
        "details": "Reverts if any is null",
        "params": {
          "_publicKey": "Validator to withdraw Execution and Consensus Layer Fees from"
        }
      },
      "withdrawCLFee(bytes)": {
        "details": "Funds are sent to the withdrawer accountThis method is public on purpose",
        "params": {
          "_publicKey": "Validator to withdraw Consensus Layer Fees from"
        }
      },
      "withdrawELFee(bytes)": {
        "details": "Funds are sent to the withdrawer accountThis method is public on purpose",
        "params": {
          "_publicKey": "Validator to withdraw Execution Layer Fees from"
        }
      }
    },
    "title": "Ethereum Staking Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "New admin must accept its role by calling this method"
      },
      "activateOperator(uint256,address)": {
        "notice": "Activates an operator, without changing its 0 staking limit"
      },
      "addOperator(address,address)": {
        "notice": "Add new operator"
      },
      "addValidators(uint256,uint256,bytes,bytes)": {
        "notice": "Add new validator public keys and signatures"
      },
      "deactivateOperator(uint256,address)": {
        "notice": "Deactivates an operator and changes the fee recipient address and the staking limit"
      },
      "deposit()": {
        "notice": "Explicit deposit method using msg.sender"
      },
      "getAdmin()": {
        "notice": "Retrieve system admin"
      },
      "getAvailableValidatorCount()": {
        "notice": "Get the total available keys that are ready to be used for deposits"
      },
      "getCLFeeRecipient(bytes)": {
        "notice": "Compute the Consensus Layer Fee recipient address for a given validator public key"
      },
      "getELFeeRecipient(bytes)": {
        "notice": "Compute the Execution Layer Fee recipient address for a given validator public key"
      },
      "getGlobalFee()": {
        "notice": "Retrieve the global fee"
      },
      "getOperator(uint256)": {
        "notice": "Retrieve operator details"
      },
      "getOperatorFee()": {
        "notice": "Retrieve the operator fee"
      },
      "getOperatorFeeRecipient(bytes32)": {
        "notice": "Retrieve the Execution & Consensus Layer Fee operator recipient for a given public key"
      },
      "getPendingAdmin()": {
        "notice": "Get the new admin's address previously set for an ownership transfer"
      },
      "getTreasury()": {
        "notice": "Retrieve system treasury"
      },
      "getValidator(uint256,uint256)": {
        "notice": "Get details about a validator"
      },
      "getWithdrawer(bytes)": {
        "notice": "Retrieve withdrawer of public key"
      },
      "getWithdrawerFromPublicKeyRoot(bytes32)": {
        "notice": "Retrieve withdrawer of public key root"
      },
      "removeValidators(uint256,uint256[])": {
        "notice": "Remove unfunded validators"
      },
      "setGlobalFee(uint256)": {
        "notice": "Change the Global fee"
      },
      "setOperatorAddresses(uint256,address,address)": {
        "notice": "Set new operator addresses (operations and reward management)"
      },
      "setOperatorFee(uint256)": {
        "notice": "Change the Operator fee"
      },
      "setOperatorLimit(uint256,uint256)": {
        "notice": "Set operator staking limits"
      },
      "setTreasury(address)": {
        "notice": "Set new treasury"
      },
      "setWithdrawer(bytes,address)": {
        "notice": "Set withdrawer for public key"
      },
      "setWithdrawerCustomizationEnabled(bool)": {
        "notice": "Changes the behavior of the withdrawer customization logic"
      },
      "transferOwnership(address)": {
        "notice": "Set new admin"
      },
      "withdraw(bytes)": {
        "notice": "Withdraw both Consensus and Execution Layer Fee for a given validator public key"
      },
      "withdrawCLFee(bytes)": {
        "notice": "Withdraw the Consensus Layer Fee for a given validator public key"
      },
      "withdrawELFee(bytes)": {
        "notice": "Withdraw the Execution Layer Fee for a given validator public key"
      }
    },
    "notice": "You can use this contract to store validator keys and have users fund them and trigger deposits.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}