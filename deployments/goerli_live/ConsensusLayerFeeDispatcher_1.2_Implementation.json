{
  "address": "0x5daBD1606a83d8f8eD0Ea16C8cc0D3491e7EAFaf",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_version",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "errorData",
          "type": "bytes"
        }
      ],
      "name": "FeeRecipientReceiveError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "errorData",
          "type": "bytes"
        }
      ],
      "name": "TreasuryReceiveError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ValidatorNotMigrated",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "errorData",
          "type": "bytes"
        }
      ],
      "name": "WithdrawerReceiveError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroBalanceWithdrawal",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "feeRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "pubKeyRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewards",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nodeOperatorFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "treasuryFee",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_publicKeyRoot",
          "type": "bytes32"
        }
      ],
      "name": "dispatch",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakingContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_publicKeyRoot",
          "type": "bytes32"
        }
      ],
      "name": "getWithdrawer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        }
      ],
      "name": "initCLD",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe8596e7f89a8ea5a5dad66833bdaed30e2dbd0b8a8f316f185a580dbfafb60c6",
  "receipt": {
    "to": null,
    "from": "0x8798a59C60349CAb0a6063F2e13400F5c745c90a",
    "contractAddress": "0x5daBD1606a83d8f8eD0Ea16C8cc0D3491e7EAFaf",
    "transactionIndex": 24,
    "gasUsed": "659063",
    "logsBloom": "0x
    "blockHash": "0xb91afe24fc3d43a7a6012e3071458d64ffea13326c60cbe6b83952561d8a8002",
    "transactionHash": "0xe8596e7f89a8ea5a5dad66833bdaed30e2dbd0b8a8f316f185a580dbfafb60c6",
    "logs": [],
    "blockNumber": 8813172,
    "cumulativeGasUsed": "5216594",
    "status": 1,
    "byzantium": true
  },
  "args": [
    2
  ],
  "numDeployments": 1,
  "solcInputHash": "22a2d9f01bf868aed88b18d749a88b43",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"errorData\",\"type\":\"bytes\"}],\"name\":\"FeeRecipientReceiveError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"errorData\",\"type\":\"bytes\"}],\"name\":\"TreasuryReceiveError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ValidatorNotMigrated\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"errorData\",\"type\":\"bytes\"}],\"name\":\"WithdrawerReceiveError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroBalanceWithdrawal\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"pubKeyRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nodeOperatorFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treasuryFee\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_publicKeyRoot\",\"type\":\"bytes32\"}],\"name\":\"dispatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_publicKeyRoot\",\"type\":\"bytes32\"}],\"name\":\"getWithdrawer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"}],\"name\":\"initCLD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Kiln\",\"kind\":\"dev\",\"methods\":{\"getWithdrawer(bytes32)\":{\"params\":{\"_publicKeyRoot\":\"Public key root to get the owner\"}},\"initCLD(address)\":{\"params\":{\"_stakingContract\":\"Address of the Staking Contract\"}}},\"title\":\"Consensus Layer Fee Recipient\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor method allowing us to prevent calls to initCLFR by setting the appropriate version\"},\"dispatch(bytes32)\":{\"notice\":\"Performs a withdrawal on this contract's balance\"},\"getStakingContract()\":{\"notice\":\"Retrieve the staking contract address\"},\"getWithdrawer(bytes32)\":{\"notice\":\"Retrieve the assigned withdrawer for the given public key root\"},\"initCLD(address)\":{\"notice\":\"Initialize the contract by storing the staking contract\"}},\"notice\":\"This contract can be used to receive fees from a validator and split them with a node operator\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/ConsensusLayerFeeDispatcher.sol\":\"ConsensusLayerFeeDispatcher\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/contracts/ConsensusLayerFeeDispatcher.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.10;\\n\\nimport \\\"./libs/DispatchersStorageLib.sol\\\";\\nimport \\\"./interfaces/IStakingContractFeeDetails.sol\\\";\\nimport \\\"./interfaces/IFeeDispatcher.sol\\\";\\n\\n/// @title Consensus Layer Fee Recipient\\n/// @author Kiln\\n/// @notice This contract can be used to receive fees from a validator and split them with a node operator\\ncontract ConsensusLayerFeeDispatcher is IFeeDispatcher {\\n    using DispatchersStorageLib for bytes32;\\n\\n    event Withdrawal(\\n        address indexed withdrawer,\\n        address indexed feeRecipient,\\n        bytes32 pubKeyRoot,\\n        uint256 rewards,\\n        uint256 nodeOperatorFee,\\n        uint256 treasuryFee\\n    );\\n\\n    error TreasuryReceiveError(bytes errorData);\\n    error FeeRecipientReceiveError(bytes errorData);\\n    error WithdrawerReceiveError(bytes errorData);\\n    error ZeroBalanceWithdrawal();\\n    error AlreadyInitialized();\\n    error InvalidCall();\\n    error ValidatorNotMigrated();\\n\\n    bytes32 internal constant STAKING_CONTRACT_ADDRESS_SLOT =\\n        keccak256(\\\"ConsensusLayerFeeRecipient.stakingContractAddress\\\");\\n    uint256 internal constant BASIS_POINTS = 10_000;\\n    uint256 internal constant SLOT_DURATION_SEC = 12;\\n    bytes32 internal constant VERSION_SLOT = keccak256(\\\"ConsensusLayerFeeRecipient.version\\\");\\n\\n    /// @notice Ensures an initialisation call has been called only once per _version value\\n    /// @param _version The current initialisation value\\n    modifier init(uint256 _version) {\\n        if (_version != VERSION_SLOT.getUint256() + 1) {\\n            revert AlreadyInitialized();\\n        }\\n\\n        VERSION_SLOT.setUint256(_version);\\n\\n        _;\\n    }\\n\\n    /// @notice Constructor method allowing us to prevent calls to initCLFR by setting the appropriate version\\n    constructor(uint256 _version) {\\n        VERSION_SLOT.setUint256(_version);\\n    }\\n\\n    /// @notice Initialize the contract by storing the staking contract\\n    /// @param _stakingContract Address of the Staking Contract\\n    function initCLD(address _stakingContract) external init(1) {\\n        STAKING_CONTRACT_ADDRESS_SLOT.setAddress(_stakingContract);\\n    }\\n\\n    /// @notice Performs a withdrawal on this contract's balance\\n    function dispatch(bytes32 _publicKeyRoot) external payable {\\n        IStakingContractFeeDetails stakingContract = IStakingContractFeeDetails(\\n            STAKING_CONTRACT_ADDRESS_SLOT.getAddress()\\n        );\\n\\n        uint256 balance = address(this).balance; // this has taken into account msg.value\\n        if (balance == 0) {\\n            revert ZeroBalanceWithdrawal();\\n        }\\n\\n        bool exitRequested = stakingContract.getExitRequestedFromRoot(_publicKeyRoot);\\n        bool withdrawn = stakingContract.getWithdrawnFromPublicKeyRoot(_publicKeyRoot);\\n\\n        uint256 nonExemptBalance = balance;\\n\\n        if (exitRequested && balance > 10 ether && !withdrawn) {\\n            if (balance >= 32 ether) {\\n                // In case of healthy exit\\n                nonExemptBalance -= 32 ether;\\n                stakingContract.toggleWithdrawnFromPublicKeyRoot(_publicKeyRoot);\\n            } else {\\n                // In case of slashing\\n                nonExemptBalance -= balance;\\n                stakingContract.toggleWithdrawnFromPublicKeyRoot(_publicKeyRoot);\\n            }\\n        }\\n\\n        uint256 globalFee = (nonExemptBalance * stakingContract.getGlobalFee()) / BASIS_POINTS;\\n\\n        uint256 operatorFee = (globalFee * stakingContract.getOperatorFee()) / BASIS_POINTS;\\n\\n        address withdrawer = stakingContract.getWithdrawerFromPublicKeyRoot(_publicKeyRoot);\\n        (bool status, bytes memory data) = withdrawer.call{value: balance - globalFee}(\\\"\\\");\\n        if (status == false) {\\n            revert WithdrawerReceiveError(data);\\n        }\\n        address operator = stakingContract.getOperatorFeeRecipient(_publicKeyRoot);\\n        if (globalFee > 0) {\\n            address treasury = stakingContract.getTreasury();\\n            (status, data) = treasury.call{value: globalFee - operatorFee}(\\\"\\\");\\n            if (status == false) {\\n                revert TreasuryReceiveError(data);\\n            }\\n\\n            (status, data) = operator.call{value: operatorFee}(\\\"\\\");\\n            if (status == false) {\\n                revert FeeRecipientReceiveError(data);\\n            }\\n        }\\n        emit Withdrawal(\\n            withdrawer,\\n            operator,\\n            _publicKeyRoot,\\n            balance - globalFee,\\n            operatorFee,\\n            globalFee - operatorFee\\n        );\\n    }\\n\\n    /// @notice Retrieve the staking contract address\\n    function getStakingContract() external view returns (address) {\\n        return STAKING_CONTRACT_ADDRESS_SLOT.getAddress();\\n    }\\n\\n    /// @notice Retrieve the assigned withdrawer for the given public key root\\n    /// @param _publicKeyRoot Public key root to get the owner\\n    function getWithdrawer(bytes32 _publicKeyRoot) external view returns (address) {\\n        IStakingContractFeeDetails stakingContract = IStakingContractFeeDetails(\\n            STAKING_CONTRACT_ADDRESS_SLOT.getAddress()\\n        );\\n        return stakingContract.getWithdrawerFromPublicKeyRoot(_publicKeyRoot);\\n    }\\n\\n    receive() external payable {\\n        revert InvalidCall();\\n    }\\n\\n    fallback() external payable {\\n        revert InvalidCall();\\n    }\\n}\\n\",\"keccak256\":\"0xb435ef5f046587490ce1dee8985dc60c3892c6473b6ce1f82be2d6dfc501c038\",\"license\":\"BUSL-1.1\"},\"src/contracts/interfaces/IFeeDispatcher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10;\\n\\ninterface IFeeDispatcher {\\n    function dispatch(bytes32 _publicKeyRoot) external payable;\\n\\n    function getWithdrawer(bytes32 _publicKeyRoot) external view returns (address);\\n}\\n\",\"keccak256\":\"0x75efa5a697b32235188a62f730b7ab2a2fc5c422a93010aa0b18e93ea1bade45\",\"license\":\"MIT\"},\"src/contracts/interfaces/IStakingContractFeeDetails.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10;\\n\\ninterface IStakingContractFeeDetails {\\n    function getWithdrawerFromPublicKeyRoot(bytes32 _publicKeyRoot) external view returns (address);\\n\\n    function getLastWithdrawFromPublicKeyRoot(bytes32 _publicKeyRoot) external view returns (uint256);\\n\\n    function getTreasury() external view returns (address);\\n\\n    function getOperatorFeeRecipient(bytes32 pubKeyRoot) external view returns (address);\\n\\n    function getGlobalFee() external view returns (uint256);\\n\\n    function getOperatorFee() external view returns (uint256);\\n\\n    function getExitRequestedFromRoot(bytes32 _publicKeyRoot) external view returns (bool);\\n\\n    function getWithdrawnFromPublicKeyRoot(bytes32 _publicKeyRoot) external view returns (bool);\\n\\n    function toggleWithdrawnFromPublicKeyRoot(bytes32 _publicKeyRoot) external;\\n}\\n\",\"keccak256\":\"0xde00725e7a3d0624120416f827c0f0b17eec0c702819debcd3c905899538ee91\",\"license\":\"MIT\"},\"src/contracts/libs/DispatchersStorageLib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10;\\n\\nlibrary DispatchersStorageLib {\\n    function getUint256(bytes32 position) internal view returns (uint256 data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function setUint256(bytes32 position, uint256 data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function getAddress(bytes32 position) internal view returns (address data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function setAddress(bytes32 position, address data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x585a11c0ae6f9fda70d5d242ce02336bfd60fd75afed28495156307ba944f6cc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610b1e380380610b1e83398101604081905261002f91610070565b610066817f6081a8ce97ad8a3951bac5b885ad6097d6b55cb45a6dd62b5069939f8c95ffef61006c60201b6108ab1790919060201c565b50610089565b9055565b60006020828403121561008257600080fd5b5051919050565b610a86806100986000396000f3fe6080604052600436106100435760003560e01c806327de90161461007a5780635f0f28d9146100b65780638e68dce4146100d8578063ce120650146100ed57610061565b366100615760405163574b16a760e11b815260040160405180910390fd5b60405163574b16a760e11b815260040160405180910390fd5b34801561008657600080fd5b5061009a6100953660046108af565b610100565b6040516001600160a01b03909116815260200160405180910390f35b3480156100c257600080fd5b506100d66100d13660046108e0565b61018c565b005b3480156100e457600080fd5b5061009a610223565b6100d66100fb3660046108af565b610240565b600080610119600080516020610a318339815191525490565b60405163a740080160e01b8152600481018590529091506001600160a01b0382169063a740080190602401602060405180830381865afa158015610161573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018591906108fd565b9392505050565b60016101b67f6081a8ce97ad8a3951bac5b885ad6097d6b55cb45a6dd62b5069939f8c95ffef5490565b6101c1906001610930565b81146101df5760405162dc149f60e41b815260040160405180910390fd5b6102087f6081a8ce97ad8a3951bac5b885ad6097d6b55cb45a6dd62b5069939f8c95ffef829055565b61021f600080516020610a31833981519152839055565b5050565b600061023b600080516020610a318339815191525490565b905090565b6000610258600080516020610a318339815191525490565b905047600081900361027d57604051635b2b158560e11b815260040160405180910390fd5b604051630c13d03560e41b8152600481018490526000906001600160a01b0384169063c13d035090602401602060405180830381865afa1580156102c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e99190610948565b60405163cac594df60e01b8152600481018690529091506000906001600160a01b0385169063cac594df90602401602060405180830381865afa158015610334573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103589190610948565b90508282801561036f5750678ac7230489e8000084115b8015610379575081155b1561046b576801bc16d674ec8000008410610403576103a16801bc16d674ec8000008261096a565b60405163b86bcaf760e01b8152600481018890529091506001600160a01b0386169063b86bcaf790602401600060405180830381600087803b1580156103e657600080fd5b505af11580156103fa573d6000803e3d6000fd5b5050505061046b565b61040d848261096a565b60405163b86bcaf760e01b8152600481018890529091506001600160a01b0386169063b86bcaf790602401600060405180830381600087803b15801561045257600080fd5b505af1158015610466573d6000803e3d6000fd5b505050505b6000612710866001600160a01b0316631bcbfaba6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d29190610981565b6104dc908461099a565b6104e691906109b9565b90506000612710876001600160a01b031663286966086040518163ffffffff1660e01b8152600401602060405180830381865afa15801561052b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054f9190610981565b610559908461099a565b61056391906109b9565b60405163a740080160e01b8152600481018a90529091506000906001600160a01b0389169063a740080190602401602060405180830381865afa1580156105ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d291906108fd565b90506000806001600160a01b0383166105eb868b61096a565b604051600081818185875af1925050503d8060008114610627576040519150601f19603f3d011682016040523d82523d6000602084013e61062c565b606091505b509092509050811515600003610660578060405163ce13343d60e01b815260040161065791906109db565b60405180910390fd5b604051634d6fc8f760e11b8152600481018c90526000906001600160a01b038c1690639adf91ee90602401602060405180830381865afa1580156106a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cc91906108fd565b905085156108355760008b6001600160a01b0316633b19e84a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610714573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073891906108fd565b90506001600160a01b03811661074e878961096a565b604051600081818185875af1925050503d806000811461078a576040519150601f19603f3d011682016040523d82523d6000602084013e61078f565b606091505b5090945092508315156000036107ba578260405163bc98622d60e01b815260040161065791906109db565b6040516001600160a01b038316908790600081818185875af1925050503d8060008114610803576040519150601f19603f3d011682016040523d82523d6000602084013e610808565b606091505b509094509250831515600003610833578260405163e5ea83e760e01b815260040161065791906109db565b505b6001600160a01b038082169085167f570610cb78811f3a7f90d272791d0a5e71648fb7368280519fc5866e5184db1d8e61086f8a8f61096a565b8961087a818d61096a565b60408051948552602085019390935291830152606082015260800160405180910390a3505050505050505050505050565b9055565b6000602082840312156108c157600080fd5b5035919050565b6001600160a01b03811681146108dd57600080fd5b50565b6000602082840312156108f257600080fd5b8135610185816108c8565b60006020828403121561090f57600080fd5b8151610185816108c8565b634e487b7160e01b600052601160045260246000fd5b600082198211156109435761094361091a565b500190565b60006020828403121561095a57600080fd5b8151801515811461018557600080fd5b60008282101561097c5761097c61091a565b500390565b60006020828403121561099357600080fd5b5051919050565b60008160001904831182151516156109b4576109b461091a565b500290565b6000826109d657634e487b7160e01b600052601260045260246000fd5b500490565b600060208083528351808285015260005b81811015610a08578581018301518582016040015282016109ec565b81811115610a1a576000604083870101525b50601f01601f191692909201604001939250505056fef0fe62e71ff1ce44ef40d55534c386cf3d375849a5782af5d4e66df449ae3a51a2646970667358221220e503ce2a18e3035964fa39887c2b410e0b6f7802911f6f37dc66c8102b83855964736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106100435760003560e01c806327de90161461007a5780635f0f28d9146100b65780638e68dce4146100d8578063ce120650146100ed57610061565b366100615760405163574b16a760e11b815260040160405180910390fd5b60405163574b16a760e11b815260040160405180910390fd5b34801561008657600080fd5b5061009a6100953660046108af565b610100565b6040516001600160a01b03909116815260200160405180910390f35b3480156100c257600080fd5b506100d66100d13660046108e0565b61018c565b005b3480156100e457600080fd5b5061009a610223565b6100d66100fb3660046108af565b610240565b600080610119600080516020610a318339815191525490565b60405163a740080160e01b8152600481018590529091506001600160a01b0382169063a740080190602401602060405180830381865afa158015610161573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018591906108fd565b9392505050565b60016101b67f6081a8ce97ad8a3951bac5b885ad6097d6b55cb45a6dd62b5069939f8c95ffef5490565b6101c1906001610930565b81146101df5760405162dc149f60e41b815260040160405180910390fd5b6102087f6081a8ce97ad8a3951bac5b885ad6097d6b55cb45a6dd62b5069939f8c95ffef829055565b61021f600080516020610a31833981519152839055565b5050565b600061023b600080516020610a318339815191525490565b905090565b6000610258600080516020610a318339815191525490565b905047600081900361027d57604051635b2b158560e11b815260040160405180910390fd5b604051630c13d03560e41b8152600481018490526000906001600160a01b0384169063c13d035090602401602060405180830381865afa1580156102c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e99190610948565b60405163cac594df60e01b8152600481018690529091506000906001600160a01b0385169063cac594df90602401602060405180830381865afa158015610334573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103589190610948565b90508282801561036f5750678ac7230489e8000084115b8015610379575081155b1561046b576801bc16d674ec8000008410610403576103a16801bc16d674ec8000008261096a565b60405163b86bcaf760e01b8152600481018890529091506001600160a01b0386169063b86bcaf790602401600060405180830381600087803b1580156103e657600080fd5b505af11580156103fa573d6000803e3d6000fd5b5050505061046b565b61040d848261096a565b60405163b86bcaf760e01b8152600481018890529091506001600160a01b0386169063b86bcaf790602401600060405180830381600087803b15801561045257600080fd5b505af1158015610466573d6000803e3d6000fd5b505050505b6000612710866001600160a01b0316631bcbfaba6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d29190610981565b6104dc908461099a565b6104e691906109b9565b90506000612710876001600160a01b031663286966086040518163ffffffff1660e01b8152600401602060405180830381865afa15801561052b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054f9190610981565b610559908461099a565b61056391906109b9565b60405163a740080160e01b8152600481018a90529091506000906001600160a01b0389169063a740080190602401602060405180830381865afa1580156105ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d291906108fd565b90506000806001600160a01b0383166105eb868b61096a565b604051600081818185875af1925050503d8060008114610627576040519150601f19603f3d011682016040523d82523d6000602084013e61062c565b606091505b509092509050811515600003610660578060405163ce13343d60e01b815260040161065791906109db565b60405180910390fd5b604051634d6fc8f760e11b8152600481018c90526000906001600160a01b038c1690639adf91ee90602401602060405180830381865afa1580156106a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cc91906108fd565b905085156108355760008b6001600160a01b0316633b19e84a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610714573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073891906108fd565b90506001600160a01b03811661074e878961096a565b604051600081818185875af1925050503d806000811461078a576040519150601f19603f3d011682016040523d82523d6000602084013e61078f565b606091505b5090945092508315156000036107ba578260405163bc98622d60e01b815260040161065791906109db565b6040516001600160a01b038316908790600081818185875af1925050503d8060008114610803576040519150601f19603f3d011682016040523d82523d6000602084013e610808565b606091505b509094509250831515600003610833578260405163e5ea83e760e01b815260040161065791906109db565b505b6001600160a01b038082169085167f570610cb78811f3a7f90d272791d0a5e71648fb7368280519fc5866e5184db1d8e61086f8a8f61096a565b8961087a818d61096a565b60408051948552602085019390935291830152606082015260800160405180910390a3505050505050505050505050565b9055565b6000602082840312156108c157600080fd5b5035919050565b6001600160a01b03811681146108dd57600080fd5b50565b6000602082840312156108f257600080fd5b8135610185816108c8565b60006020828403121561090f57600080fd5b8151610185816108c8565b634e487b7160e01b600052601160045260246000fd5b600082198211156109435761094361091a565b500190565b60006020828403121561095a57600080fd5b8151801515811461018557600080fd5b60008282101561097c5761097c61091a565b500390565b60006020828403121561099357600080fd5b5051919050565b60008160001904831182151516156109b4576109b461091a565b500290565b6000826109d657634e487b7160e01b600052601260045260246000fd5b500490565b600060208083528351808285015260005b81811015610a08578581018301518582016040015282016109ec565b81811115610a1a576000604083870101525b50601f01601f191692909201604001939250505056fef0fe62e71ff1ce44ef40d55534c386cf3d375849a5782af5d4e66df449ae3a51a2646970667358221220e503ce2a18e3035964fa39887c2b410e0b6f7802911f6f37dc66c8102b83855964736f6c634300080d0033",
  "devdoc": {
    "author": "Kiln",
    "kind": "dev",
    "methods": {
      "getWithdrawer(bytes32)": {
        "params": {
          "_publicKeyRoot": "Public key root to get the owner"
        }
      },
      "initCLD(address)": {
        "params": {
          "_stakingContract": "Address of the Staking Contract"
        }
      }
    },
    "title": "Consensus Layer Fee Recipient",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor method allowing us to prevent calls to initCLFR by setting the appropriate version"
      },
      "dispatch(bytes32)": {
        "notice": "Performs a withdrawal on this contract's balance"
      },
      "getStakingContract()": {
        "notice": "Retrieve the staking contract address"
      },
      "getWithdrawer(bytes32)": {
        "notice": "Retrieve the assigned withdrawer for the given public key root"
      },
      "initCLD(address)": {
        "notice": "Initialize the contract by storing the staking contract"
      }
    },
    "notice": "This contract can be used to receive fees from a validator and split them with a node operator",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}